
RTOSII_tp1_B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  08008ebc  08008ebc  00018ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009200  08009200  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08009200  08009200  00019200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009208  08009208  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009208  08009208  00019208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800920c  0800920c  0001920c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08009210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d4c  200000d0  080092e0  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e1c  080092e0  00024e1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ec5a  00000000  00000000  00020143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004dfd  00000000  00000000  0003ed9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a68  00000000  00000000  00043ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000143f  00000000  00000000  00045608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027887  00000000  00000000  00046a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000219b4  00000000  00000000  0006e2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dee76  00000000  00000000  0008fc82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007630  00000000  00000000  0016eaf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00176128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d0 	.word	0x200000d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008ea4 	.word	0x08008ea4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000d4 	.word	0x200000d4
 800020c:	08008ea4 	.word	0x08008ea4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	; 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	200000ec 	.word	0x200000ec
 80005dc:	2000019c 	.word	0x2000019c

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80005e6:	f000 fcf9 	bl	8000fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f827 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 f935 	bl	800085c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f2:	f000 f8db 	bl	80007ac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f6:	f000 f903 	bl	8000800 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80005fa:	f000 f88b 	bl	8000714 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* Start timer */
	HAL_TIM_Base_Start_IT(&htim2);
 80005fe:	480c      	ldr	r0, [pc, #48]	; (8000630 <main+0x50>)
 8000600:	f002 fb8c 	bl	8002d1c <HAL_TIM_Base_Start_IT>

    /* add application, ... */
	app_init();
 8000604:	f006 ff74 	bl	80074f0 <app_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <main+0x54>)
 800060a:	1d3c      	adds	r4, r7, #4
 800060c:	461d      	mov	r5, r3
 800060e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000612:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f004 fba5 	bl	8004d6e <osThreadCreate>
 8000624:	4603      	mov	r3, r0
 8000626:	4a04      	ldr	r2, [pc, #16]	; (8000638 <main+0x58>)
 8000628:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800062a:	f004 fb99 	bl	8004d60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062e:	e7fe      	b.n	800062e <main+0x4e>
 8000630:	2000039c 	.word	0x2000039c
 8000634:	08008ec8 	.word	0x08008ec8
 8000638:	20000934 	.word	0x20000934

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	2234      	movs	r2, #52	; 0x34
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f007 fe09 	bl	8008262 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b29      	ldr	r3, [pc, #164]	; (800070c <SystemClock_Config+0xd0>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a28      	ldr	r2, [pc, #160]	; (800070c <SystemClock_Config+0xd0>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b26      	ldr	r3, [pc, #152]	; (800070c <SystemClock_Config+0xd0>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	4b23      	ldr	r3, [pc, #140]	; (8000710 <SystemClock_Config+0xd4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a22      	ldr	r2, [pc, #136]	; (8000710 <SystemClock_Config+0xd4>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b20      	ldr	r3, [pc, #128]	; (8000710 <SystemClock_Config+0xd4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800069c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b0:	23a8      	movs	r3, #168	; 0xa8
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b8:	2307      	movs	r3, #7
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 f83b 	bl	8002740 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006d0:	f000 f9ba 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2105      	movs	r1, #5
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 f97e 	bl	80019f4 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006fe:	f000 f9a3 	bl	8000a48 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	; 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071a:	f107 0308 	add.w	r3, r7, #8
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000728:	463b      	mov	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000730:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <MX_TIM2_Init+0x94>)
 8000732:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000736:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_TIM2_Init+0x94>)
 800073a:	2201      	movs	r2, #1
 800073c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_TIM2_Init+0x94>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 42-1;
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_TIM2_Init+0x94>)
 8000746:	2229      	movs	r2, #41	; 0x29
 8000748:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_TIM2_Init+0x94>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_TIM2_Init+0x94>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000756:	4814      	ldr	r0, [pc, #80]	; (80007a8 <MX_TIM2_Init+0x94>)
 8000758:	f002 fa90 	bl	8002c7c <HAL_TIM_Base_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000762:	f000 f971 	bl	8000a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	4619      	mov	r1, r3
 8000772:	480d      	ldr	r0, [pc, #52]	; (80007a8 <MX_TIM2_Init+0x94>)
 8000774:	f002 fc4a 	bl	800300c <HAL_TIM_ConfigClockSource>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800077e:	f000 f963 	bl	8000a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800078a:	463b      	mov	r3, r7
 800078c:	4619      	mov	r1, r3
 800078e:	4806      	ldr	r0, [pc, #24]	; (80007a8 <MX_TIM2_Init+0x94>)
 8000790:	f002 fe66 	bl	8003460 <HAL_TIMEx_MasterConfigSynchronization>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800079a:	f000 f955 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000039c 	.word	0x2000039c

080007ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART3_UART_Init+0x4c>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	; (80007fc <MX_USART3_UART_Init+0x50>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_USART3_UART_Init+0x4c>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART3_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART3_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART3_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART3_UART_Init+0x4c>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART3_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART3_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USART3_UART_Init+0x4c>)
 80007e4:	f002 fecc 	bl	8003580 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007ee:	f000 f92b 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200003e4 	.word	0x200003e4
 80007fc:	40004800 	.word	0x40004800

08000800 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000806:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800080a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080e:	2206      	movs	r2, #6
 8000810:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000814:	2202      	movs	r2, #2
 8000816:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000820:	2202      	movs	r2, #2
 8000822:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000826:	2201      	movs	r2, #1
 8000828:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000838:	2201      	movs	r2, #1
 800083a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000844:	f000 ff8d 	bl	8001762 <HAL_PCD_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800084e:	f000 f8fb 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000428 	.word	0x20000428

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08c      	sub	sp, #48	; 0x30
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
 8000876:	4b50      	ldr	r3, [pc, #320]	; (80009b8 <MX_GPIO_Init+0x15c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a4f      	ldr	r2, [pc, #316]	; (80009b8 <MX_GPIO_Init+0x15c>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b4d      	ldr	r3, [pc, #308]	; (80009b8 <MX_GPIO_Init+0x15c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	61bb      	str	r3, [r7, #24]
 800088c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	4b49      	ldr	r3, [pc, #292]	; (80009b8 <MX_GPIO_Init+0x15c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a48      	ldr	r2, [pc, #288]	; (80009b8 <MX_GPIO_Init+0x15c>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b46      	ldr	r3, [pc, #280]	; (80009b8 <MX_GPIO_Init+0x15c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	4b42      	ldr	r3, [pc, #264]	; (80009b8 <MX_GPIO_Init+0x15c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a41      	ldr	r2, [pc, #260]	; (80009b8 <MX_GPIO_Init+0x15c>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b3f      	ldr	r3, [pc, #252]	; (80009b8 <MX_GPIO_Init+0x15c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	4b3b      	ldr	r3, [pc, #236]	; (80009b8 <MX_GPIO_Init+0x15c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a3a      	ldr	r2, [pc, #232]	; (80009b8 <MX_GPIO_Init+0x15c>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b38      	ldr	r3, [pc, #224]	; (80009b8 <MX_GPIO_Init+0x15c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	4b34      	ldr	r3, [pc, #208]	; (80009b8 <MX_GPIO_Init+0x15c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a33      	ldr	r2, [pc, #204]	; (80009b8 <MX_GPIO_Init+0x15c>)
 80008ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <MX_GPIO_Init+0x15c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <MX_GPIO_Init+0x15c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a2c      	ldr	r2, [pc, #176]	; (80009b8 <MX_GPIO_Init+0x15c>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <MX_GPIO_Init+0x15c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000920:	4826      	ldr	r0, [pc, #152]	; (80009bc <MX_GPIO_Init+0x160>)
 8000922:	f000 fee1 	bl	80016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2140      	movs	r1, #64	; 0x40
 800092a:	4825      	ldr	r0, [pc, #148]	; (80009c0 <MX_GPIO_Init+0x164>)
 800092c:	f000 fedc 	bl	80016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000936:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	481f      	ldr	r0, [pc, #124]	; (80009c4 <MX_GPIO_Init+0x168>)
 8000948:	f000 fd22 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800094c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4815      	ldr	r0, [pc, #84]	; (80009bc <MX_GPIO_Init+0x160>)
 8000966:	f000 fd13 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800096a:	2340      	movs	r3, #64	; 0x40
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	480f      	ldr	r0, [pc, #60]	; (80009c0 <MX_GPIO_Init+0x164>)
 8000982:	f000 fd05 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000986:	2380      	movs	r3, #128	; 0x80
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4809      	ldr	r0, [pc, #36]	; (80009c0 <MX_GPIO_Init+0x164>)
 800099a:	f000 fcf9 	bl	8001390 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2105      	movs	r1, #5
 80009a2:	2028      	movs	r0, #40	; 0x28
 80009a4:	f000 fc38 	bl	8001218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009a8:	2028      	movs	r0, #40	; 0x28
 80009aa:	f000 fc51 	bl	8001250 <HAL_NVIC_EnableIRQ>

}
 80009ae:	bf00      	nop
 80009b0:	3730      	adds	r7, #48	; 0x30
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020400 	.word	0x40020400
 80009c0:	40021800 	.word	0x40021800
 80009c4:	40020800 	.word	0x40020800

080009c8 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
void configureTimerForRunTimeStats(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <configureTimerForRunTimeStats+0x14>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	20000938 	.word	0x20000938

080009e0 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <getRunTimeCounterValue+0x14>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000938 	.word	0x20000938

080009f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(0xFFFFFFFF);		/* Miximum delay = (2**32-1) tick */
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	f004 f9ff 	bl	8004e06 <osDelay>
 8000a08:	e7fa      	b.n	8000a00 <StartDefaultTask+0x8>
	...

08000a0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d101      	bne.n	8000a22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a1e:	f000 faff 	bl	8001020 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a2a:	d104      	bne.n	8000a36 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		ulHighFrequencyTimerTicks++;
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	3301      	adds	r3, #1
 8000a32:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a34:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 1 */
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40010000 	.word	0x40010000
 8000a44:	20000938 	.word	0x20000938

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <Error_Handler+0x8>
	...

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_MspInit+0x54>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <HAL_MspInit+0x54>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <HAL_MspInit+0x54>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_MspInit+0x54>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_MspInit+0x54>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_MspInit+0x54>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	210f      	movs	r1, #15
 8000a96:	f06f 0001 	mvn.w	r0, #1
 8000a9a:	f000 fbbd 	bl	8001218 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800

08000aac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000abc:	d115      	bne.n	8000aea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_TIM_Base_MspInit+0x48>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <HAL_TIM_Base_MspInit+0x48>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_TIM_Base_MspInit+0x48>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2105      	movs	r1, #5
 8000ade:	201c      	movs	r0, #28
 8000ae0:	f000 fb9a 	bl	8001218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ae4:	201c      	movs	r0, #28
 8000ae6:	f000 fbb3 	bl	8001250 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a1d      	ldr	r2, [pc, #116]	; (8000b8c <HAL_UART_MspInit+0x94>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d134      	bne.n	8000b84 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <HAL_UART_MspInit+0x98>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a1b      	ldr	r2, [pc, #108]	; (8000b90 <HAL_UART_MspInit+0x98>)
 8000b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <HAL_UART_MspInit+0x98>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_UART_MspInit+0x98>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <HAL_UART_MspInit+0x98>)
 8000b40:	f043 0308 	orr.w	r3, r3, #8
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_UART_MspInit+0x98>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b64:	2307      	movs	r3, #7
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4809      	ldr	r0, [pc, #36]	; (8000b94 <HAL_UART_MspInit+0x9c>)
 8000b70:	f000 fc0e 	bl	8001390 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2105      	movs	r1, #5
 8000b78:	2027      	movs	r0, #39	; 0x27
 8000b7a:	f000 fb4d 	bl	8001218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b7e:	2027      	movs	r0, #39	; 0x27
 8000b80:	f000 fb66 	bl	8001250 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b84:	bf00      	nop
 8000b86:	3728      	adds	r7, #40	; 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40004800 	.word	0x40004800
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020c00 	.word	0x40020c00

08000b98 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b0a0      	sub	sp, #128	; 0x80
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb0:	f107 0310 	add.w	r3, r7, #16
 8000bb4:	225c      	movs	r2, #92	; 0x5c
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f007 fb52 	bl	8008262 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bc6:	d14e      	bne.n	8000c66 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000bc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bcc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 f858 	bl	8001c8c <HAL_RCCEx_PeriphCLKConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000be2:	f7ff ff31 	bl	8000a48 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <HAL_PCD_MspInit+0xd8>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a20      	ldr	r2, [pc, #128]	; (8000c70 <HAL_PCD_MspInit+0xd8>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <HAL_PCD_MspInit+0xd8>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c02:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c06:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c14:	230a      	movs	r3, #10
 8000c16:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4815      	ldr	r0, [pc, #84]	; (8000c74 <HAL_PCD_MspInit+0xdc>)
 8000c20:	f000 fbb6 	bl	8001390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c28:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c36:	4619      	mov	r1, r3
 8000c38:	480e      	ldr	r0, [pc, #56]	; (8000c74 <HAL_PCD_MspInit+0xdc>)
 8000c3a:	f000 fba9 	bl	8001390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_PCD_MspInit+0xd8>)
 8000c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <HAL_PCD_MspInit+0xd8>)
 8000c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c48:	6353      	str	r3, [r2, #52]	; 0x34
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_PCD_MspInit+0xd8>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <HAL_PCD_MspInit+0xd8>)
 8000c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c58:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <HAL_PCD_MspInit+0xd8>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3780      	adds	r7, #128	; 0x80
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020000 	.word	0x40020000

08000c78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	4b2f      	ldr	r3, [pc, #188]	; (8000d4c <HAL_InitTick+0xd4>)
 8000c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c90:	4a2e      	ldr	r2, [pc, #184]	; (8000d4c <HAL_InitTick+0xd4>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	6453      	str	r3, [r2, #68]	; 0x44
 8000c98:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <HAL_InitTick+0xd4>)
 8000c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ca4:	f107 020c 	add.w	r2, r7, #12
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 ffba 	bl	8001c28 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000cb4:	f000 ffa4 	bl	8001c00 <HAL_RCC_GetPCLK2Freq>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc0:	4a23      	ldr	r2, [pc, #140]	; (8000d50 <HAL_InitTick+0xd8>)
 8000cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc6:	0c9b      	lsrs	r3, r3, #18
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ccc:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <HAL_InitTick+0xdc>)
 8000cce:	4a22      	ldr	r2, [pc, #136]	; (8000d58 <HAL_InitTick+0xe0>)
 8000cd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cd2:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <HAL_InitTick+0xdc>)
 8000cd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cd8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cda:	4a1e      	ldr	r2, [pc, #120]	; (8000d54 <HAL_InitTick+0xdc>)
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ce0:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <HAL_InitTick+0xdc>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce6:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <HAL_InitTick+0xdc>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cec:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <HAL_InitTick+0xdc>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000cf2:	4818      	ldr	r0, [pc, #96]	; (8000d54 <HAL_InitTick+0xdc>)
 8000cf4:	f001 ffc2 	bl	8002c7c <HAL_TIM_Base_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000cfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d11b      	bne.n	8000d3e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d06:	4813      	ldr	r0, [pc, #76]	; (8000d54 <HAL_InitTick+0xdc>)
 8000d08:	f002 f808 	bl	8002d1c <HAL_TIM_Base_Start_IT>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d111      	bne.n	8000d3e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d1a:	2019      	movs	r0, #25
 8000d1c:	f000 fa98 	bl	8001250 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b0f      	cmp	r3, #15
 8000d24:	d808      	bhi.n	8000d38 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000d26:	2200      	movs	r2, #0
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	2019      	movs	r0, #25
 8000d2c:	f000 fa74 	bl	8001218 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d30:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <HAL_InitTick+0xe4>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	e002      	b.n	8000d3e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3730      	adds	r7, #48	; 0x30
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	431bde83 	.word	0x431bde83
 8000d54:	2000093c 	.word	0x2000093c
 8000d58:	40010000 	.word	0x40010000
 8000d5c:	20000004 	.word	0x20000004

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x4>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <MemManage_Handler+0x4>

08000d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d92:	f002 f833 	bl	8002dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000093c 	.word	0x2000093c

08000da0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <TIM2_IRQHandler+0x10>)
 8000da6:	f002 f829 	bl	8002dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2000039c 	.word	0x2000039c

08000db4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <USART3_IRQHandler+0x10>)
 8000dba:	f002 fd6b 	bl	8003894 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200003e4 	.word	0x200003e4

08000dc8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000dcc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000dd0:	f000 fca4 	bl	800171c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
	return 1;
 8000ddc:	2301      	movs	r3, #1
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <_kill>:

int _kill(int pid, int sig)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000df2:	f007 fadb 	bl	80083ac <__errno>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2216      	movs	r2, #22
 8000dfa:	601a      	str	r2, [r3, #0]
	return -1;
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_exit>:

void _exit (int status)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ffe7 	bl	8000de8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e1a:	e7fe      	b.n	8000e1a <_exit+0x12>

08000e1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	e00a      	b.n	8000e44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e2e:	f3af 8000 	nop.w
 8000e32:	4601      	mov	r1, r0
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	1c5a      	adds	r2, r3, #1
 8000e38:	60ba      	str	r2, [r7, #8]
 8000e3a:	b2ca      	uxtb	r2, r1
 8000e3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	3301      	adds	r3, #1
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	697a      	ldr	r2, [r7, #20]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	dbf0      	blt.n	8000e2e <_read+0x12>
	}

return len;
 8000e4c:	687b      	ldr	r3, [r7, #4]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b086      	sub	sp, #24
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	e009      	b.n	8000e7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	1c5a      	adds	r2, r3, #1
 8000e6c:	60ba      	str	r2, [r7, #8]
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f006 f823 	bl	8006ebc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	dbf1      	blt.n	8000e68 <_write+0x12>
	}
	return len;
 8000e84:	687b      	ldr	r3, [r7, #4]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <_close>:

int _close(int file)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
	return -1;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eb6:	605a      	str	r2, [r3, #4]
	return 0;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <_isatty>:

int _isatty(int file)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
	return 1;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f00:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <_sbrk+0x5c>)
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <_sbrk+0x60>)
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d102      	bne.n	8000f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <_sbrk+0x64>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <_sbrk+0x68>)
 8000f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d207      	bcs.n	8000f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f28:	f007 fa40 	bl	80083ac <__errno>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	220c      	movs	r2, #12
 8000f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	e009      	b.n	8000f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <_sbrk+0x64>)
 8000f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20020000 	.word	0x20020000
 8000f58:	00000400 	.word	0x00000400
 8000f5c:	20000984 	.word	0x20000984
 8000f60:	20004e20 	.word	0x20004e20

08000f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <SystemInit+0x20>)
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f6e:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <SystemInit+0x20>)
 8000f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f8e:	490e      	ldr	r1, [pc, #56]	; (8000fc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f90:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f94:	e002      	b.n	8000f9c <LoopCopyDataInit>

08000f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9a:	3304      	adds	r3, #4

08000f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa0:	d3f9      	bcc.n	8000f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa2:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fa4:	4c0b      	ldr	r4, [pc, #44]	; (8000fd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa8:	e001      	b.n	8000fae <LoopFillZerobss>

08000faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fac:	3204      	adds	r2, #4

08000fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb0:	d3fb      	bcc.n	8000faa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fb2:	f7ff ffd7 	bl	8000f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fb6:	f007 f9ff 	bl	80083b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fba:	f7ff fb11 	bl	80005e0 <main>
  bx  lr    
 8000fbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc8:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8000fcc:	08009210 	.word	0x08009210
  ldr r2, =_sbss
 8000fd0:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8000fd4:	20004e1c 	.word	0x20004e1c

08000fd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd8:	e7fe      	b.n	8000fd8 <ADC_IRQHandler>
	...

08000fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	; (800101c <HAL_Init+0x40>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	; (800101c <HAL_Init+0x40>)
 8000fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_Init+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	; (800101c <HAL_Init+0x40>)
 8000ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a07      	ldr	r2, [pc, #28]	; (800101c <HAL_Init+0x40>)
 8000ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001002:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 f8fc 	bl	8001202 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100a:	200f      	movs	r0, #15
 800100c:	f7ff fe34 	bl	8000c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001010:	f7ff fd20 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023c00 	.word	0x40023c00

08001020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x20>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x24>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_IncTick+0x24>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008
 8001044:	20000988 	.word	0x20000988

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <HAL_GetTick+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000988 	.word	0x20000988

08001060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff ffee 	bl	8001048 <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001078:	d005      	beq.n	8001086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_Delay+0x44>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001086:	bf00      	nop
 8001088:	f7ff ffde 	bl	8001048 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8f7      	bhi.n	8001088 <HAL_Delay+0x28>
  {
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008

080010a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010da:	4a04      	ldr	r2, [pc, #16]	; (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	60d3      	str	r3, [r2, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db0b      	blt.n	8001136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 021f 	and.w	r2, r3, #31
 8001124:	4907      	ldr	r1, [pc, #28]	; (8001144 <__NVIC_EnableIRQ+0x38>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff4c 	bl	80010a8 <__NVIC_SetPriorityGrouping>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800122a:	f7ff ff61 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 800122e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	68b9      	ldr	r1, [r7, #8]
 8001234:	6978      	ldr	r0, [r7, #20]
 8001236:	f7ff ffb1 	bl	800119c <NVIC_EncodePriority>
 800123a:	4602      	mov	r2, r0
 800123c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff80 	bl	8001148 <__NVIC_SetPriority>
}
 8001248:	bf00      	nop
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff54 	bl	800110c <__NVIC_EnableIRQ>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001278:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800127a:	f7ff fee5 	bl	8001048 <HAL_GetTick>
 800127e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d008      	beq.n	800129e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2280      	movs	r2, #128	; 0x80
 8001290:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e052      	b.n	8001344 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0216 	bic.w	r2, r2, #22
 80012ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	695a      	ldr	r2, [r3, #20]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d103      	bne.n	80012ce <HAL_DMA_Abort+0x62>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d007      	beq.n	80012de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0208 	bic.w	r2, r2, #8
 80012dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0201 	bic.w	r2, r2, #1
 80012ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ee:	e013      	b.n	8001318 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012f0:	f7ff feaa 	bl	8001048 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b05      	cmp	r3, #5
 80012fc:	d90c      	bls.n	8001318 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2220      	movs	r2, #32
 8001302:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2203      	movs	r2, #3
 8001308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e015      	b.n	8001344 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1e4      	bne.n	80012f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132a:	223f      	movs	r2, #63	; 0x3f
 800132c:	409a      	lsls	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2201      	movs	r2, #1
 8001336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d004      	beq.n	800136a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2280      	movs	r2, #128	; 0x80
 8001364:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e00c      	b.n	8001384 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2205      	movs	r2, #5
 800136e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0201 	bic.w	r2, r2, #1
 8001380:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	; 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	e165      	b.n	8001678 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013ac:	2201      	movs	r2, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	f040 8154 	bne.w	8001672 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d005      	beq.n	80013e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d130      	bne.n	8001444 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	2203      	movs	r2, #3
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001418:	2201      	movs	r2, #1
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	f003 0201 	and.w	r2, r3, #1
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b03      	cmp	r3, #3
 800144e:	d017      	beq.n	8001480 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d123      	bne.n	80014d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3208      	adds	r2, #8
 8001494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	220f      	movs	r2, #15
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	08da      	lsrs	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3208      	adds	r2, #8
 80014ce:	69b9      	ldr	r1, [r7, #24]
 80014d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	2203      	movs	r2, #3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0203 	and.w	r2, r3, #3
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80ae 	beq.w	8001672 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b5d      	ldr	r3, [pc, #372]	; (8001690 <HAL_GPIO_Init+0x300>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	4a5c      	ldr	r2, [pc, #368]	; (8001690 <HAL_GPIO_Init+0x300>)
 8001520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001524:	6453      	str	r3, [r2, #68]	; 0x44
 8001526:	4b5a      	ldr	r3, [pc, #360]	; (8001690 <HAL_GPIO_Init+0x300>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001532:	4a58      	ldr	r2, [pc, #352]	; (8001694 <HAL_GPIO_Init+0x304>)
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	3302      	adds	r3, #2
 800153a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	220f      	movs	r2, #15
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4f      	ldr	r2, [pc, #316]	; (8001698 <HAL_GPIO_Init+0x308>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d025      	beq.n	80015aa <HAL_GPIO_Init+0x21a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4e      	ldr	r2, [pc, #312]	; (800169c <HAL_GPIO_Init+0x30c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d01f      	beq.n	80015a6 <HAL_GPIO_Init+0x216>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4d      	ldr	r2, [pc, #308]	; (80016a0 <HAL_GPIO_Init+0x310>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d019      	beq.n	80015a2 <HAL_GPIO_Init+0x212>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4c      	ldr	r2, [pc, #304]	; (80016a4 <HAL_GPIO_Init+0x314>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_GPIO_Init+0x20e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4b      	ldr	r2, [pc, #300]	; (80016a8 <HAL_GPIO_Init+0x318>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d00d      	beq.n	800159a <HAL_GPIO_Init+0x20a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4a      	ldr	r2, [pc, #296]	; (80016ac <HAL_GPIO_Init+0x31c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d007      	beq.n	8001596 <HAL_GPIO_Init+0x206>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a49      	ldr	r2, [pc, #292]	; (80016b0 <HAL_GPIO_Init+0x320>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d101      	bne.n	8001592 <HAL_GPIO_Init+0x202>
 800158e:	2306      	movs	r3, #6
 8001590:	e00c      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 8001592:	2307      	movs	r3, #7
 8001594:	e00a      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 8001596:	2305      	movs	r3, #5
 8001598:	e008      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 800159a:	2304      	movs	r3, #4
 800159c:	e006      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 800159e:	2303      	movs	r3, #3
 80015a0:	e004      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e002      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e000      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 80015aa:	2300      	movs	r3, #0
 80015ac:	69fa      	ldr	r2, [r7, #28]
 80015ae:	f002 0203 	and.w	r2, r2, #3
 80015b2:	0092      	lsls	r2, r2, #2
 80015b4:	4093      	lsls	r3, r2
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015bc:	4935      	ldr	r1, [pc, #212]	; (8001694 <HAL_GPIO_Init+0x304>)
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	089b      	lsrs	r3, r3, #2
 80015c2:	3302      	adds	r3, #2
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ca:	4b3a      	ldr	r3, [pc, #232]	; (80016b4 <HAL_GPIO_Init+0x324>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ee:	4a31      	ldr	r2, [pc, #196]	; (80016b4 <HAL_GPIO_Init+0x324>)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015f4:	4b2f      	ldr	r3, [pc, #188]	; (80016b4 <HAL_GPIO_Init+0x324>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001618:	4a26      	ldr	r2, [pc, #152]	; (80016b4 <HAL_GPIO_Init+0x324>)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800161e:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <HAL_GPIO_Init+0x324>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001642:	4a1c      	ldr	r2, [pc, #112]	; (80016b4 <HAL_GPIO_Init+0x324>)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001648:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <HAL_GPIO_Init+0x324>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800166c:	4a11      	ldr	r2, [pc, #68]	; (80016b4 <HAL_GPIO_Init+0x324>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3301      	adds	r3, #1
 8001676:	61fb      	str	r3, [r7, #28]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	2b0f      	cmp	r3, #15
 800167c:	f67f ae96 	bls.w	80013ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	3724      	adds	r7, #36	; 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800
 8001694:	40013800 	.word	0x40013800
 8001698:	40020000 	.word	0x40020000
 800169c:	40020400 	.word	0x40020400
 80016a0:	40020800 	.word	0x40020800
 80016a4:	40020c00 	.word	0x40020c00
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40021400 	.word	0x40021400
 80016b0:	40021800 	.word	0x40021800
 80016b4:	40013c00 	.word	0x40013c00

080016b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691a      	ldr	r2, [r3, #16]
 80016c8:	887b      	ldrh	r3, [r7, #2]
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016d0:	2301      	movs	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	e001      	b.n	80016da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]
 80016f4:	4613      	mov	r3, r2
 80016f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f8:	787b      	ldrb	r3, [r7, #1]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016fe:	887a      	ldrh	r2, [r7, #2]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001704:	e003      	b.n	800170e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001706:	887b      	ldrh	r3, [r7, #2]
 8001708:	041a      	lsls	r2, r3, #16
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	619a      	str	r2, [r3, #24]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	4013      	ands	r3, r2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d006      	beq.n	8001740 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f806 	bl	800174c <HAL_GPIO_EXTI_Callback>
  }
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40013c00 	.word	0x40013c00

0800174c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001762:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001764:	b08f      	sub	sp, #60	; 0x3c
 8001766:	af0a      	add	r7, sp, #40	; 0x28
 8001768:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e116      	b.n	80019a2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d106      	bne.n	8001794 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fa02 	bl	8000b98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2203      	movs	r2, #3
 8001798:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d102      	bne.n	80017ae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f003 f821 	bl	80047fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	603b      	str	r3, [r7, #0]
 80017be:	687e      	ldr	r6, [r7, #4]
 80017c0:	466d      	mov	r5, sp
 80017c2:	f106 0410 	add.w	r4, r6, #16
 80017c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80017d6:	1d33      	adds	r3, r6, #4
 80017d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017da:	6838      	ldr	r0, [r7, #0]
 80017dc:	f002 ffac 	bl	8004738 <USB_CoreInit>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d005      	beq.n	80017f2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2202      	movs	r2, #2
 80017ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e0d7      	b.n	80019a2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f003 f80f 	bl	800481c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017fe:	2300      	movs	r3, #0
 8001800:	73fb      	strb	r3, [r7, #15]
 8001802:	e04a      	b.n	800189a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4413      	add	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	333d      	adds	r3, #61	; 0x3d
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001818:	7bfa      	ldrb	r2, [r7, #15]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	4413      	add	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	333c      	adds	r3, #60	; 0x3c
 8001828:	7bfa      	ldrb	r2, [r7, #15]
 800182a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800182c:	7bfa      	ldrb	r2, [r7, #15]
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	b298      	uxth	r0, r3
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	3344      	adds	r3, #68	; 0x44
 8001840:	4602      	mov	r2, r0
 8001842:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001844:	7bfa      	ldrb	r2, [r7, #15]
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4413      	add	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	3340      	adds	r3, #64	; 0x40
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001858:	7bfa      	ldrb	r2, [r7, #15]
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4413      	add	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	3348      	adds	r3, #72	; 0x48
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800186c:	7bfa      	ldrb	r2, [r7, #15]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	334c      	adds	r3, #76	; 0x4c
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001880:	7bfa      	ldrb	r2, [r7, #15]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	3354      	adds	r3, #84	; 0x54
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	3301      	adds	r3, #1
 8001898:	73fb      	strb	r3, [r7, #15]
 800189a:	7bfa      	ldrb	r2, [r7, #15]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d3af      	bcc.n	8001804 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	73fb      	strb	r3, [r7, #15]
 80018a8:	e044      	b.n	8001934 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018aa:	7bfa      	ldrb	r2, [r7, #15]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018c0:	7bfa      	ldrb	r2, [r7, #15]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4413      	add	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018d6:	7bfa      	ldrb	r2, [r7, #15]
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4413      	add	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	440b      	add	r3, r1
 80018e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018ec:	7bfa      	ldrb	r2, [r7, #15]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	4413      	add	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	4413      	add	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	440b      	add	r3, r1
 8001910:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001918:	7bfa      	ldrb	r2, [r7, #15]
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	4413      	add	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	3301      	adds	r3, #1
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	7bfa      	ldrb	r2, [r7, #15]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	429a      	cmp	r2, r3
 800193c:	d3b5      	bcc.n	80018aa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	687e      	ldr	r6, [r7, #4]
 8001946:	466d      	mov	r5, sp
 8001948:	f106 0410 	add.w	r4, r6, #16
 800194c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800194e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001954:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001958:	e885 0003 	stmia.w	r5, {r0, r1}
 800195c:	1d33      	adds	r3, r6, #4
 800195e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001960:	6838      	ldr	r0, [r7, #0]
 8001962:	f002 ffa7 	bl	80048b4 <USB_DevInit>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2202      	movs	r2, #2
 8001970:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e014      	b.n	80019a2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	2b01      	cmp	r3, #1
 800198e:	d102      	bne.n	8001996 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f80a 	bl	80019aa <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f003 f965 	bl	8004c6a <USB_DevDisconnect>

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019aa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b085      	sub	sp, #20
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019dc:	f043 0303 	orr.w	r3, r3, #3
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0cc      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a08:	4b68      	ldr	r3, [pc, #416]	; (8001bac <HAL_RCC_ClockConfig+0x1b8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d90c      	bls.n	8001a30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b65      	ldr	r3, [pc, #404]	; (8001bac <HAL_RCC_ClockConfig+0x1b8>)
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	4b63      	ldr	r3, [pc, #396]	; (8001bac <HAL_RCC_ClockConfig+0x1b8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0b8      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d020      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a48:	4b59      	ldr	r3, [pc, #356]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	4a58      	ldr	r2, [pc, #352]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a60:	4b53      	ldr	r3, [pc, #332]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	4a52      	ldr	r2, [pc, #328]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a6c:	4b50      	ldr	r3, [pc, #320]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	494d      	ldr	r1, [pc, #308]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d044      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	4b47      	ldr	r3, [pc, #284]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d119      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e07f      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d003      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab2:	4b3f      	ldr	r3, [pc, #252]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d109      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e06f      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac2:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e067      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad2:	4b37      	ldr	r3, [pc, #220]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f023 0203 	bic.w	r2, r3, #3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	4934      	ldr	r1, [pc, #208]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae4:	f7ff fab0 	bl	8001048 <HAL_GetTick>
 8001ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aec:	f7ff faac 	bl	8001048 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e04f      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 020c 	and.w	r2, r3, #12
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d1eb      	bne.n	8001aec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b14:	4b25      	ldr	r3, [pc, #148]	; (8001bac <HAL_RCC_ClockConfig+0x1b8>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 030f 	and.w	r3, r3, #15
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d20c      	bcs.n	8001b3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b22:	4b22      	ldr	r3, [pc, #136]	; (8001bac <HAL_RCC_ClockConfig+0x1b8>)
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2a:	4b20      	ldr	r3, [pc, #128]	; (8001bac <HAL_RCC_ClockConfig+0x1b8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e032      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d008      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b48:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	4916      	ldr	r1, [pc, #88]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d009      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	490e      	ldr	r1, [pc, #56]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b7a:	f000 fbb1 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	091b      	lsrs	r3, r3, #4
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	490a      	ldr	r1, [pc, #40]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b8c:	5ccb      	ldrb	r3, [r1, r3]
 8001b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b92:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_RCC_ClockConfig+0x1c8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff f86c 	bl	8000c78 <HAL_InitTick>

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023c00 	.word	0x40023c00
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	08009128 	.word	0x08009128
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	20000004 	.word	0x20000004

08001bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000000 	.word	0x20000000

08001bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bdc:	f7ff fff0 	bl	8001bc0 <HAL_RCC_GetHCLKFreq>
 8001be0:	4602      	mov	r2, r0
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	0a9b      	lsrs	r3, r3, #10
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	4903      	ldr	r1, [pc, #12]	; (8001bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bee:	5ccb      	ldrb	r3, [r1, r3]
 8001bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	08009138 	.word	0x08009138

08001c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c04:	f7ff ffdc 	bl	8001bc0 <HAL_RCC_GetHCLKFreq>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	0b5b      	lsrs	r3, r3, #13
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	4903      	ldr	r1, [pc, #12]	; (8001c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c16:	5ccb      	ldrb	r3, [r1, r3]
 8001c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40023800 	.word	0x40023800
 8001c24:	08009138 	.word	0x08009138

08001c28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	220f      	movs	r2, #15
 8001c36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_RCC_GetClockConfig+0x5c>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 0203 	and.w	r2, r3, #3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_RCC_GetClockConfig+0x5c>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <HAL_RCC_GetClockConfig+0x5c>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_RCC_GetClockConfig+0x5c>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	08db      	lsrs	r3, r3, #3
 8001c62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <HAL_RCC_GetClockConfig+0x60>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 020f 	and.w	r2, r3, #15
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	601a      	str	r2, [r3, #0]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40023c00 	.word	0x40023c00

08001c8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08c      	sub	sp, #48	; 0x30
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d010      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001cc4:	4b6f      	ldr	r3, [pc, #444]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cca:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd2:	496c      	ldr	r1, [pc, #432]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d010      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001cf2:	4b64      	ldr	r3, [pc, #400]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cf8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d00:	4960      	ldr	r1, [pc, #384]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001d10:	2301      	movs	r3, #1
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d017      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d20:	4b58      	ldr	r3, [pc, #352]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4955      	ldr	r1, [pc, #340]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001d40:	2301      	movs	r3, #1
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d017      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d5c:	4b49      	ldr	r3, [pc, #292]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6a:	4946      	ldr	r1, [pc, #280]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0320 	and.w	r3, r3, #32
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 808a 	beq.w	8001eae <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	4b39      	ldr	r3, [pc, #228]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	4a38      	ldr	r2, [pc, #224]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da8:	6413      	str	r3, [r2, #64]	; 0x40
 8001daa:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001db6:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a33      	ldr	r2, [pc, #204]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dc2:	f7ff f941 	bl	8001048 <HAL_GetTick>
 8001dc6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001dca:	f7ff f93d 	bl	8001048 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e278      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ddc:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001de8:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d02f      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e00:	6a3a      	ldr	r2, [r7, #32]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d028      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e06:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e0e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e10:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e16:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001e1c:	4a19      	ldr	r2, [pc, #100]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e22:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d114      	bne.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001e2e:	f7ff f90b 	bl	8001048 <HAL_GetTick>
 8001e32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e34:	e00a      	b.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e36:	f7ff f907 	bl	8001048 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e240      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0ee      	beq.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e64:	d114      	bne.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001e66:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e7a:	4902      	ldr	r1, [pc, #8]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	608b      	str	r3, [r1, #8]
 8001e80:	e00c      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40007000 	.word	0x40007000
 8001e8c:	42470e40 	.word	0x42470e40
 8001e90:	4b4a      	ldr	r3, [pc, #296]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4a49      	ldr	r2, [pc, #292]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e96:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e9a:	6093      	str	r3, [r2, #8]
 8001e9c:	4b47      	ldr	r3, [pc, #284]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea8:	4944      	ldr	r1, [pc, #272]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d004      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001ec0:	4b3f      	ldr	r3, [pc, #252]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001ec2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00a      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001ed0:	4b3a      	ldr	r3, [pc, #232]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ede:	4937      	ldr	r1, [pc, #220]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00a      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ef2:	4b32      	ldr	r3, [pc, #200]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f00:	492e      	ldr	r1, [pc, #184]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d011      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001f14:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f1a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f22:	4926      	ldr	r1, [pc, #152]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f32:	d101      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001f34:	2301      	movs	r3, #1
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00a      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	491a      	ldr	r1, [pc, #104]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d011      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f74:	4911      	ldr	r1, [pc, #68]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f84:	d101      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001f86:	2301      	movs	r3, #1
 8001f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d005      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f98:	f040 80ff 	bne.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fa2:	f7ff f851 	bl	8001048 <HAL_GetTick>
 8001fa6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fa8:	e00e      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001faa:	f7ff f84d 	bl	8001048 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d907      	bls.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e188      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	424711e0 	.word	0x424711e0
 8001fc4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fc8:	4b7e      	ldr	r3, [pc, #504]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1ea      	bne.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d009      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d028      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d124      	bne.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001ffc:	4b71      	ldr	r3, [pc, #452]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002002:	0c1b      	lsrs	r3, r3, #16
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	3301      	adds	r3, #1
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800200e:	4b6d      	ldr	r3, [pc, #436]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002014:	0e1b      	lsrs	r3, r3, #24
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	019b      	lsls	r3, r3, #6
 8002026:	431a      	orrs	r2, r3
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	085b      	lsrs	r3, r3, #1
 800202c:	3b01      	subs	r3, #1
 800202e:	041b      	lsls	r3, r3, #16
 8002030:	431a      	orrs	r2, r3
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	061b      	lsls	r3, r3, #24
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	071b      	lsls	r3, r3, #28
 800203e:	4961      	ldr	r1, [pc, #388]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	2b00      	cmp	r3, #0
 8002050:	d004      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800205a:	d00a      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002064:	2b00      	cmp	r3, #0
 8002066:	d035      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002070:	d130      	bne.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002072:	4b54      	ldr	r3, [pc, #336]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002078:	0c1b      	lsrs	r3, r3, #16
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	3301      	adds	r3, #1
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002084:	4b4f      	ldr	r3, [pc, #316]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800208a:	0f1b      	lsrs	r3, r3, #28
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	019b      	lsls	r3, r3, #6
 800209c:	431a      	orrs	r2, r3
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	085b      	lsrs	r3, r3, #1
 80020a2:	3b01      	subs	r3, #1
 80020a4:	041b      	lsls	r3, r3, #16
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	061b      	lsls	r3, r3, #24
 80020ae:	431a      	orrs	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	071b      	lsls	r3, r3, #28
 80020b4:	4943      	ldr	r1, [pc, #268]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80020bc:	4b41      	ldr	r3, [pc, #260]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020c2:	f023 021f 	bic.w	r2, r3, #31
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ca:	3b01      	subs	r3, #1
 80020cc:	493d      	ldr	r1, [pc, #244]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d029      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020e8:	d124      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80020ea:	4b36      	ldr	r3, [pc, #216]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020f0:	0c1b      	lsrs	r3, r3, #16
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	3301      	adds	r3, #1
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020fc:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002102:	0f1b      	lsrs	r3, r3, #28
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	019b      	lsls	r3, r3, #6
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	085b      	lsrs	r3, r3, #1
 800211c:	3b01      	subs	r3, #1
 800211e:	041b      	lsls	r3, r3, #16
 8002120:	431a      	orrs	r2, r3
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	061b      	lsls	r3, r3, #24
 8002126:	431a      	orrs	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	071b      	lsls	r3, r3, #28
 800212c:	4925      	ldr	r1, [pc, #148]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800213c:	2b00      	cmp	r3, #0
 800213e:	d016      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	019b      	lsls	r3, r3, #6
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	3b01      	subs	r3, #1
 8002154:	041b      	lsls	r3, r3, #16
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	061b      	lsls	r3, r3, #24
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	071b      	lsls	r3, r3, #28
 8002166:	4917      	ldr	r1, [pc, #92]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800216e:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002170:	2201      	movs	r2, #1
 8002172:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002174:	f7fe ff68 	bl	8001048 <HAL_GetTick>
 8002178:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800217a:	e008      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800217c:	f7fe ff64 	bl	8001048 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e09f      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800219a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219c:	2b01      	cmp	r3, #1
 800219e:	f040 8095 	bne.w	80022cc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80021a2:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021a8:	f7fe ff4e 	bl	8001048 <HAL_GetTick>
 80021ac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021ae:	e00f      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80021b0:	f7fe ff4a 	bl	8001048 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d908      	bls.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e085      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x642>
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800
 80021c8:	42470068 	.word	0x42470068
 80021cc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021d0:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021dc:	d0e8      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d009      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d02b      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002202:	2b00      	cmp	r3, #0
 8002204:	d127      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002206:	4b34      	ldr	r3, [pc, #208]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220c:	0c1b      	lsrs	r3, r3, #16
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	3301      	adds	r3, #1
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699a      	ldr	r2, [r3, #24]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	019b      	lsls	r3, r3, #6
 8002222:	431a      	orrs	r2, r3
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	085b      	lsrs	r3, r3, #1
 8002228:	3b01      	subs	r3, #1
 800222a:	041b      	lsls	r3, r3, #16
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	061b      	lsls	r3, r3, #24
 8002234:	4928      	ldr	r1, [pc, #160]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800223c:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800223e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002242:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224a:	3b01      	subs	r3, #1
 800224c:	021b      	lsls	r3, r3, #8
 800224e:	4922      	ldr	r1, [pc, #136]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d01d      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002266:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800226a:	d118      	bne.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800226c:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002272:	0e1b      	lsrs	r3, r3, #24
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	019b      	lsls	r3, r3, #6
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	085b      	lsrs	r3, r3, #1
 800228c:	3b01      	subs	r3, #1
 800228e:	041b      	lsls	r3, r3, #16
 8002290:	431a      	orrs	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	061b      	lsls	r3, r3, #24
 8002296:	4910      	ldr	r1, [pc, #64]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800229e:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80022a4:	f7fe fed0 	bl	8001048 <HAL_GetTick>
 80022a8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80022ac:	f7fe fecc 	bl	8001048 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e007      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ca:	d1ef      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3730      	adds	r7, #48	; 0x30
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800
 80022dc:	42470070 	.word	0x42470070

080022e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022e4:	b0ae      	sub	sp, #184	; 0xb8
 80022e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002306:	4bcb      	ldr	r3, [pc, #812]	; (8002634 <HAL_RCC_GetSysClockFreq+0x354>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b0c      	cmp	r3, #12
 8002310:	f200 8206 	bhi.w	8002720 <HAL_RCC_GetSysClockFreq+0x440>
 8002314:	a201      	add	r2, pc, #4	; (adr r2, 800231c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231a:	bf00      	nop
 800231c:	08002351 	.word	0x08002351
 8002320:	08002721 	.word	0x08002721
 8002324:	08002721 	.word	0x08002721
 8002328:	08002721 	.word	0x08002721
 800232c:	08002359 	.word	0x08002359
 8002330:	08002721 	.word	0x08002721
 8002334:	08002721 	.word	0x08002721
 8002338:	08002721 	.word	0x08002721
 800233c:	08002361 	.word	0x08002361
 8002340:	08002721 	.word	0x08002721
 8002344:	08002721 	.word	0x08002721
 8002348:	08002721 	.word	0x08002721
 800234c:	08002551 	.word	0x08002551
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002350:	4bb9      	ldr	r3, [pc, #740]	; (8002638 <HAL_RCC_GetSysClockFreq+0x358>)
 8002352:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002356:	e1e7      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002358:	4bb8      	ldr	r3, [pc, #736]	; (800263c <HAL_RCC_GetSysClockFreq+0x35c>)
 800235a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800235e:	e1e3      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002360:	4bb4      	ldr	r3, [pc, #720]	; (8002634 <HAL_RCC_GetSysClockFreq+0x354>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002368:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800236c:	4bb1      	ldr	r3, [pc, #708]	; (8002634 <HAL_RCC_GetSysClockFreq+0x354>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d071      	beq.n	800245c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002378:	4bae      	ldr	r3, [pc, #696]	; (8002634 <HAL_RCC_GetSysClockFreq+0x354>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	099b      	lsrs	r3, r3, #6
 800237e:	2200      	movs	r2, #0
 8002380:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002384:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002388:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800238c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002390:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800239a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800239e:	4622      	mov	r2, r4
 80023a0:	462b      	mov	r3, r5
 80023a2:	f04f 0000 	mov.w	r0, #0
 80023a6:	f04f 0100 	mov.w	r1, #0
 80023aa:	0159      	lsls	r1, r3, #5
 80023ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023b0:	0150      	lsls	r0, r2, #5
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4621      	mov	r1, r4
 80023b8:	1a51      	subs	r1, r2, r1
 80023ba:	6439      	str	r1, [r7, #64]	; 0x40
 80023bc:	4629      	mov	r1, r5
 80023be:	eb63 0301 	sbc.w	r3, r3, r1
 80023c2:	647b      	str	r3, [r7, #68]	; 0x44
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80023d0:	4649      	mov	r1, r9
 80023d2:	018b      	lsls	r3, r1, #6
 80023d4:	4641      	mov	r1, r8
 80023d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023da:	4641      	mov	r1, r8
 80023dc:	018a      	lsls	r2, r1, #6
 80023de:	4641      	mov	r1, r8
 80023e0:	1a51      	subs	r1, r2, r1
 80023e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80023e4:	4649      	mov	r1, r9
 80023e6:	eb63 0301 	sbc.w	r3, r3, r1
 80023ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80023f8:	4649      	mov	r1, r9
 80023fa:	00cb      	lsls	r3, r1, #3
 80023fc:	4641      	mov	r1, r8
 80023fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002402:	4641      	mov	r1, r8
 8002404:	00ca      	lsls	r2, r1, #3
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	4603      	mov	r3, r0
 800240c:	4622      	mov	r2, r4
 800240e:	189b      	adds	r3, r3, r2
 8002410:	633b      	str	r3, [r7, #48]	; 0x30
 8002412:	462b      	mov	r3, r5
 8002414:	460a      	mov	r2, r1
 8002416:	eb42 0303 	adc.w	r3, r2, r3
 800241a:	637b      	str	r3, [r7, #52]	; 0x34
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002428:	4629      	mov	r1, r5
 800242a:	024b      	lsls	r3, r1, #9
 800242c:	4621      	mov	r1, r4
 800242e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002432:	4621      	mov	r1, r4
 8002434:	024a      	lsls	r2, r1, #9
 8002436:	4610      	mov	r0, r2
 8002438:	4619      	mov	r1, r3
 800243a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800243e:	2200      	movs	r2, #0
 8002440:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002444:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002448:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800244c:	f7fd ff30 	bl	80002b0 <__aeabi_uldivmod>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4613      	mov	r3, r2
 8002456:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800245a:	e067      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800245c:	4b75      	ldr	r3, [pc, #468]	; (8002634 <HAL_RCC_GetSysClockFreq+0x354>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	099b      	lsrs	r3, r3, #6
 8002462:	2200      	movs	r2, #0
 8002464:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002468:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800246c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002474:	67bb      	str	r3, [r7, #120]	; 0x78
 8002476:	2300      	movs	r3, #0
 8002478:	67fb      	str	r3, [r7, #124]	; 0x7c
 800247a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800247e:	4622      	mov	r2, r4
 8002480:	462b      	mov	r3, r5
 8002482:	f04f 0000 	mov.w	r0, #0
 8002486:	f04f 0100 	mov.w	r1, #0
 800248a:	0159      	lsls	r1, r3, #5
 800248c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002490:	0150      	lsls	r0, r2, #5
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4621      	mov	r1, r4
 8002498:	1a51      	subs	r1, r2, r1
 800249a:	62b9      	str	r1, [r7, #40]	; 0x28
 800249c:	4629      	mov	r1, r5
 800249e:	eb63 0301 	sbc.w	r3, r3, r1
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	f04f 0300 	mov.w	r3, #0
 80024ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80024b0:	4649      	mov	r1, r9
 80024b2:	018b      	lsls	r3, r1, #6
 80024b4:	4641      	mov	r1, r8
 80024b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024ba:	4641      	mov	r1, r8
 80024bc:	018a      	lsls	r2, r1, #6
 80024be:	4641      	mov	r1, r8
 80024c0:	ebb2 0a01 	subs.w	sl, r2, r1
 80024c4:	4649      	mov	r1, r9
 80024c6:	eb63 0b01 	sbc.w	fp, r3, r1
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024de:	4692      	mov	sl, r2
 80024e0:	469b      	mov	fp, r3
 80024e2:	4623      	mov	r3, r4
 80024e4:	eb1a 0303 	adds.w	r3, sl, r3
 80024e8:	623b      	str	r3, [r7, #32]
 80024ea:	462b      	mov	r3, r5
 80024ec:	eb4b 0303 	adc.w	r3, fp, r3
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80024fe:	4629      	mov	r1, r5
 8002500:	028b      	lsls	r3, r1, #10
 8002502:	4621      	mov	r1, r4
 8002504:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002508:	4621      	mov	r1, r4
 800250a:	028a      	lsls	r2, r1, #10
 800250c:	4610      	mov	r0, r2
 800250e:	4619      	mov	r1, r3
 8002510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002514:	2200      	movs	r2, #0
 8002516:	673b      	str	r3, [r7, #112]	; 0x70
 8002518:	677a      	str	r2, [r7, #116]	; 0x74
 800251a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800251e:	f7fd fec7 	bl	80002b0 <__aeabi_uldivmod>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4613      	mov	r3, r2
 8002528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800252c:	4b41      	ldr	r3, [pc, #260]	; (8002634 <HAL_RCC_GetSysClockFreq+0x354>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	0c1b      	lsrs	r3, r3, #16
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	3301      	adds	r3, #1
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800253e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002542:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002546:	fbb2 f3f3 	udiv	r3, r2, r3
 800254a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800254e:	e0eb      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002550:	4b38      	ldr	r3, [pc, #224]	; (8002634 <HAL_RCC_GetSysClockFreq+0x354>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800255c:	4b35      	ldr	r3, [pc, #212]	; (8002634 <HAL_RCC_GetSysClockFreq+0x354>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d06b      	beq.n	8002640 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002568:	4b32      	ldr	r3, [pc, #200]	; (8002634 <HAL_RCC_GetSysClockFreq+0x354>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	099b      	lsrs	r3, r3, #6
 800256e:	2200      	movs	r2, #0
 8002570:	66bb      	str	r3, [r7, #104]	; 0x68
 8002572:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800257a:	663b      	str	r3, [r7, #96]	; 0x60
 800257c:	2300      	movs	r3, #0
 800257e:	667b      	str	r3, [r7, #100]	; 0x64
 8002580:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002584:	4622      	mov	r2, r4
 8002586:	462b      	mov	r3, r5
 8002588:	f04f 0000 	mov.w	r0, #0
 800258c:	f04f 0100 	mov.w	r1, #0
 8002590:	0159      	lsls	r1, r3, #5
 8002592:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002596:	0150      	lsls	r0, r2, #5
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4621      	mov	r1, r4
 800259e:	1a51      	subs	r1, r2, r1
 80025a0:	61b9      	str	r1, [r7, #24]
 80025a2:	4629      	mov	r1, r5
 80025a4:	eb63 0301 	sbc.w	r3, r3, r1
 80025a8:	61fb      	str	r3, [r7, #28]
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80025b6:	4659      	mov	r1, fp
 80025b8:	018b      	lsls	r3, r1, #6
 80025ba:	4651      	mov	r1, sl
 80025bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025c0:	4651      	mov	r1, sl
 80025c2:	018a      	lsls	r2, r1, #6
 80025c4:	4651      	mov	r1, sl
 80025c6:	ebb2 0801 	subs.w	r8, r2, r1
 80025ca:	4659      	mov	r1, fp
 80025cc:	eb63 0901 	sbc.w	r9, r3, r1
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025e4:	4690      	mov	r8, r2
 80025e6:	4699      	mov	r9, r3
 80025e8:	4623      	mov	r3, r4
 80025ea:	eb18 0303 	adds.w	r3, r8, r3
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	462b      	mov	r3, r5
 80025f2:	eb49 0303 	adc.w	r3, r9, r3
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002604:	4629      	mov	r1, r5
 8002606:	024b      	lsls	r3, r1, #9
 8002608:	4621      	mov	r1, r4
 800260a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800260e:	4621      	mov	r1, r4
 8002610:	024a      	lsls	r2, r1, #9
 8002612:	4610      	mov	r0, r2
 8002614:	4619      	mov	r1, r3
 8002616:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800261a:	2200      	movs	r2, #0
 800261c:	65bb      	str	r3, [r7, #88]	; 0x58
 800261e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002620:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002624:	f7fd fe44 	bl	80002b0 <__aeabi_uldivmod>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4613      	mov	r3, r2
 800262e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002632:	e065      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x420>
 8002634:	40023800 	.word	0x40023800
 8002638:	00f42400 	.word	0x00f42400
 800263c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002640:	4b3d      	ldr	r3, [pc, #244]	; (8002738 <HAL_RCC_GetSysClockFreq+0x458>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	099b      	lsrs	r3, r3, #6
 8002646:	2200      	movs	r2, #0
 8002648:	4618      	mov	r0, r3
 800264a:	4611      	mov	r1, r2
 800264c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002650:	653b      	str	r3, [r7, #80]	; 0x50
 8002652:	2300      	movs	r3, #0
 8002654:	657b      	str	r3, [r7, #84]	; 0x54
 8002656:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800265a:	4642      	mov	r2, r8
 800265c:	464b      	mov	r3, r9
 800265e:	f04f 0000 	mov.w	r0, #0
 8002662:	f04f 0100 	mov.w	r1, #0
 8002666:	0159      	lsls	r1, r3, #5
 8002668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800266c:	0150      	lsls	r0, r2, #5
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4641      	mov	r1, r8
 8002674:	1a51      	subs	r1, r2, r1
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	4649      	mov	r1, r9
 800267a:	eb63 0301 	sbc.w	r3, r3, r1
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800268c:	4659      	mov	r1, fp
 800268e:	018b      	lsls	r3, r1, #6
 8002690:	4651      	mov	r1, sl
 8002692:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002696:	4651      	mov	r1, sl
 8002698:	018a      	lsls	r2, r1, #6
 800269a:	4651      	mov	r1, sl
 800269c:	1a54      	subs	r4, r2, r1
 800269e:	4659      	mov	r1, fp
 80026a0:	eb63 0501 	sbc.w	r5, r3, r1
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	00eb      	lsls	r3, r5, #3
 80026ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026b2:	00e2      	lsls	r2, r4, #3
 80026b4:	4614      	mov	r4, r2
 80026b6:	461d      	mov	r5, r3
 80026b8:	4643      	mov	r3, r8
 80026ba:	18e3      	adds	r3, r4, r3
 80026bc:	603b      	str	r3, [r7, #0]
 80026be:	464b      	mov	r3, r9
 80026c0:	eb45 0303 	adc.w	r3, r5, r3
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026d2:	4629      	mov	r1, r5
 80026d4:	028b      	lsls	r3, r1, #10
 80026d6:	4621      	mov	r1, r4
 80026d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026dc:	4621      	mov	r1, r4
 80026de:	028a      	lsls	r2, r1, #10
 80026e0:	4610      	mov	r0, r2
 80026e2:	4619      	mov	r1, r3
 80026e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026e8:	2200      	movs	r2, #0
 80026ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80026ec:	64fa      	str	r2, [r7, #76]	; 0x4c
 80026ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026f2:	f7fd fddd 	bl	80002b0 <__aeabi_uldivmod>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4613      	mov	r3, r2
 80026fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002700:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <HAL_RCC_GetSysClockFreq+0x458>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	0f1b      	lsrs	r3, r3, #28
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800270e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002712:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002716:	fbb2 f3f3 	udiv	r3, r2, r3
 800271a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800271e:	e003      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002722:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002726:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002728:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800272c:	4618      	mov	r0, r3
 800272e:	37b8      	adds	r7, #184	; 0xb8
 8002730:	46bd      	mov	sp, r7
 8002732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800
 800273c:	00f42400 	.word	0x00f42400

08002740 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e28d      	b.n	8002c6e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 8083 	beq.w	8002866 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002760:	4b94      	ldr	r3, [pc, #592]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 030c 	and.w	r3, r3, #12
 8002768:	2b04      	cmp	r3, #4
 800276a:	d019      	beq.n	80027a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800276c:	4b91      	ldr	r3, [pc, #580]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002774:	2b08      	cmp	r3, #8
 8002776:	d106      	bne.n	8002786 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002778:	4b8e      	ldr	r3, [pc, #568]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002784:	d00c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002786:	4b8b      	ldr	r3, [pc, #556]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800278e:	2b0c      	cmp	r3, #12
 8002790:	d112      	bne.n	80027b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002792:	4b88      	ldr	r3, [pc, #544]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800279a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800279e:	d10b      	bne.n	80027b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a0:	4b84      	ldr	r3, [pc, #528]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d05b      	beq.n	8002864 <HAL_RCC_OscConfig+0x124>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d157      	bne.n	8002864 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e25a      	b.n	8002c6e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c0:	d106      	bne.n	80027d0 <HAL_RCC_OscConfig+0x90>
 80027c2:	4b7c      	ldr	r3, [pc, #496]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a7b      	ldr	r2, [pc, #492]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	e01d      	b.n	800280c <HAL_RCC_OscConfig+0xcc>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027d8:	d10c      	bne.n	80027f4 <HAL_RCC_OscConfig+0xb4>
 80027da:	4b76      	ldr	r3, [pc, #472]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a75      	ldr	r2, [pc, #468]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 80027e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	4b73      	ldr	r3, [pc, #460]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a72      	ldr	r2, [pc, #456]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 80027ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	e00b      	b.n	800280c <HAL_RCC_OscConfig+0xcc>
 80027f4:	4b6f      	ldr	r3, [pc, #444]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a6e      	ldr	r2, [pc, #440]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 80027fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	4b6c      	ldr	r3, [pc, #432]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a6b      	ldr	r2, [pc, #428]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 8002806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800280a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d013      	beq.n	800283c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe fc18 	bl	8001048 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800281c:	f7fe fc14 	bl	8001048 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	; 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e21f      	b.n	8002c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	4b61      	ldr	r3, [pc, #388]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0xdc>
 800283a:	e014      	b.n	8002866 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7fe fc04 	bl	8001048 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002844:	f7fe fc00 	bl	8001048 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b64      	cmp	r3, #100	; 0x64
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e20b      	b.n	8002c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002856:	4b57      	ldr	r3, [pc, #348]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x104>
 8002862:	e000      	b.n	8002866 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d06f      	beq.n	8002952 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002872:	4b50      	ldr	r3, [pc, #320]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b00      	cmp	r3, #0
 800287c:	d017      	beq.n	80028ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800287e:	4b4d      	ldr	r3, [pc, #308]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002886:	2b08      	cmp	r3, #8
 8002888:	d105      	bne.n	8002896 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800288a:	4b4a      	ldr	r3, [pc, #296]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00b      	beq.n	80028ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002896:	4b47      	ldr	r3, [pc, #284]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800289e:	2b0c      	cmp	r3, #12
 80028a0:	d11c      	bne.n	80028dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028a2:	4b44      	ldr	r3, [pc, #272]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d116      	bne.n	80028dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ae:	4b41      	ldr	r3, [pc, #260]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d005      	beq.n	80028c6 <HAL_RCC_OscConfig+0x186>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d001      	beq.n	80028c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e1d3      	b.n	8002c6e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c6:	4b3b      	ldr	r3, [pc, #236]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	4937      	ldr	r1, [pc, #220]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028da:	e03a      	b.n	8002952 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d020      	beq.n	8002926 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028e4:	4b34      	ldr	r3, [pc, #208]	; (80029b8 <HAL_RCC_OscConfig+0x278>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ea:	f7fe fbad 	bl	8001048 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f2:	f7fe fba9 	bl	8001048 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e1b4      	b.n	8002c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002904:	4b2b      	ldr	r3, [pc, #172]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002910:	4b28      	ldr	r3, [pc, #160]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4925      	ldr	r1, [pc, #148]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 8002920:	4313      	orrs	r3, r2
 8002922:	600b      	str	r3, [r1, #0]
 8002924:	e015      	b.n	8002952 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002926:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <HAL_RCC_OscConfig+0x278>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe fb8c 	bl	8001048 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002934:	f7fe fb88 	bl	8001048 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e193      	b.n	8002c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002946:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d036      	beq.n	80029cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d016      	beq.n	8002994 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_RCC_OscConfig+0x27c>)
 8002968:	2201      	movs	r2, #1
 800296a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296c:	f7fe fb6c 	bl	8001048 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002974:	f7fe fb68 	bl	8001048 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e173      	b.n	8002c6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002986:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 8002988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x234>
 8002992:	e01b      	b.n	80029cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002994:	4b09      	ldr	r3, [pc, #36]	; (80029bc <HAL_RCC_OscConfig+0x27c>)
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299a:	f7fe fb55 	bl	8001048 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a0:	e00e      	b.n	80029c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a2:	f7fe fb51 	bl	8001048 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d907      	bls.n	80029c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e15c      	b.n	8002c6e <HAL_RCC_OscConfig+0x52e>
 80029b4:	40023800 	.word	0x40023800
 80029b8:	42470000 	.word	0x42470000
 80029bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c0:	4b8a      	ldr	r3, [pc, #552]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 80029c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1ea      	bne.n	80029a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 8097 	beq.w	8002b08 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029da:	2300      	movs	r3, #0
 80029dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029de:	4b83      	ldr	r3, [pc, #524]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10f      	bne.n	8002a0a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	4b7f      	ldr	r3, [pc, #508]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	4a7e      	ldr	r2, [pc, #504]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 80029f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f8:	6413      	str	r3, [r2, #64]	; 0x40
 80029fa:	4b7c      	ldr	r3, [pc, #496]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a06:	2301      	movs	r3, #1
 8002a08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0a:	4b79      	ldr	r3, [pc, #484]	; (8002bf0 <HAL_RCC_OscConfig+0x4b0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d118      	bne.n	8002a48 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a16:	4b76      	ldr	r3, [pc, #472]	; (8002bf0 <HAL_RCC_OscConfig+0x4b0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a75      	ldr	r2, [pc, #468]	; (8002bf0 <HAL_RCC_OscConfig+0x4b0>)
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a22:	f7fe fb11 	bl	8001048 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2a:	f7fe fb0d 	bl	8001048 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e118      	b.n	8002c6e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3c:	4b6c      	ldr	r3, [pc, #432]	; (8002bf0 <HAL_RCC_OscConfig+0x4b0>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d106      	bne.n	8002a5e <HAL_RCC_OscConfig+0x31e>
 8002a50:	4b66      	ldr	r3, [pc, #408]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 8002a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a54:	4a65      	ldr	r2, [pc, #404]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5c:	e01c      	b.n	8002a98 <HAL_RCC_OscConfig+0x358>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2b05      	cmp	r3, #5
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCC_OscConfig+0x340>
 8002a66:	4b61      	ldr	r3, [pc, #388]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 8002a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6a:	4a60      	ldr	r2, [pc, #384]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 8002a6c:	f043 0304 	orr.w	r3, r3, #4
 8002a70:	6713      	str	r3, [r2, #112]	; 0x70
 8002a72:	4b5e      	ldr	r3, [pc, #376]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a76:	4a5d      	ldr	r2, [pc, #372]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7e:	e00b      	b.n	8002a98 <HAL_RCC_OscConfig+0x358>
 8002a80:	4b5a      	ldr	r3, [pc, #360]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a84:	4a59      	ldr	r2, [pc, #356]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 8002a86:	f023 0301 	bic.w	r3, r3, #1
 8002a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8c:	4b57      	ldr	r3, [pc, #348]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a90:	4a56      	ldr	r2, [pc, #344]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 8002a92:	f023 0304 	bic.w	r3, r3, #4
 8002a96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d015      	beq.n	8002acc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7fe fad2 	bl	8001048 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa6:	e00a      	b.n	8002abe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa8:	f7fe face 	bl	8001048 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e0d7      	b.n	8002c6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002abe:	4b4b      	ldr	r3, [pc, #300]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0ee      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x368>
 8002aca:	e014      	b.n	8002af6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002acc:	f7fe fabc 	bl	8001048 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad2:	e00a      	b.n	8002aea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad4:	f7fe fab8 	bl	8001048 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e0c1      	b.n	8002c6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aea:	4b40      	ldr	r3, [pc, #256]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1ee      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002af6:	7dfb      	ldrb	r3, [r7, #23]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d105      	bne.n	8002b08 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002afc:	4b3b      	ldr	r3, [pc, #236]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	4a3a      	ldr	r2, [pc, #232]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 8002b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 80ad 	beq.w	8002c6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b12:	4b36      	ldr	r3, [pc, #216]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d060      	beq.n	8002be0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d145      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b26:	4b33      	ldr	r3, [pc, #204]	; (8002bf4 <HAL_RCC_OscConfig+0x4b4>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fa8c 	bl	8001048 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b34:	f7fe fa88 	bl	8001048 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e093      	b.n	8002c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b46:	4b29      	ldr	r3, [pc, #164]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69da      	ldr	r2, [r3, #28]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	019b      	lsls	r3, r3, #6
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	085b      	lsrs	r3, r3, #1
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	041b      	lsls	r3, r3, #16
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	061b      	lsls	r3, r3, #24
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	071b      	lsls	r3, r3, #28
 8002b7e:	491b      	ldr	r1, [pc, #108]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b84:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <HAL_RCC_OscConfig+0x4b4>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8a:	f7fe fa5d 	bl	8001048 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b92:	f7fe fa59 	bl	8001048 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e064      	b.n	8002c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba4:	4b11      	ldr	r3, [pc, #68]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x452>
 8002bb0:	e05c      	b.n	8002c6c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb2:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <HAL_RCC_OscConfig+0x4b4>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fa46 	bl	8001048 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc0:	f7fe fa42 	bl	8001048 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e04d      	b.n	8002c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd2:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_RCC_OscConfig+0x4ac>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x480>
 8002bde:	e045      	b.n	8002c6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d107      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e040      	b.n	8002c6e <HAL_RCC_OscConfig+0x52e>
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40007000 	.word	0x40007000
 8002bf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bf8:	4b1f      	ldr	r3, [pc, #124]	; (8002c78 <HAL_RCC_OscConfig+0x538>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d030      	beq.n	8002c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d129      	bne.n	8002c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d122      	bne.n	8002c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c28:	4013      	ands	r3, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d119      	bne.n	8002c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	085b      	lsrs	r3, r3, #1
 8002c40:	3b01      	subs	r3, #1
 8002c42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d10f      	bne.n	8002c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d107      	bne.n	8002c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800

08002c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e041      	b.n	8002d12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fd ff02 	bl	8000aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	f000 fa96 	bl	80031ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d001      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e04e      	b.n	8002dd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a23      	ldr	r2, [pc, #140]	; (8002de0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d022      	beq.n	8002d9c <HAL_TIM_Base_Start_IT+0x80>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5e:	d01d      	beq.n	8002d9c <HAL_TIM_Base_Start_IT+0x80>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a1f      	ldr	r2, [pc, #124]	; (8002de4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d018      	beq.n	8002d9c <HAL_TIM_Base_Start_IT+0x80>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a1e      	ldr	r2, [pc, #120]	; (8002de8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d013      	beq.n	8002d9c <HAL_TIM_Base_Start_IT+0x80>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <HAL_TIM_Base_Start_IT+0xd0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00e      	beq.n	8002d9c <HAL_TIM_Base_Start_IT+0x80>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a1b      	ldr	r2, [pc, #108]	; (8002df0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d009      	beq.n	8002d9c <HAL_TIM_Base_Start_IT+0x80>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d004      	beq.n	8002d9c <HAL_TIM_Base_Start_IT+0x80>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a18      	ldr	r2, [pc, #96]	; (8002df8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d111      	bne.n	8002dc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2b06      	cmp	r3, #6
 8002dac:	d010      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0201 	orr.w	r2, r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dbe:	e007      	b.n	8002dd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40010000 	.word	0x40010000
 8002de4:	40000400 	.word	0x40000400
 8002de8:	40000800 	.word	0x40000800
 8002dec:	40000c00 	.word	0x40000c00
 8002df0:	40010400 	.word	0x40010400
 8002df4:	40014000 	.word	0x40014000
 8002df8:	40001800 	.word	0x40001800

08002dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d122      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d11b      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0202 	mvn.w	r2, #2
 8002e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f9b5 	bl	80031ae <HAL_TIM_IC_CaptureCallback>
 8002e44:	e005      	b.n	8002e52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f9a7 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f9b8 	bl	80031c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d122      	bne.n	8002eac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d11b      	bne.n	8002eac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0204 	mvn.w	r2, #4
 8002e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f98b 	bl	80031ae <HAL_TIM_IC_CaptureCallback>
 8002e98:	e005      	b.n	8002ea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f97d 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f98e 	bl	80031c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d122      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d11b      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0208 	mvn.w	r2, #8
 8002ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f961 	bl	80031ae <HAL_TIM_IC_CaptureCallback>
 8002eec:	e005      	b.n	8002efa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f953 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f964 	bl	80031c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d122      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d11b      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0210 	mvn.w	r2, #16
 8002f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2208      	movs	r2, #8
 8002f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f937 	bl	80031ae <HAL_TIM_IC_CaptureCallback>
 8002f40:	e005      	b.n	8002f4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f929 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f93a 	bl	80031c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d10e      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d107      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0201 	mvn.w	r2, #1
 8002f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7fd fd46 	bl	8000a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	2b80      	cmp	r3, #128	; 0x80
 8002f8c:	d10e      	bne.n	8002fac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f98:	2b80      	cmp	r3, #128	; 0x80
 8002f9a:	d107      	bne.n	8002fac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fae0 	bl	800356c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb6:	2b40      	cmp	r3, #64	; 0x40
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc4:	2b40      	cmp	r3, #64	; 0x40
 8002fc6:	d107      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f8ff 	bl	80031d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0320 	and.w	r3, r3, #32
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d10e      	bne.n	8003004 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d107      	bne.n	8003004 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0220 	mvn.w	r2, #32
 8002ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 faaa 	bl	8003558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003004:	bf00      	nop
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_TIM_ConfigClockSource+0x1c>
 8003024:	2302      	movs	r3, #2
 8003026:	e0b4      	b.n	8003192 <HAL_TIM_ConfigClockSource+0x186>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800304e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003060:	d03e      	beq.n	80030e0 <HAL_TIM_ConfigClockSource+0xd4>
 8003062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003066:	f200 8087 	bhi.w	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 800306a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306e:	f000 8086 	beq.w	800317e <HAL_TIM_ConfigClockSource+0x172>
 8003072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003076:	d87f      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 8003078:	2b70      	cmp	r3, #112	; 0x70
 800307a:	d01a      	beq.n	80030b2 <HAL_TIM_ConfigClockSource+0xa6>
 800307c:	2b70      	cmp	r3, #112	; 0x70
 800307e:	d87b      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 8003080:	2b60      	cmp	r3, #96	; 0x60
 8003082:	d050      	beq.n	8003126 <HAL_TIM_ConfigClockSource+0x11a>
 8003084:	2b60      	cmp	r3, #96	; 0x60
 8003086:	d877      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 8003088:	2b50      	cmp	r3, #80	; 0x50
 800308a:	d03c      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0xfa>
 800308c:	2b50      	cmp	r3, #80	; 0x50
 800308e:	d873      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 8003090:	2b40      	cmp	r3, #64	; 0x40
 8003092:	d058      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0x13a>
 8003094:	2b40      	cmp	r3, #64	; 0x40
 8003096:	d86f      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 8003098:	2b30      	cmp	r3, #48	; 0x30
 800309a:	d064      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x15a>
 800309c:	2b30      	cmp	r3, #48	; 0x30
 800309e:	d86b      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d060      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x15a>
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d867      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d05c      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x15a>
 80030ac:	2b10      	cmp	r3, #16
 80030ae:	d05a      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x15a>
 80030b0:	e062      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	6899      	ldr	r1, [r3, #8]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f000 f9ad 	bl	8003420 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	609a      	str	r2, [r3, #8]
      break;
 80030de:	e04f      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	6899      	ldr	r1, [r3, #8]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f000 f996 	bl	8003420 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003102:	609a      	str	r2, [r3, #8]
      break;
 8003104:	e03c      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	6859      	ldr	r1, [r3, #4]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	461a      	mov	r2, r3
 8003114:	f000 f90a 	bl	800332c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2150      	movs	r1, #80	; 0x50
 800311e:	4618      	mov	r0, r3
 8003120:	f000 f963 	bl	80033ea <TIM_ITRx_SetConfig>
      break;
 8003124:	e02c      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6859      	ldr	r1, [r3, #4]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	461a      	mov	r2, r3
 8003134:	f000 f929 	bl	800338a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2160      	movs	r1, #96	; 0x60
 800313e:	4618      	mov	r0, r3
 8003140:	f000 f953 	bl	80033ea <TIM_ITRx_SetConfig>
      break;
 8003144:	e01c      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6859      	ldr	r1, [r3, #4]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	461a      	mov	r2, r3
 8003154:	f000 f8ea 	bl	800332c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2140      	movs	r1, #64	; 0x40
 800315e:	4618      	mov	r0, r3
 8003160:	f000 f943 	bl	80033ea <TIM_ITRx_SetConfig>
      break;
 8003164:	e00c      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4619      	mov	r1, r3
 8003170:	4610      	mov	r0, r2
 8003172:	f000 f93a 	bl	80033ea <TIM_ITRx_SetConfig>
      break;
 8003176:	e003      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
      break;
 800317c:	e000      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800317e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003190:	7bfb      	ldrb	r3, [r7, #15]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a40      	ldr	r2, [pc, #256]	; (8003300 <TIM_Base_SetConfig+0x114>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d013      	beq.n	800322c <TIM_Base_SetConfig+0x40>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320a:	d00f      	beq.n	800322c <TIM_Base_SetConfig+0x40>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a3d      	ldr	r2, [pc, #244]	; (8003304 <TIM_Base_SetConfig+0x118>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00b      	beq.n	800322c <TIM_Base_SetConfig+0x40>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a3c      	ldr	r2, [pc, #240]	; (8003308 <TIM_Base_SetConfig+0x11c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d007      	beq.n	800322c <TIM_Base_SetConfig+0x40>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a3b      	ldr	r2, [pc, #236]	; (800330c <TIM_Base_SetConfig+0x120>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d003      	beq.n	800322c <TIM_Base_SetConfig+0x40>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a3a      	ldr	r2, [pc, #232]	; (8003310 <TIM_Base_SetConfig+0x124>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d108      	bne.n	800323e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a2f      	ldr	r2, [pc, #188]	; (8003300 <TIM_Base_SetConfig+0x114>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d02b      	beq.n	800329e <TIM_Base_SetConfig+0xb2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324c:	d027      	beq.n	800329e <TIM_Base_SetConfig+0xb2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a2c      	ldr	r2, [pc, #176]	; (8003304 <TIM_Base_SetConfig+0x118>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d023      	beq.n	800329e <TIM_Base_SetConfig+0xb2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a2b      	ldr	r2, [pc, #172]	; (8003308 <TIM_Base_SetConfig+0x11c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d01f      	beq.n	800329e <TIM_Base_SetConfig+0xb2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a2a      	ldr	r2, [pc, #168]	; (800330c <TIM_Base_SetConfig+0x120>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d01b      	beq.n	800329e <TIM_Base_SetConfig+0xb2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a29      	ldr	r2, [pc, #164]	; (8003310 <TIM_Base_SetConfig+0x124>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d017      	beq.n	800329e <TIM_Base_SetConfig+0xb2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a28      	ldr	r2, [pc, #160]	; (8003314 <TIM_Base_SetConfig+0x128>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d013      	beq.n	800329e <TIM_Base_SetConfig+0xb2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a27      	ldr	r2, [pc, #156]	; (8003318 <TIM_Base_SetConfig+0x12c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00f      	beq.n	800329e <TIM_Base_SetConfig+0xb2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a26      	ldr	r2, [pc, #152]	; (800331c <TIM_Base_SetConfig+0x130>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00b      	beq.n	800329e <TIM_Base_SetConfig+0xb2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a25      	ldr	r2, [pc, #148]	; (8003320 <TIM_Base_SetConfig+0x134>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d007      	beq.n	800329e <TIM_Base_SetConfig+0xb2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a24      	ldr	r2, [pc, #144]	; (8003324 <TIM_Base_SetConfig+0x138>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d003      	beq.n	800329e <TIM_Base_SetConfig+0xb2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a23      	ldr	r2, [pc, #140]	; (8003328 <TIM_Base_SetConfig+0x13c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d108      	bne.n	80032b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <TIM_Base_SetConfig+0x114>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d003      	beq.n	80032e4 <TIM_Base_SetConfig+0xf8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a0c      	ldr	r2, [pc, #48]	; (8003310 <TIM_Base_SetConfig+0x124>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d103      	bne.n	80032ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	615a      	str	r2, [r3, #20]
}
 80032f2:	bf00      	nop
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40010000 	.word	0x40010000
 8003304:	40000400 	.word	0x40000400
 8003308:	40000800 	.word	0x40000800
 800330c:	40000c00 	.word	0x40000c00
 8003310:	40010400 	.word	0x40010400
 8003314:	40014000 	.word	0x40014000
 8003318:	40014400 	.word	0x40014400
 800331c:	40014800 	.word	0x40014800
 8003320:	40001800 	.word	0x40001800
 8003324:	40001c00 	.word	0x40001c00
 8003328:	40002000 	.word	0x40002000

0800332c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	f023 0201 	bic.w	r2, r3, #1
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f023 030a 	bic.w	r3, r3, #10
 8003368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4313      	orrs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	621a      	str	r2, [r3, #32]
}
 800337e:	bf00      	nop
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800338a:	b480      	push	{r7}
 800338c:	b087      	sub	sp, #28
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	f023 0210 	bic.w	r2, r3, #16
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	031b      	lsls	r3, r3, #12
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	621a      	str	r2, [r3, #32]
}
 80033de:	bf00      	nop
 80033e0:	371c      	adds	r7, #28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b085      	sub	sp, #20
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003400:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	f043 0307 	orr.w	r3, r3, #7
 800340c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	609a      	str	r2, [r3, #8]
}
 8003414:	bf00      	nop
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800343a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	021a      	lsls	r2, r3, #8
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	431a      	orrs	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4313      	orrs	r3, r2
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	609a      	str	r2, [r3, #8]
}
 8003454:	bf00      	nop
 8003456:	371c      	adds	r7, #28
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003474:	2302      	movs	r3, #2
 8003476:	e05a      	b.n	800352e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a21      	ldr	r2, [pc, #132]	; (800353c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d022      	beq.n	8003502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c4:	d01d      	beq.n	8003502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1d      	ldr	r2, [pc, #116]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d018      	beq.n	8003502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1b      	ldr	r2, [pc, #108]	; (8003544 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1a      	ldr	r2, [pc, #104]	; (8003548 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00e      	beq.n	8003502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a18      	ldr	r2, [pc, #96]	; (800354c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d009      	beq.n	8003502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a17      	ldr	r2, [pc, #92]	; (8003550 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a15      	ldr	r2, [pc, #84]	; (8003554 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d10c      	bne.n	800351c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003508:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	4313      	orrs	r3, r2
 8003512:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40010000 	.word	0x40010000
 8003540:	40000400 	.word	0x40000400
 8003544:	40000800 	.word	0x40000800
 8003548:	40000c00 	.word	0x40000c00
 800354c:	40010400 	.word	0x40010400
 8003550:	40014000 	.word	0x40014000
 8003554:	40001800 	.word	0x40001800

08003558 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e03f      	b.n	8003612 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fd faa6 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2224      	movs	r2, #36	; 0x24
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 fe43 	bl	8004250 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695a      	ldr	r2, [r3, #20]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b08a      	sub	sp, #40	; 0x28
 800361e:	af02      	add	r7, sp, #8
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	4613      	mov	r3, r2
 8003628:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b20      	cmp	r3, #32
 8003638:	d17c      	bne.n	8003734 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HAL_UART_Transmit+0x2c>
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e075      	b.n	8003736 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_UART_Transmit+0x3e>
 8003654:	2302      	movs	r3, #2
 8003656:	e06e      	b.n	8003736 <HAL_UART_Transmit+0x11c>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2221      	movs	r2, #33	; 0x21
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800366e:	f7fd fceb 	bl	8001048 <HAL_GetTick>
 8003672:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	88fa      	ldrh	r2, [r7, #6]
 8003678:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	88fa      	ldrh	r2, [r7, #6]
 800367e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003688:	d108      	bne.n	800369c <HAL_UART_Transmit+0x82>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d104      	bne.n	800369c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	e003      	b.n	80036a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036ac:	e02a      	b.n	8003704 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2200      	movs	r2, #0
 80036b6:	2180      	movs	r1, #128	; 0x80
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 fb83 	bl	8003dc4 <UART_WaitOnFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e036      	b.n	8003736 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10b      	bne.n	80036e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	3302      	adds	r3, #2
 80036e2:	61bb      	str	r3, [r7, #24]
 80036e4:	e007      	b.n	80036f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	781a      	ldrb	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	3301      	adds	r3, #1
 80036f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1cf      	bne.n	80036ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2200      	movs	r2, #0
 8003716:	2140      	movs	r1, #64	; 0x40
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 fb53 	bl	8003dc4 <UART_WaitOnFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e006      	b.n	8003736 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	e000      	b.n	8003736 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003734:	2302      	movs	r3, #2
  }
}
 8003736:	4618      	mov	r0, r3
 8003738:	3720      	adds	r7, #32
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800373e:	b480      	push	{r7}
 8003740:	b085      	sub	sp, #20
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	4613      	mov	r3, r2
 800374a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b20      	cmp	r3, #32
 8003756:	d130      	bne.n	80037ba <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <HAL_UART_Transmit_IT+0x26>
 800375e:	88fb      	ldrh	r3, [r7, #6]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e029      	b.n	80037bc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_UART_Transmit_IT+0x38>
 8003772:	2302      	movs	r3, #2
 8003774:	e022      	b.n	80037bc <HAL_UART_Transmit_IT+0x7e>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	88fa      	ldrh	r2, [r7, #6]
 8003788:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	88fa      	ldrh	r2, [r7, #6]
 800378e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2221      	movs	r2, #33	; 0x21
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037b4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e000      	b.n	80037bc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80037ba:	2302      	movs	r3, #2
  }
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08c      	sub	sp, #48	; 0x30
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	4613      	mov	r3, r2
 80037d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b20      	cmp	r3, #32
 80037e0:	d152      	bne.n	8003888 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e04b      	b.n	800388a <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e044      	b.n	800388a <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2201      	movs	r2, #1
 800380c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	461a      	mov	r2, r3
 8003812:	68b9      	ldr	r1, [r7, #8]
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 fb43 	bl	8003ea0 <UART_Start_Receive_IT>
 800381a:	4603      	mov	r3, r0
 800381c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003820:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003824:	2b00      	cmp	r3, #0
 8003826:	d12c      	bne.n	8003882 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	2b01      	cmp	r3, #1
 800382e:	d125      	bne.n	800387c <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003830:	2300      	movs	r3, #0
 8003832:	613b      	str	r3, [r7, #16]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	613b      	str	r3, [r7, #16]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	613b      	str	r3, [r7, #16]
 8003844:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	330c      	adds	r3, #12
 800384c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	e853 3f00 	ldrex	r3, [r3]
 8003854:	617b      	str	r3, [r7, #20]
   return(result);
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f043 0310 	orr.w	r3, r3, #16
 800385c:	62bb      	str	r3, [r7, #40]	; 0x28
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	330c      	adds	r3, #12
 8003864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003866:	627a      	str	r2, [r7, #36]	; 0x24
 8003868:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386a:	6a39      	ldr	r1, [r7, #32]
 800386c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386e:	e841 2300 	strex	r3, r2, [r1]
 8003872:	61fb      	str	r3, [r7, #28]
   return(result);
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1e5      	bne.n	8003846 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 800387a:	e002      	b.n	8003882 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003886:	e000      	b.n	800388a <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003888:	2302      	movs	r3, #2
  }
}
 800388a:	4618      	mov	r0, r3
 800388c:	3730      	adds	r7, #48	; 0x30
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b0ba      	sub	sp, #232	; 0xe8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80038d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10f      	bne.n	80038fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d009      	beq.n	80038fa <HAL_UART_IRQHandler+0x66>
 80038e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fbf1 	bl	80040da <UART_Receive_IT>
      return;
 80038f8:	e256      	b.n	8003da8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80de 	beq.w	8003ac0 <HAL_UART_IRQHandler+0x22c>
 8003904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d106      	bne.n	800391e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003914:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80d1 	beq.w	8003ac0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800391e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00b      	beq.n	8003942 <HAL_UART_IRQHandler+0xae>
 800392a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800392e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	f043 0201 	orr.w	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00b      	beq.n	8003966 <HAL_UART_IRQHandler+0xd2>
 800394e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d005      	beq.n	8003966 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f043 0202 	orr.w	r2, r3, #2
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00b      	beq.n	800398a <HAL_UART_IRQHandler+0xf6>
 8003972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d005      	beq.n	800398a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f043 0204 	orr.w	r2, r3, #4
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800398a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d011      	beq.n	80039ba <HAL_UART_IRQHandler+0x126>
 8003996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d105      	bne.n	80039ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f043 0208 	orr.w	r2, r3, #8
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 81ed 	beq.w	8003d9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_UART_IRQHandler+0x14e>
 80039d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fb7c 	bl	80040da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ec:	2b40      	cmp	r3, #64	; 0x40
 80039ee:	bf0c      	ite	eq
 80039f0:	2301      	moveq	r3, #1
 80039f2:	2300      	movne	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d103      	bne.n	8003a0e <HAL_UART_IRQHandler+0x17a>
 8003a06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d04f      	beq.n	8003aae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fa84 	bl	8003f1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1e:	2b40      	cmp	r3, #64	; 0x40
 8003a20:	d141      	bne.n	8003aa6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3314      	adds	r3, #20
 8003a28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a30:	e853 3f00 	ldrex	r3, [r3]
 8003a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3314      	adds	r3, #20
 8003a4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a5e:	e841 2300 	strex	r3, r2, [r1]
 8003a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1d9      	bne.n	8003a22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d013      	beq.n	8003a9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	4a7d      	ldr	r2, [pc, #500]	; (8003c70 <HAL_UART_IRQHandler+0x3dc>)
 8003a7c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fd fc62 	bl	800134c <HAL_DMA_Abort_IT>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d016      	beq.n	8003abc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a98:	4610      	mov	r0, r2
 8003a9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9c:	e00e      	b.n	8003abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f003 feee 	bl	8007880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa4:	e00a      	b.n	8003abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f003 feea 	bl	8007880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aac:	e006      	b.n	8003abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f003 fee6 	bl	8007880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003aba:	e170      	b.n	8003d9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003abc:	bf00      	nop
    return;
 8003abe:	e16e      	b.n	8003d9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	f040 814a 	bne.w	8003d5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 8143 	beq.w	8003d5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 813c 	beq.w	8003d5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	60bb      	str	r3, [r7, #8]
 8003afa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b06:	2b40      	cmp	r3, #64	; 0x40
 8003b08:	f040 80b4 	bne.w	8003c74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 8140 	beq.w	8003da2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	f080 8139 	bcs.w	8003da2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b36:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b42:	f000 8088 	beq.w	8003c56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	330c      	adds	r3, #12
 8003b4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b54:	e853 3f00 	ldrex	r3, [r3]
 8003b58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	330c      	adds	r3, #12
 8003b6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1d9      	bne.n	8003b46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3314      	adds	r3, #20
 8003b98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ba4:	f023 0301 	bic.w	r3, r3, #1
 8003ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3314      	adds	r3, #20
 8003bb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003bba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003bbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bc2:	e841 2300 	strex	r3, r2, [r1]
 8003bc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1e1      	bne.n	8003b92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3314      	adds	r3, #20
 8003bd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bd8:	e853 3f00 	ldrex	r3, [r3]
 8003bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003be4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3314      	adds	r3, #20
 8003bee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003bf2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bf4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003bf8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e3      	bne.n	8003bce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	330c      	adds	r3, #12
 8003c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c1e:	e853 3f00 	ldrex	r3, [r3]
 8003c22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c26:	f023 0310 	bic.w	r3, r3, #16
 8003c2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	330c      	adds	r3, #12
 8003c34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c38:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e3      	bne.n	8003c14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fd fb0b 	bl	800126c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	4619      	mov	r1, r3
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f003 fe15 	bl	8007896 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c6c:	e099      	b.n	8003da2 <HAL_UART_IRQHandler+0x50e>
 8003c6e:	bf00      	nop
 8003c70:	08003fe3 	.word	0x08003fe3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 808b 	beq.w	8003da6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003c90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 8086 	beq.w	8003da6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	330c      	adds	r3, #12
 8003ca0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	330c      	adds	r3, #12
 8003cba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003cbe:	647a      	str	r2, [r7, #68]	; 0x44
 8003cc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cc6:	e841 2300 	strex	r3, r2, [r1]
 8003cca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1e3      	bne.n	8003c9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3314      	adds	r3, #20
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	e853 3f00 	ldrex	r3, [r3]
 8003ce0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3314      	adds	r3, #20
 8003cf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003cf6:	633a      	str	r2, [r7, #48]	; 0x30
 8003cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1e3      	bne.n	8003cd2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	330c      	adds	r3, #12
 8003d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	e853 3f00 	ldrex	r3, [r3]
 8003d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0310 	bic.w	r3, r3, #16
 8003d2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	330c      	adds	r3, #12
 8003d38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d3c:	61fa      	str	r2, [r7, #28]
 8003d3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	69b9      	ldr	r1, [r7, #24]
 8003d42:	69fa      	ldr	r2, [r7, #28]
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	617b      	str	r3, [r7, #20]
   return(result);
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e3      	bne.n	8003d18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d54:	4619      	mov	r1, r3
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f003 fd9d 	bl	8007896 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d5c:	e023      	b.n	8003da6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d009      	beq.n	8003d7e <HAL_UART_IRQHandler+0x4ea>
 8003d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f947 	bl	800400a <UART_Transmit_IT>
    return;
 8003d7c:	e014      	b.n	8003da8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00e      	beq.n	8003da8 <HAL_UART_IRQHandler+0x514>
 8003d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d008      	beq.n	8003da8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f987 	bl	80040aa <UART_EndTransmit_IT>
    return;
 8003d9c:	e004      	b.n	8003da8 <HAL_UART_IRQHandler+0x514>
    return;
 8003d9e:	bf00      	nop
 8003da0:	e002      	b.n	8003da8 <HAL_UART_IRQHandler+0x514>
      return;
 8003da2:	bf00      	nop
 8003da4:	e000      	b.n	8003da8 <HAL_UART_IRQHandler+0x514>
      return;
 8003da6:	bf00      	nop
  }
}
 8003da8:	37e8      	adds	r7, #232	; 0xe8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop

08003db0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b090      	sub	sp, #64	; 0x40
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	603b      	str	r3, [r7, #0]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd4:	e050      	b.n	8003e78 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ddc:	d04c      	beq.n	8003e78 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d007      	beq.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003de4:	f7fd f930 	bl	8001048 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d241      	bcs.n	8003e78 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	330c      	adds	r3, #12
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfe:	e853 3f00 	ldrex	r3, [r3]
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	330c      	adds	r3, #12
 8003e12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e14:	637a      	str	r2, [r7, #52]	; 0x34
 8003e16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e1c:	e841 2300 	strex	r3, r2, [r1]
 8003e20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1e5      	bne.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3314      	adds	r3, #20
 8003e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	613b      	str	r3, [r7, #16]
   return(result);
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f023 0301 	bic.w	r3, r3, #1
 8003e3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3314      	adds	r3, #20
 8003e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e48:	623a      	str	r2, [r7, #32]
 8003e4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	69f9      	ldr	r1, [r7, #28]
 8003e4e:	6a3a      	ldr	r2, [r7, #32]
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e5      	bne.n	8003e28 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e00f      	b.n	8003e98 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	4013      	ands	r3, r2
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	bf0c      	ite	eq
 8003e88:	2301      	moveq	r3, #1
 8003e8a:	2300      	movne	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	461a      	mov	r2, r3
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d09f      	beq.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3740      	adds	r7, #64	; 0x40
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	88fa      	ldrh	r2, [r7, #6]
 8003eb8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	88fa      	ldrh	r2, [r7, #6]
 8003ebe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2222      	movs	r2, #34	; 0x22
 8003eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d007      	beq.n	8003eee <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695a      	ldr	r2, [r3, #20]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0201 	orr.w	r2, r2, #1
 8003efc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 0220 	orr.w	r2, r2, #32
 8003f0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b095      	sub	sp, #84	; 0x54
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	330c      	adds	r3, #12
 8003f42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f44:	643a      	str	r2, [r7, #64]	; 0x40
 8003f46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e5      	bne.n	8003f24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3314      	adds	r3, #20
 8003f5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3314      	adds	r3, #20
 8003f76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e5      	bne.n	8003f58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d119      	bne.n	8003fc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	330c      	adds	r3, #12
 8003f9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	e853 3f00 	ldrex	r3, [r3]
 8003fa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f023 0310 	bic.w	r3, r3, #16
 8003faa:	647b      	str	r3, [r7, #68]	; 0x44
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	330c      	adds	r3, #12
 8003fb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fb4:	61ba      	str	r2, [r7, #24]
 8003fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb8:	6979      	ldr	r1, [r7, #20]
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	e841 2300 	strex	r3, r2, [r1]
 8003fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1e5      	bne.n	8003f94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003fd6:	bf00      	nop
 8003fd8:	3754      	adds	r7, #84	; 0x54
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f003 fc3f 	bl	8007880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800400a:	b480      	push	{r7}
 800400c:	b085      	sub	sp, #20
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b21      	cmp	r3, #33	; 0x21
 800401c:	d13e      	bne.n	800409c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004026:	d114      	bne.n	8004052 <UART_Transmit_IT+0x48>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d110      	bne.n	8004052 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004044:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	1c9a      	adds	r2, r3, #2
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	621a      	str	r2, [r3, #32]
 8004050:	e008      	b.n	8004064 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	1c59      	adds	r1, r3, #1
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6211      	str	r1, [r2, #32]
 800405c:	781a      	ldrb	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29b      	uxth	r3, r3
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	4619      	mov	r1, r3
 8004072:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10f      	bne.n	8004098 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004086:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004096:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004098:	2300      	movs	r3, #0
 800409a:	e000      	b.n	800409e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800409c:	2302      	movs	r3, #2
  }
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b082      	sub	sp, #8
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f003 fbf2 	bl	80078b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b08c      	sub	sp, #48	; 0x30
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b22      	cmp	r3, #34	; 0x22
 80040ec:	f040 80ab 	bne.w	8004246 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f8:	d117      	bne.n	800412a <UART_Receive_IT+0x50>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d113      	bne.n	800412a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004102:	2300      	movs	r3, #0
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	b29b      	uxth	r3, r3
 8004114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004118:	b29a      	uxth	r2, r3
 800411a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004122:	1c9a      	adds	r2, r3, #2
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	629a      	str	r2, [r3, #40]	; 0x28
 8004128:	e026      	b.n	8004178 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004130:	2300      	movs	r3, #0
 8004132:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413c:	d007      	beq.n	800414e <UART_Receive_IT+0x74>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10a      	bne.n	800415c <UART_Receive_IT+0x82>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	b2da      	uxtb	r2, r3
 8004156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	e008      	b.n	800416e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004168:	b2da      	uxtb	r2, r3
 800416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29b      	uxth	r3, r3
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	4619      	mov	r1, r3
 8004186:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004188:	2b00      	cmp	r3, #0
 800418a:	d15a      	bne.n	8004242 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0220 	bic.w	r2, r2, #32
 800419a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695a      	ldr	r2, [r3, #20]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0201 	bic.w	r2, r2, #1
 80041ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d135      	bne.n	8004238 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	330c      	adds	r3, #12
 80041d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	613b      	str	r3, [r7, #16]
   return(result);
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f023 0310 	bic.w	r3, r3, #16
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	330c      	adds	r3, #12
 80041f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f2:	623a      	str	r2, [r7, #32]
 80041f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	69f9      	ldr	r1, [r7, #28]
 80041f8:	6a3a      	ldr	r2, [r7, #32]
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e5      	bne.n	80041d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b10      	cmp	r3, #16
 8004212:	d10a      	bne.n	800422a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004214:	2300      	movs	r3, #0
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800422e:	4619      	mov	r1, r3
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f003 fb30 	bl	8007896 <HAL_UARTEx_RxEventCallback>
 8004236:	e002      	b.n	800423e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff fdb9 	bl	8003db0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	e002      	b.n	8004248 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	e000      	b.n	8004248 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004246:	2302      	movs	r3, #2
  }
}
 8004248:	4618      	mov	r0, r3
 800424a:	3730      	adds	r7, #48	; 0x30
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004254:	b0c0      	sub	sp, #256	; 0x100
 8004256:	af00      	add	r7, sp, #0
 8004258:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800425c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426c:	68d9      	ldr	r1, [r3, #12]
 800426e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	ea40 0301 	orr.w	r3, r0, r1
 8004278:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800427a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	431a      	orrs	r2, r3
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	431a      	orrs	r2, r3
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042a8:	f021 010c 	bic.w	r1, r1, #12
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042b6:	430b      	orrs	r3, r1
 80042b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ca:	6999      	ldr	r1, [r3, #24]
 80042cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	ea40 0301 	orr.w	r3, r0, r1
 80042d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	4b8f      	ldr	r3, [pc, #572]	; (800451c <UART_SetConfig+0x2cc>)
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d005      	beq.n	80042f0 <UART_SetConfig+0xa0>
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	4b8d      	ldr	r3, [pc, #564]	; (8004520 <UART_SetConfig+0x2d0>)
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d104      	bne.n	80042fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042f0:	f7fd fc86 	bl	8001c00 <HAL_RCC_GetPCLK2Freq>
 80042f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80042f8:	e003      	b.n	8004302 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042fa:	f7fd fc6d 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 80042fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430c:	f040 810c 	bne.w	8004528 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004314:	2200      	movs	r2, #0
 8004316:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800431a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800431e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004322:	4622      	mov	r2, r4
 8004324:	462b      	mov	r3, r5
 8004326:	1891      	adds	r1, r2, r2
 8004328:	65b9      	str	r1, [r7, #88]	; 0x58
 800432a:	415b      	adcs	r3, r3
 800432c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800432e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004332:	4621      	mov	r1, r4
 8004334:	eb12 0801 	adds.w	r8, r2, r1
 8004338:	4629      	mov	r1, r5
 800433a:	eb43 0901 	adc.w	r9, r3, r1
 800433e:	f04f 0200 	mov.w	r2, #0
 8004342:	f04f 0300 	mov.w	r3, #0
 8004346:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800434a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800434e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004352:	4690      	mov	r8, r2
 8004354:	4699      	mov	r9, r3
 8004356:	4623      	mov	r3, r4
 8004358:	eb18 0303 	adds.w	r3, r8, r3
 800435c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004360:	462b      	mov	r3, r5
 8004362:	eb49 0303 	adc.w	r3, r9, r3
 8004366:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800436a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004376:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800437a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800437e:	460b      	mov	r3, r1
 8004380:	18db      	adds	r3, r3, r3
 8004382:	653b      	str	r3, [r7, #80]	; 0x50
 8004384:	4613      	mov	r3, r2
 8004386:	eb42 0303 	adc.w	r3, r2, r3
 800438a:	657b      	str	r3, [r7, #84]	; 0x54
 800438c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004390:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004394:	f7fb ff8c 	bl	80002b0 <__aeabi_uldivmod>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4b61      	ldr	r3, [pc, #388]	; (8004524 <UART_SetConfig+0x2d4>)
 800439e:	fba3 2302 	umull	r2, r3, r3, r2
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	011c      	lsls	r4, r3, #4
 80043a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043b8:	4642      	mov	r2, r8
 80043ba:	464b      	mov	r3, r9
 80043bc:	1891      	adds	r1, r2, r2
 80043be:	64b9      	str	r1, [r7, #72]	; 0x48
 80043c0:	415b      	adcs	r3, r3
 80043c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043c8:	4641      	mov	r1, r8
 80043ca:	eb12 0a01 	adds.w	sl, r2, r1
 80043ce:	4649      	mov	r1, r9
 80043d0:	eb43 0b01 	adc.w	fp, r3, r1
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043e8:	4692      	mov	sl, r2
 80043ea:	469b      	mov	fp, r3
 80043ec:	4643      	mov	r3, r8
 80043ee:	eb1a 0303 	adds.w	r3, sl, r3
 80043f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043f6:	464b      	mov	r3, r9
 80043f8:	eb4b 0303 	adc.w	r3, fp, r3
 80043fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800440c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004410:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004414:	460b      	mov	r3, r1
 8004416:	18db      	adds	r3, r3, r3
 8004418:	643b      	str	r3, [r7, #64]	; 0x40
 800441a:	4613      	mov	r3, r2
 800441c:	eb42 0303 	adc.w	r3, r2, r3
 8004420:	647b      	str	r3, [r7, #68]	; 0x44
 8004422:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004426:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800442a:	f7fb ff41 	bl	80002b0 <__aeabi_uldivmod>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4611      	mov	r1, r2
 8004434:	4b3b      	ldr	r3, [pc, #236]	; (8004524 <UART_SetConfig+0x2d4>)
 8004436:	fba3 2301 	umull	r2, r3, r3, r1
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	2264      	movs	r2, #100	; 0x64
 800443e:	fb02 f303 	mul.w	r3, r2, r3
 8004442:	1acb      	subs	r3, r1, r3
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800444a:	4b36      	ldr	r3, [pc, #216]	; (8004524 <UART_SetConfig+0x2d4>)
 800444c:	fba3 2302 	umull	r2, r3, r3, r2
 8004450:	095b      	lsrs	r3, r3, #5
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004458:	441c      	add	r4, r3
 800445a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800445e:	2200      	movs	r2, #0
 8004460:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004464:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004468:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800446c:	4642      	mov	r2, r8
 800446e:	464b      	mov	r3, r9
 8004470:	1891      	adds	r1, r2, r2
 8004472:	63b9      	str	r1, [r7, #56]	; 0x38
 8004474:	415b      	adcs	r3, r3
 8004476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004478:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800447c:	4641      	mov	r1, r8
 800447e:	1851      	adds	r1, r2, r1
 8004480:	6339      	str	r1, [r7, #48]	; 0x30
 8004482:	4649      	mov	r1, r9
 8004484:	414b      	adcs	r3, r1
 8004486:	637b      	str	r3, [r7, #52]	; 0x34
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004494:	4659      	mov	r1, fp
 8004496:	00cb      	lsls	r3, r1, #3
 8004498:	4651      	mov	r1, sl
 800449a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800449e:	4651      	mov	r1, sl
 80044a0:	00ca      	lsls	r2, r1, #3
 80044a2:	4610      	mov	r0, r2
 80044a4:	4619      	mov	r1, r3
 80044a6:	4603      	mov	r3, r0
 80044a8:	4642      	mov	r2, r8
 80044aa:	189b      	adds	r3, r3, r2
 80044ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044b0:	464b      	mov	r3, r9
 80044b2:	460a      	mov	r2, r1
 80044b4:	eb42 0303 	adc.w	r3, r2, r3
 80044b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044d0:	460b      	mov	r3, r1
 80044d2:	18db      	adds	r3, r3, r3
 80044d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80044d6:	4613      	mov	r3, r2
 80044d8:	eb42 0303 	adc.w	r3, r2, r3
 80044dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044e6:	f7fb fee3 	bl	80002b0 <__aeabi_uldivmod>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <UART_SetConfig+0x2d4>)
 80044f0:	fba3 1302 	umull	r1, r3, r3, r2
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	2164      	movs	r1, #100	; 0x64
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	3332      	adds	r3, #50	; 0x32
 8004502:	4a08      	ldr	r2, [pc, #32]	; (8004524 <UART_SetConfig+0x2d4>)
 8004504:	fba2 2303 	umull	r2, r3, r2, r3
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	f003 0207 	and.w	r2, r3, #7
 800450e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4422      	add	r2, r4
 8004516:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004518:	e106      	b.n	8004728 <UART_SetConfig+0x4d8>
 800451a:	bf00      	nop
 800451c:	40011000 	.word	0x40011000
 8004520:	40011400 	.word	0x40011400
 8004524:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800452c:	2200      	movs	r2, #0
 800452e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004532:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004536:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800453a:	4642      	mov	r2, r8
 800453c:	464b      	mov	r3, r9
 800453e:	1891      	adds	r1, r2, r2
 8004540:	6239      	str	r1, [r7, #32]
 8004542:	415b      	adcs	r3, r3
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
 8004546:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800454a:	4641      	mov	r1, r8
 800454c:	1854      	adds	r4, r2, r1
 800454e:	4649      	mov	r1, r9
 8004550:	eb43 0501 	adc.w	r5, r3, r1
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	00eb      	lsls	r3, r5, #3
 800455e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004562:	00e2      	lsls	r2, r4, #3
 8004564:	4614      	mov	r4, r2
 8004566:	461d      	mov	r5, r3
 8004568:	4643      	mov	r3, r8
 800456a:	18e3      	adds	r3, r4, r3
 800456c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004570:	464b      	mov	r3, r9
 8004572:	eb45 0303 	adc.w	r3, r5, r3
 8004576:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800457a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004586:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004596:	4629      	mov	r1, r5
 8004598:	008b      	lsls	r3, r1, #2
 800459a:	4621      	mov	r1, r4
 800459c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045a0:	4621      	mov	r1, r4
 80045a2:	008a      	lsls	r2, r1, #2
 80045a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045a8:	f7fb fe82 	bl	80002b0 <__aeabi_uldivmod>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4b60      	ldr	r3, [pc, #384]	; (8004734 <UART_SetConfig+0x4e4>)
 80045b2:	fba3 2302 	umull	r2, r3, r3, r2
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	011c      	lsls	r4, r3, #4
 80045ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045be:	2200      	movs	r2, #0
 80045c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045cc:	4642      	mov	r2, r8
 80045ce:	464b      	mov	r3, r9
 80045d0:	1891      	adds	r1, r2, r2
 80045d2:	61b9      	str	r1, [r7, #24]
 80045d4:	415b      	adcs	r3, r3
 80045d6:	61fb      	str	r3, [r7, #28]
 80045d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045dc:	4641      	mov	r1, r8
 80045de:	1851      	adds	r1, r2, r1
 80045e0:	6139      	str	r1, [r7, #16]
 80045e2:	4649      	mov	r1, r9
 80045e4:	414b      	adcs	r3, r1
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045f4:	4659      	mov	r1, fp
 80045f6:	00cb      	lsls	r3, r1, #3
 80045f8:	4651      	mov	r1, sl
 80045fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045fe:	4651      	mov	r1, sl
 8004600:	00ca      	lsls	r2, r1, #3
 8004602:	4610      	mov	r0, r2
 8004604:	4619      	mov	r1, r3
 8004606:	4603      	mov	r3, r0
 8004608:	4642      	mov	r2, r8
 800460a:	189b      	adds	r3, r3, r2
 800460c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004610:	464b      	mov	r3, r9
 8004612:	460a      	mov	r2, r1
 8004614:	eb42 0303 	adc.w	r3, r2, r3
 8004618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	67bb      	str	r3, [r7, #120]	; 0x78
 8004626:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004634:	4649      	mov	r1, r9
 8004636:	008b      	lsls	r3, r1, #2
 8004638:	4641      	mov	r1, r8
 800463a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800463e:	4641      	mov	r1, r8
 8004640:	008a      	lsls	r2, r1, #2
 8004642:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004646:	f7fb fe33 	bl	80002b0 <__aeabi_uldivmod>
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	4611      	mov	r1, r2
 8004650:	4b38      	ldr	r3, [pc, #224]	; (8004734 <UART_SetConfig+0x4e4>)
 8004652:	fba3 2301 	umull	r2, r3, r3, r1
 8004656:	095b      	lsrs	r3, r3, #5
 8004658:	2264      	movs	r2, #100	; 0x64
 800465a:	fb02 f303 	mul.w	r3, r2, r3
 800465e:	1acb      	subs	r3, r1, r3
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	3332      	adds	r3, #50	; 0x32
 8004664:	4a33      	ldr	r2, [pc, #204]	; (8004734 <UART_SetConfig+0x4e4>)
 8004666:	fba2 2303 	umull	r2, r3, r2, r3
 800466a:	095b      	lsrs	r3, r3, #5
 800466c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004670:	441c      	add	r4, r3
 8004672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004676:	2200      	movs	r2, #0
 8004678:	673b      	str	r3, [r7, #112]	; 0x70
 800467a:	677a      	str	r2, [r7, #116]	; 0x74
 800467c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004680:	4642      	mov	r2, r8
 8004682:	464b      	mov	r3, r9
 8004684:	1891      	adds	r1, r2, r2
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	415b      	adcs	r3, r3
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004690:	4641      	mov	r1, r8
 8004692:	1851      	adds	r1, r2, r1
 8004694:	6039      	str	r1, [r7, #0]
 8004696:	4649      	mov	r1, r9
 8004698:	414b      	adcs	r3, r1
 800469a:	607b      	str	r3, [r7, #4]
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046a8:	4659      	mov	r1, fp
 80046aa:	00cb      	lsls	r3, r1, #3
 80046ac:	4651      	mov	r1, sl
 80046ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046b2:	4651      	mov	r1, sl
 80046b4:	00ca      	lsls	r2, r1, #3
 80046b6:	4610      	mov	r0, r2
 80046b8:	4619      	mov	r1, r3
 80046ba:	4603      	mov	r3, r0
 80046bc:	4642      	mov	r2, r8
 80046be:	189b      	adds	r3, r3, r2
 80046c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80046c2:	464b      	mov	r3, r9
 80046c4:	460a      	mov	r2, r1
 80046c6:	eb42 0303 	adc.w	r3, r2, r3
 80046ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	663b      	str	r3, [r7, #96]	; 0x60
 80046d6:	667a      	str	r2, [r7, #100]	; 0x64
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80046e4:	4649      	mov	r1, r9
 80046e6:	008b      	lsls	r3, r1, #2
 80046e8:	4641      	mov	r1, r8
 80046ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ee:	4641      	mov	r1, r8
 80046f0:	008a      	lsls	r2, r1, #2
 80046f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80046f6:	f7fb fddb 	bl	80002b0 <__aeabi_uldivmod>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4b0d      	ldr	r3, [pc, #52]	; (8004734 <UART_SetConfig+0x4e4>)
 8004700:	fba3 1302 	umull	r1, r3, r3, r2
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	2164      	movs	r1, #100	; 0x64
 8004708:	fb01 f303 	mul.w	r3, r1, r3
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	3332      	adds	r3, #50	; 0x32
 8004712:	4a08      	ldr	r2, [pc, #32]	; (8004734 <UART_SetConfig+0x4e4>)
 8004714:	fba2 2303 	umull	r2, r3, r2, r3
 8004718:	095b      	lsrs	r3, r3, #5
 800471a:	f003 020f 	and.w	r2, r3, #15
 800471e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4422      	add	r2, r4
 8004726:	609a      	str	r2, [r3, #8]
}
 8004728:	bf00      	nop
 800472a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800472e:	46bd      	mov	sp, r7
 8004730:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004734:	51eb851f 	.word	0x51eb851f

08004738 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004738:	b084      	sub	sp, #16
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	f107 001c 	add.w	r0, r7, #28
 8004746:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	2b01      	cmp	r3, #1
 800474e:	d122      	bne.n	8004796 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004754:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477a:	2b01      	cmp	r3, #1
 800477c:	d105      	bne.n	800478a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fa9c 	bl	8004cc8 <USB_CoreReset>
 8004790:	4603      	mov	r3, r0
 8004792:	73fb      	strb	r3, [r7, #15]
 8004794:	e01a      	b.n	80047cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fa90 	bl	8004cc8 <USB_CoreReset>
 80047a8:	4603      	mov	r3, r0
 80047aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d106      	bne.n	80047c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	639a      	str	r2, [r3, #56]	; 0x38
 80047be:	e005      	b.n	80047cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d10b      	bne.n	80047ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f043 0206 	orr.w	r2, r3, #6
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f043 0220 	orr.w	r2, r3, #32
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047f6:	b004      	add	sp, #16
 80047f8:	4770      	bx	lr

080047fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f023 0201 	bic.w	r2, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d115      	bne.n	800486a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800484a:	2001      	movs	r0, #1
 800484c:	f7fc fc08 	bl	8001060 <HAL_Delay>
      ms++;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3301      	adds	r3, #1
 8004854:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 fa28 	bl	8004cac <USB_GetMode>
 800485c:	4603      	mov	r3, r0
 800485e:	2b01      	cmp	r3, #1
 8004860:	d01e      	beq.n	80048a0 <USB_SetCurrentMode+0x84>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b31      	cmp	r3, #49	; 0x31
 8004866:	d9f0      	bls.n	800484a <USB_SetCurrentMode+0x2e>
 8004868:	e01a      	b.n	80048a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800486a:	78fb      	ldrb	r3, [r7, #3]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d115      	bne.n	800489c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800487c:	2001      	movs	r0, #1
 800487e:	f7fc fbef 	bl	8001060 <HAL_Delay>
      ms++;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3301      	adds	r3, #1
 8004886:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 fa0f 	bl	8004cac <USB_GetMode>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <USB_SetCurrentMode+0x84>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2b31      	cmp	r3, #49	; 0x31
 8004898:	d9f0      	bls.n	800487c <USB_SetCurrentMode+0x60>
 800489a:	e001      	b.n	80048a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e005      	b.n	80048ac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b32      	cmp	r3, #50	; 0x32
 80048a4:	d101      	bne.n	80048aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048b4:	b084      	sub	sp, #16
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b086      	sub	sp, #24
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80048c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80048ce:	2300      	movs	r3, #0
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	e009      	b.n	80048e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	3340      	adds	r3, #64	; 0x40
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	2200      	movs	r2, #0
 80048e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	3301      	adds	r3, #1
 80048e6:	613b      	str	r3, [r7, #16]
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	2b0e      	cmp	r3, #14
 80048ec:	d9f2      	bls.n	80048d4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80048ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d11c      	bne.n	800492e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004902:	f043 0302 	orr.w	r3, r3, #2
 8004906:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	e005      	b.n	800493a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004940:	461a      	mov	r2, r3
 8004942:	2300      	movs	r3, #0
 8004944:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494c:	4619      	mov	r1, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004954:	461a      	mov	r2, r3
 8004956:	680b      	ldr	r3, [r1, #0]
 8004958:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495c:	2b01      	cmp	r3, #1
 800495e:	d10c      	bne.n	800497a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d104      	bne.n	8004970 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004966:	2100      	movs	r1, #0
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f965 	bl	8004c38 <USB_SetDevSpeed>
 800496e:	e008      	b.n	8004982 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004970:	2101      	movs	r1, #1
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f960 	bl	8004c38 <USB_SetDevSpeed>
 8004978:	e003      	b.n	8004982 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800497a:	2103      	movs	r1, #3
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f95b 	bl	8004c38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004982:	2110      	movs	r1, #16
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f8f3 	bl	8004b70 <USB_FlushTxFifo>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f91f 	bl	8004bd8 <USB_FlushRxFifo>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049aa:	461a      	mov	r2, r3
 80049ac:	2300      	movs	r3, #0
 80049ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b6:	461a      	mov	r2, r3
 80049b8:	2300      	movs	r3, #0
 80049ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c2:	461a      	mov	r2, r3
 80049c4:	2300      	movs	r3, #0
 80049c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049c8:	2300      	movs	r3, #0
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	e043      	b.n	8004a56 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049e4:	d118      	bne.n	8004a18 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f8:	461a      	mov	r2, r3
 80049fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049fe:	6013      	str	r3, [r2, #0]
 8004a00:	e013      	b.n	8004a2a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a14:	6013      	str	r3, [r2, #0]
 8004a16:	e008      	b.n	8004a2a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a24:	461a      	mov	r2, r3
 8004a26:	2300      	movs	r3, #0
 8004a28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a36:	461a      	mov	r2, r3
 8004a38:	2300      	movs	r3, #0
 8004a3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a48:	461a      	mov	r2, r3
 8004a4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	3301      	adds	r3, #1
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d3b7      	bcc.n	80049ce <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a5e:	2300      	movs	r3, #0
 8004a60:	613b      	str	r3, [r7, #16]
 8004a62:	e043      	b.n	8004aec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a7a:	d118      	bne.n	8004aae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10a      	bne.n	8004a98 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	e013      	b.n	8004ac0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	e008      	b.n	8004ac0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aba:	461a      	mov	r2, r3
 8004abc:	2300      	movs	r3, #0
 8004abe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004acc:	461a      	mov	r2, r3
 8004ace:	2300      	movs	r3, #0
 8004ad0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ae4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	613b      	str	r3, [r7, #16]
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d3b7      	bcc.n	8004a64 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b06:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b14:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d105      	bne.n	8004b28 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	f043 0210 	orr.w	r2, r3, #16
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699a      	ldr	r2, [r3, #24]
 8004b2c:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <USB_DevInit+0x2b8>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d005      	beq.n	8004b46 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	f043 0208 	orr.w	r2, r3, #8
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d107      	bne.n	8004b5c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b54:	f043 0304 	orr.w	r3, r3, #4
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b68:	b004      	add	sp, #16
 8004b6a:	4770      	bx	lr
 8004b6c:	803c3800 	.word	0x803c3800

08004b70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3301      	adds	r3, #1
 8004b82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4a13      	ldr	r2, [pc, #76]	; (8004bd4 <USB_FlushTxFifo+0x64>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d901      	bls.n	8004b90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e01b      	b.n	8004bc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	daf2      	bge.n	8004b7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	019b      	lsls	r3, r3, #6
 8004ba0:	f043 0220 	orr.w	r2, r3, #32
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3301      	adds	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4a08      	ldr	r2, [pc, #32]	; (8004bd4 <USB_FlushTxFifo+0x64>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d901      	bls.n	8004bba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e006      	b.n	8004bc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	d0f0      	beq.n	8004ba8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	00030d40 	.word	0x00030d40

08004bd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3301      	adds	r3, #1
 8004be8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4a11      	ldr	r2, [pc, #68]	; (8004c34 <USB_FlushRxFifo+0x5c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e018      	b.n	8004c28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	daf2      	bge.n	8004be4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2210      	movs	r2, #16
 8004c06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4a08      	ldr	r2, [pc, #32]	; (8004c34 <USB_FlushRxFifo+0x5c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d901      	bls.n	8004c1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e006      	b.n	8004c28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 0310 	and.w	r3, r3, #16
 8004c22:	2b10      	cmp	r3, #16
 8004c24:	d0f0      	beq.n	8004c08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	00030d40 	.word	0x00030d40

08004c38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	68f9      	ldr	r1, [r7, #12]
 8004c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b085      	sub	sp, #20
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c84:	f023 0303 	bic.w	r3, r3, #3
 8004c88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c98:	f043 0302 	orr.w	r3, r3, #2
 8004c9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4a13      	ldr	r2, [pc, #76]	; (8004d2c <USB_CoreReset+0x64>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d901      	bls.n	8004ce6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e01b      	b.n	8004d1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	daf2      	bge.n	8004cd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f043 0201 	orr.w	r2, r3, #1
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	3301      	adds	r3, #1
 8004d02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4a09      	ldr	r2, [pc, #36]	; (8004d2c <USB_CoreReset+0x64>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d901      	bls.n	8004d10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e006      	b.n	8004d1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d0f0      	beq.n	8004cfe <USB_CoreReset+0x36>

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	00030d40 	.word	0x00030d40

08004d30 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	4603      	mov	r3, r0
 8004d38:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d42:	2b84      	cmp	r3, #132	; 0x84
 8004d44:	d005      	beq.n	8004d52 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004d46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	3303      	adds	r3, #3
 8004d50:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004d52:	68fb      	ldr	r3, [r7, #12]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004d64:	f000 ff76 	bl	8005c54 <vTaskStartScheduler>
  
  return osOK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004d6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d70:	b089      	sub	sp, #36	; 0x24
 8004d72:	af04      	add	r7, sp, #16
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d020      	beq.n	8004dc2 <osThreadCreate+0x54>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01c      	beq.n	8004dc2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685c      	ldr	r4, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691e      	ldr	r6, [r3, #16]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff ffc8 	bl	8004d30 <makeFreeRtosPriority>
 8004da0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004daa:	9202      	str	r2, [sp, #8]
 8004dac:	9301      	str	r3, [sp, #4]
 8004dae:	9100      	str	r1, [sp, #0]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	4632      	mov	r2, r6
 8004db4:	4629      	mov	r1, r5
 8004db6:	4620      	mov	r0, r4
 8004db8:	f000 fccc 	bl	8005754 <xTaskCreateStatic>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	e01c      	b.n	8004dfc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685c      	ldr	r4, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004dce:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff ffaa 	bl	8004d30 <makeFreeRtosPriority>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	f107 030c 	add.w	r3, r7, #12
 8004de2:	9301      	str	r3, [sp, #4]
 8004de4:	9200      	str	r2, [sp, #0]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	4632      	mov	r2, r6
 8004dea:	4629      	mov	r1, r5
 8004dec:	4620      	mov	r0, r4
 8004dee:	f000 fd0e 	bl	800580e <xTaskCreate>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d001      	beq.n	8004dfc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e000      	b.n	8004dfe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e06 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b084      	sub	sp, #16
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <osDelay+0x16>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	e000      	b.n	8004e1e <osDelay+0x18>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fee4 	bl	8005bec <vTaskDelay>
  
  return osOK;
 8004e24:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f103 0208 	add.w	r2, r3, #8
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f04f 32ff 	mov.w	r2, #4294967295
 8004e46:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f103 0208 	add.w	r2, r3, #8
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f103 0208 	add.w	r2, r3, #8
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	601a      	str	r2, [r3, #0]
}
 8004ec4:	bf00      	nop
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee6:	d103      	bne.n	8004ef0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	e00c      	b.n	8004f0a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	e002      	b.n	8004efe <vListInsert+0x2e>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d2f6      	bcs.n	8004ef8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	601a      	str	r2, [r3, #0]
}
 8004f36:	bf00      	nop
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f42:	b480      	push	{r7}
 8004f44:	b085      	sub	sp, #20
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6892      	ldr	r2, [r2, #8]
 8004f58:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6852      	ldr	r2, [r2, #4]
 8004f62:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d103      	bne.n	8004f76 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	1e5a      	subs	r2, r3, #1
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
	...

08004f98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10a      	bne.n	8004fc2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004fbe:	bf00      	nop
 8004fc0:	e7fe      	b.n	8004fc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004fc2:	f001 fcaf 	bl	8006924 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fce:	68f9      	ldr	r1, [r7, #12]
 8004fd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004fd2:	fb01 f303 	mul.w	r3, r1, r3
 8004fd6:	441a      	add	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	68f9      	ldr	r1, [r7, #12]
 8004ff6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ff8:	fb01 f303 	mul.w	r3, r1, r3
 8004ffc:	441a      	add	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	22ff      	movs	r2, #255	; 0xff
 8005006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	22ff      	movs	r2, #255	; 0xff
 800500e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d114      	bne.n	8005042 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01a      	beq.n	8005056 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3310      	adds	r3, #16
 8005024:	4618      	mov	r0, r3
 8005026:	f001 f885 	bl	8006134 <xTaskRemoveFromEventList>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d012      	beq.n	8005056 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005030:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <xQueueGenericReset+0xcc>)
 8005032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	e009      	b.n	8005056 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	3310      	adds	r3, #16
 8005046:	4618      	mov	r0, r3
 8005048:	f7ff fef1 	bl	8004e2e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3324      	adds	r3, #36	; 0x24
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff feec 	bl	8004e2e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005056:	f001 fc95 	bl	8006984 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800505a:	2301      	movs	r3, #1
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	e000ed04 	.word	0xe000ed04

08005068 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08a      	sub	sp, #40	; 0x28
 800506c:	af02      	add	r7, sp, #8
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	4613      	mov	r3, r2
 8005074:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10a      	bne.n	8005092 <xQueueGenericCreate+0x2a>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	613b      	str	r3, [r7, #16]
}
 800508e:	bf00      	nop
 8005090:	e7fe      	b.n	8005090 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	fb02 f303 	mul.w	r3, r2, r3
 800509a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	3350      	adds	r3, #80	; 0x50
 80050a0:	4618      	mov	r0, r3
 80050a2:	f001 fd21 	bl	8006ae8 <pvPortMalloc>
 80050a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d011      	beq.n	80050d2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	3350      	adds	r3, #80	; 0x50
 80050b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80050c0:	79fa      	ldrb	r2, [r7, #7]
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	4613      	mov	r3, r2
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f805 	bl	80050dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80050d2:	69bb      	ldr	r3, [r7, #24]
	}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3720      	adds	r7, #32
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d103      	bne.n	80050f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	e002      	b.n	80050fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800510a:	2101      	movs	r1, #1
 800510c:	69b8      	ldr	r0, [r7, #24]
 800510e:	f7ff ff43 	bl	8004f98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	78fa      	ldrb	r2, [r7, #3]
 8005116:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800511a:	bf00      	nop
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b08e      	sub	sp, #56	; 0x38
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005132:	2300      	movs	r3, #0
 8005134:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10a      	bne.n	8005156 <xQueueGenericSend+0x32>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005152:	bf00      	nop
 8005154:	e7fe      	b.n	8005154 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d103      	bne.n	8005164 <xQueueGenericSend+0x40>
 800515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <xQueueGenericSend+0x44>
 8005164:	2301      	movs	r3, #1
 8005166:	e000      	b.n	800516a <xQueueGenericSend+0x46>
 8005168:	2300      	movs	r3, #0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10a      	bne.n	8005184 <xQueueGenericSend+0x60>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005180:	bf00      	nop
 8005182:	e7fe      	b.n	8005182 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b02      	cmp	r3, #2
 8005188:	d103      	bne.n	8005192 <xQueueGenericSend+0x6e>
 800518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518e:	2b01      	cmp	r3, #1
 8005190:	d101      	bne.n	8005196 <xQueueGenericSend+0x72>
 8005192:	2301      	movs	r3, #1
 8005194:	e000      	b.n	8005198 <xQueueGenericSend+0x74>
 8005196:	2300      	movs	r3, #0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10a      	bne.n	80051b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800519c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a0:	f383 8811 	msr	BASEPRI, r3
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	623b      	str	r3, [r7, #32]
}
 80051ae:	bf00      	nop
 80051b0:	e7fe      	b.n	80051b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051b2:	f001 f97f 	bl	80064b4 <xTaskGetSchedulerState>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d102      	bne.n	80051c2 <xQueueGenericSend+0x9e>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <xQueueGenericSend+0xa2>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <xQueueGenericSend+0xa4>
 80051c6:	2300      	movs	r3, #0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	61fb      	str	r3, [r7, #28]
}
 80051de:	bf00      	nop
 80051e0:	e7fe      	b.n	80051e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051e2:	f001 fb9f 	bl	8006924 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d302      	bcc.n	80051f8 <xQueueGenericSend+0xd4>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d129      	bne.n	800524c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051fe:	f000 f96f 	bl	80054e0 <prvCopyDataToQueue>
 8005202:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	2b00      	cmp	r3, #0
 800520a:	d010      	beq.n	800522e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800520c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520e:	3324      	adds	r3, #36	; 0x24
 8005210:	4618      	mov	r0, r3
 8005212:	f000 ff8f 	bl	8006134 <xTaskRemoveFromEventList>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d013      	beq.n	8005244 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800521c:	4b3f      	ldr	r3, [pc, #252]	; (800531c <xQueueGenericSend+0x1f8>)
 800521e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	e00a      	b.n	8005244 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800522e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005230:	2b00      	cmp	r3, #0
 8005232:	d007      	beq.n	8005244 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005234:	4b39      	ldr	r3, [pc, #228]	; (800531c <xQueueGenericSend+0x1f8>)
 8005236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005244:	f001 fb9e 	bl	8006984 <vPortExitCritical>
				return pdPASS;
 8005248:	2301      	movs	r3, #1
 800524a:	e063      	b.n	8005314 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d103      	bne.n	800525a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005252:	f001 fb97 	bl	8006984 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005256:	2300      	movs	r3, #0
 8005258:	e05c      	b.n	8005314 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800525a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525c:	2b00      	cmp	r3, #0
 800525e:	d106      	bne.n	800526e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005260:	f107 0314 	add.w	r3, r7, #20
 8005264:	4618      	mov	r0, r3
 8005266:	f000 ffc7 	bl	80061f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800526a:	2301      	movs	r3, #1
 800526c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800526e:	f001 fb89 	bl	8006984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005272:	f000 fd5b 	bl	8005d2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005276:	f001 fb55 	bl	8006924 <vPortEnterCritical>
 800527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005280:	b25b      	sxtb	r3, r3
 8005282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005286:	d103      	bne.n	8005290 <xQueueGenericSend+0x16c>
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005292:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005296:	b25b      	sxtb	r3, r3
 8005298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529c:	d103      	bne.n	80052a6 <xQueueGenericSend+0x182>
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052a6:	f001 fb6d 	bl	8006984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052aa:	1d3a      	adds	r2, r7, #4
 80052ac:	f107 0314 	add.w	r3, r7, #20
 80052b0:	4611      	mov	r1, r2
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 ffb6 	bl	8006224 <xTaskCheckForTimeOut>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d124      	bne.n	8005308 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80052be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052c0:	f000 fa06 	bl	80056d0 <prvIsQueueFull>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d018      	beq.n	80052fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80052ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052cc:	3310      	adds	r3, #16
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	4611      	mov	r1, r2
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 ff0a 	bl	80060ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80052d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052da:	f000 f991 	bl	8005600 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80052de:	f000 fd33 	bl	8005d48 <xTaskResumeAll>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f47f af7c 	bne.w	80051e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80052ea:	4b0c      	ldr	r3, [pc, #48]	; (800531c <xQueueGenericSend+0x1f8>)
 80052ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	e772      	b.n	80051e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80052fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052fe:	f000 f97f 	bl	8005600 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005302:	f000 fd21 	bl	8005d48 <xTaskResumeAll>
 8005306:	e76c      	b.n	80051e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800530a:	f000 f979 	bl	8005600 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800530e:	f000 fd1b 	bl	8005d48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005312:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005314:	4618      	mov	r0, r3
 8005316:	3738      	adds	r7, #56	; 0x38
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	e000ed04 	.word	0xe000ed04

08005320 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08c      	sub	sp, #48	; 0x30
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800532c:	2300      	movs	r3, #0
 800532e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10a      	bne.n	8005350 <xQueueReceive+0x30>
	__asm volatile
 800533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	623b      	str	r3, [r7, #32]
}
 800534c:	bf00      	nop
 800534e:	e7fe      	b.n	800534e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d103      	bne.n	800535e <xQueueReceive+0x3e>
 8005356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <xQueueReceive+0x42>
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <xQueueReceive+0x44>
 8005362:	2300      	movs	r3, #0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10a      	bne.n	800537e <xQueueReceive+0x5e>
	__asm volatile
 8005368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	61fb      	str	r3, [r7, #28]
}
 800537a:	bf00      	nop
 800537c:	e7fe      	b.n	800537c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800537e:	f001 f899 	bl	80064b4 <xTaskGetSchedulerState>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d102      	bne.n	800538e <xQueueReceive+0x6e>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <xQueueReceive+0x72>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <xQueueReceive+0x74>
 8005392:	2300      	movs	r3, #0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10a      	bne.n	80053ae <xQueueReceive+0x8e>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	61bb      	str	r3, [r7, #24]
}
 80053aa:	bf00      	nop
 80053ac:	e7fe      	b.n	80053ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053ae:	f001 fab9 	bl	8006924 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d01f      	beq.n	80053fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053be:	68b9      	ldr	r1, [r7, #8]
 80053c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053c2:	f000 f8f7 	bl	80055b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	1e5a      	subs	r2, r3, #1
 80053ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00f      	beq.n	80053f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d8:	3310      	adds	r3, #16
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 feaa 	bl	8006134 <xTaskRemoveFromEventList>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d007      	beq.n	80053f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053e6:	4b3d      	ldr	r3, [pc, #244]	; (80054dc <xQueueReceive+0x1bc>)
 80053e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053f6:	f001 fac5 	bl	8006984 <vPortExitCritical>
				return pdPASS;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e069      	b.n	80054d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d103      	bne.n	800540c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005404:	f001 fabe 	bl	8006984 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005408:	2300      	movs	r3, #0
 800540a:	e062      	b.n	80054d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800540c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540e:	2b00      	cmp	r3, #0
 8005410:	d106      	bne.n	8005420 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005412:	f107 0310 	add.w	r3, r7, #16
 8005416:	4618      	mov	r0, r3
 8005418:	f000 feee 	bl	80061f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800541c:	2301      	movs	r3, #1
 800541e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005420:	f001 fab0 	bl	8006984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005424:	f000 fc82 	bl	8005d2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005428:	f001 fa7c 	bl	8006924 <vPortEnterCritical>
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005432:	b25b      	sxtb	r3, r3
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005438:	d103      	bne.n	8005442 <xQueueReceive+0x122>
 800543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005448:	b25b      	sxtb	r3, r3
 800544a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544e:	d103      	bne.n	8005458 <xQueueReceive+0x138>
 8005450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005458:	f001 fa94 	bl	8006984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800545c:	1d3a      	adds	r2, r7, #4
 800545e:	f107 0310 	add.w	r3, r7, #16
 8005462:	4611      	mov	r1, r2
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fedd 	bl	8006224 <xTaskCheckForTimeOut>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d123      	bne.n	80054b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005472:	f000 f917 	bl	80056a4 <prvIsQueueEmpty>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d017      	beq.n	80054ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	3324      	adds	r3, #36	; 0x24
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	4611      	mov	r1, r2
 8005484:	4618      	mov	r0, r3
 8005486:	f000 fe31 	bl	80060ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800548a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800548c:	f000 f8b8 	bl	8005600 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005490:	f000 fc5a 	bl	8005d48 <xTaskResumeAll>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d189      	bne.n	80053ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800549a:	4b10      	ldr	r3, [pc, #64]	; (80054dc <xQueueReceive+0x1bc>)
 800549c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	e780      	b.n	80053ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80054ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ae:	f000 f8a7 	bl	8005600 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054b2:	f000 fc49 	bl	8005d48 <xTaskResumeAll>
 80054b6:	e77a      	b.n	80053ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80054b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ba:	f000 f8a1 	bl	8005600 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054be:	f000 fc43 	bl	8005d48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054c4:	f000 f8ee 	bl	80056a4 <prvIsQueueEmpty>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f43f af6f 	beq.w	80053ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80054d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3730      	adds	r7, #48	; 0x30
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	e000ed04 	.word	0xe000ed04

080054e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80054ec:	2300      	movs	r3, #0
 80054ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10d      	bne.n	800551a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d14d      	bne.n	80055a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fff0 	bl	80064f0 <xTaskPriorityDisinherit>
 8005510:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	609a      	str	r2, [r3, #8]
 8005518:	e043      	b.n	80055a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d119      	bne.n	8005554 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6858      	ldr	r0, [r3, #4]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	461a      	mov	r2, r3
 800552a:	68b9      	ldr	r1, [r7, #8]
 800552c:	f002 ff6b 	bl	8008406 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005538:	441a      	add	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	429a      	cmp	r2, r3
 8005548:	d32b      	bcc.n	80055a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	605a      	str	r2, [r3, #4]
 8005552:	e026      	b.n	80055a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	68d8      	ldr	r0, [r3, #12]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555c:	461a      	mov	r2, r3
 800555e:	68b9      	ldr	r1, [r7, #8]
 8005560:	f002 ff51 	bl	8008406 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556c:	425b      	negs	r3, r3
 800556e:	441a      	add	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	429a      	cmp	r2, r3
 800557e:	d207      	bcs.n	8005590 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	425b      	negs	r3, r3
 800558a:	441a      	add	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b02      	cmp	r3, #2
 8005594:	d105      	bne.n	80055a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	3b01      	subs	r3, #1
 80055a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80055aa:	697b      	ldr	r3, [r7, #20]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d018      	beq.n	80055f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	441a      	add	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d303      	bcc.n	80055e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68d9      	ldr	r1, [r3, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	461a      	mov	r2, r3
 80055f2:	6838      	ldr	r0, [r7, #0]
 80055f4:	f002 ff07 	bl	8008406 <memcpy>
	}
}
 80055f8:	bf00      	nop
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005608:	f001 f98c 	bl	8006924 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005612:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005614:	e011      	b.n	800563a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	2b00      	cmp	r3, #0
 800561c:	d012      	beq.n	8005644 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3324      	adds	r3, #36	; 0x24
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fd86 	bl	8006134 <xTaskRemoveFromEventList>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800562e:	f000 fe5b 	bl	80062e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	3b01      	subs	r3, #1
 8005636:	b2db      	uxtb	r3, r3
 8005638:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800563a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800563e:	2b00      	cmp	r3, #0
 8005640:	dce9      	bgt.n	8005616 <prvUnlockQueue+0x16>
 8005642:	e000      	b.n	8005646 <prvUnlockQueue+0x46>
					break;
 8005644:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	22ff      	movs	r2, #255	; 0xff
 800564a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800564e:	f001 f999 	bl	8006984 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005652:	f001 f967 	bl	8006924 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800565c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800565e:	e011      	b.n	8005684 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d012      	beq.n	800568e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3310      	adds	r3, #16
 800566c:	4618      	mov	r0, r3
 800566e:	f000 fd61 	bl	8006134 <xTaskRemoveFromEventList>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005678:	f000 fe36 	bl	80062e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800567c:	7bbb      	ldrb	r3, [r7, #14]
 800567e:	3b01      	subs	r3, #1
 8005680:	b2db      	uxtb	r3, r3
 8005682:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005688:	2b00      	cmp	r3, #0
 800568a:	dce9      	bgt.n	8005660 <prvUnlockQueue+0x60>
 800568c:	e000      	b.n	8005690 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800568e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	22ff      	movs	r2, #255	; 0xff
 8005694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005698:	f001 f974 	bl	8006984 <vPortExitCritical>
}
 800569c:	bf00      	nop
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056ac:	f001 f93a 	bl	8006924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d102      	bne.n	80056be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80056b8:	2301      	movs	r3, #1
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	e001      	b.n	80056c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80056be:	2300      	movs	r3, #0
 80056c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056c2:	f001 f95f 	bl	8006984 <vPortExitCritical>

	return xReturn;
 80056c6:	68fb      	ldr	r3, [r7, #12]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056d8:	f001 f924 	bl	8006924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d102      	bne.n	80056ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80056e8:	2301      	movs	r3, #1
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	e001      	b.n	80056f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056f2:	f001 f947 	bl	8006984 <vPortExitCritical>

	return xReturn;
 80056f6:	68fb      	ldr	r3, [r7, #12]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	e014      	b.n	800573a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005710:	4a0f      	ldr	r2, [pc, #60]	; (8005750 <vQueueAddToRegistry+0x50>)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10b      	bne.n	8005734 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800571c:	490c      	ldr	r1, [pc, #48]	; (8005750 <vQueueAddToRegistry+0x50>)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005726:	4a0a      	ldr	r2, [pc, #40]	; (8005750 <vQueueAddToRegistry+0x50>)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	4413      	add	r3, r2
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005732:	e006      	b.n	8005742 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	3301      	adds	r3, #1
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b07      	cmp	r3, #7
 800573e:	d9e7      	bls.n	8005710 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005740:	bf00      	nop
 8005742:	bf00      	nop
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	2000098c 	.word	0x2000098c

08005754 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08e      	sub	sp, #56	; 0x38
 8005758:	af04      	add	r7, sp, #16
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10a      	bne.n	800577e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	623b      	str	r3, [r7, #32]
}
 800577a:	bf00      	nop
 800577c:	e7fe      	b.n	800577c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800577e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10a      	bne.n	800579a <xTaskCreateStatic+0x46>
	__asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	61fb      	str	r3, [r7, #28]
}
 8005796:	bf00      	nop
 8005798:	e7fe      	b.n	8005798 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800579a:	23b0      	movs	r3, #176	; 0xb0
 800579c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	2bb0      	cmp	r3, #176	; 0xb0
 80057a2:	d00a      	beq.n	80057ba <xTaskCreateStatic+0x66>
	__asm volatile
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	61bb      	str	r3, [r7, #24]
}
 80057b6:	bf00      	nop
 80057b8:	e7fe      	b.n	80057b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d01e      	beq.n	8005800 <xTaskCreateStatic+0xac>
 80057c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d01b      	beq.n	8005800 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	2202      	movs	r2, #2
 80057d6:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057da:	2300      	movs	r3, #0
 80057dc:	9303      	str	r3, [sp, #12]
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	9302      	str	r3, [sp, #8]
 80057e2:	f107 0314 	add.w	r3, r7, #20
 80057e6:	9301      	str	r3, [sp, #4]
 80057e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	68b9      	ldr	r1, [r7, #8]
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 f850 	bl	8005898 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057fa:	f000 f8f9 	bl	80059f0 <prvAddNewTaskToReadyList>
 80057fe:	e001      	b.n	8005804 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005800:	2300      	movs	r3, #0
 8005802:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005804:	697b      	ldr	r3, [r7, #20]
	}
 8005806:	4618      	mov	r0, r3
 8005808:	3728      	adds	r7, #40	; 0x28
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800580e:	b580      	push	{r7, lr}
 8005810:	b08c      	sub	sp, #48	; 0x30
 8005812:	af04      	add	r7, sp, #16
 8005814:	60f8      	str	r0, [r7, #12]
 8005816:	60b9      	str	r1, [r7, #8]
 8005818:	603b      	str	r3, [r7, #0]
 800581a:	4613      	mov	r3, r2
 800581c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800581e:	88fb      	ldrh	r3, [r7, #6]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4618      	mov	r0, r3
 8005824:	f001 f960 	bl	8006ae8 <pvPortMalloc>
 8005828:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00e      	beq.n	800584e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005830:	20b0      	movs	r0, #176	; 0xb0
 8005832:	f001 f959 	bl	8006ae8 <pvPortMalloc>
 8005836:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	631a      	str	r2, [r3, #48]	; 0x30
 8005844:	e005      	b.n	8005852 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005846:	6978      	ldr	r0, [r7, #20]
 8005848:	f001 fa1a 	bl	8006c80 <vPortFree>
 800584c:	e001      	b.n	8005852 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800584e:	2300      	movs	r3, #0
 8005850:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d017      	beq.n	8005888 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005860:	88fa      	ldrh	r2, [r7, #6]
 8005862:	2300      	movs	r3, #0
 8005864:	9303      	str	r3, [sp, #12]
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	9302      	str	r3, [sp, #8]
 800586a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586c:	9301      	str	r3, [sp, #4]
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68b9      	ldr	r1, [r7, #8]
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 f80e 	bl	8005898 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800587c:	69f8      	ldr	r0, [r7, #28]
 800587e:	f000 f8b7 	bl	80059f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005882:	2301      	movs	r3, #1
 8005884:	61bb      	str	r3, [r7, #24]
 8005886:	e002      	b.n	800588e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005888:	f04f 33ff 	mov.w	r3, #4294967295
 800588c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800588e:	69bb      	ldr	r3, [r7, #24]
	}
 8005890:	4618      	mov	r0, r3
 8005892:	3720      	adds	r7, #32
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b088      	sub	sp, #32
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
 80058a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	461a      	mov	r2, r3
 80058b0:	21a5      	movs	r1, #165	; 0xa5
 80058b2:	f002 fcd6 	bl	8008262 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80058c0:	3b01      	subs	r3, #1
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	f023 0307 	bic.w	r3, r3, #7
 80058ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	f003 0307 	and.w	r3, r3, #7
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	617b      	str	r3, [r7, #20]
}
 80058ec:	bf00      	nop
 80058ee:	e7fe      	b.n	80058ee <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d01f      	beq.n	800593c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058fc:	2300      	movs	r3, #0
 80058fe:	61fb      	str	r3, [r7, #28]
 8005900:	e012      	b.n	8005928 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	4413      	add	r3, r2
 8005908:	7819      	ldrb	r1, [r3, #0]
 800590a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	4413      	add	r3, r2
 8005910:	3334      	adds	r3, #52	; 0x34
 8005912:	460a      	mov	r2, r1
 8005914:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	4413      	add	r3, r2
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d006      	beq.n	8005930 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	3301      	adds	r3, #1
 8005926:	61fb      	str	r3, [r7, #28]
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	2b0f      	cmp	r3, #15
 800592c:	d9e9      	bls.n	8005902 <prvInitialiseNewTask+0x6a>
 800592e:	e000      	b.n	8005932 <prvInitialiseNewTask+0x9a>
			{
				break;
 8005930:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800593a:	e003      	b.n	8005944 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	2b06      	cmp	r3, #6
 8005948:	d901      	bls.n	800594e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800594a:	2306      	movs	r3, #6
 800594c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005952:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005958:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	2200      	movs	r2, #0
 800595e:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005962:	3304      	adds	r3, #4
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff fa82 	bl	8004e6e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	3318      	adds	r3, #24
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff fa7d 	bl	8004e6e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005978:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800597a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597c:	f1c3 0207 	rsb	r2, r3, #7
 8005980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005982:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005988:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800598a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598c:	2200      	movs	r2, #0
 800598e:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005992:	2200      	movs	r2, #0
 8005994:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599a:	2200      	movs	r2, #0
 800599c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	335c      	adds	r3, #92	; 0x5c
 80059a4:	224c      	movs	r2, #76	; 0x4c
 80059a6:	2100      	movs	r1, #0
 80059a8:	4618      	mov	r0, r3
 80059aa:	f002 fc5a 	bl	8008262 <memset>
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	4a0c      	ldr	r2, [pc, #48]	; (80059e4 <prvInitialiseNewTask+0x14c>)
 80059b2:	661a      	str	r2, [r3, #96]	; 0x60
 80059b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b6:	4a0c      	ldr	r2, [pc, #48]	; (80059e8 <prvInitialiseNewTask+0x150>)
 80059b8:	665a      	str	r2, [r3, #100]	; 0x64
 80059ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059bc:	4a0b      	ldr	r2, [pc, #44]	; (80059ec <prvInitialiseNewTask+0x154>)
 80059be:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	68f9      	ldr	r1, [r7, #12]
 80059c4:	69b8      	ldr	r0, [r7, #24]
 80059c6:	f000 fe7f 	bl	80066c8 <pxPortInitialiseStack>
 80059ca:	4602      	mov	r2, r0
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059dc:	bf00      	nop
 80059de:	3720      	adds	r7, #32
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	20004cd0 	.word	0x20004cd0
 80059e8:	20004d38 	.word	0x20004d38
 80059ec:	20004da0 	.word	0x20004da0

080059f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059f8:	f000 ff94 	bl	8006924 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059fc:	4b2c      	ldr	r3, [pc, #176]	; (8005ab0 <prvAddNewTaskToReadyList+0xc0>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3301      	adds	r3, #1
 8005a02:	4a2b      	ldr	r2, [pc, #172]	; (8005ab0 <prvAddNewTaskToReadyList+0xc0>)
 8005a04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a06:	4b2b      	ldr	r3, [pc, #172]	; (8005ab4 <prvAddNewTaskToReadyList+0xc4>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d109      	bne.n	8005a22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a0e:	4a29      	ldr	r2, [pc, #164]	; (8005ab4 <prvAddNewTaskToReadyList+0xc4>)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a14:	4b26      	ldr	r3, [pc, #152]	; (8005ab0 <prvAddNewTaskToReadyList+0xc0>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d110      	bne.n	8005a3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a1c:	f000 fc88 	bl	8006330 <prvInitialiseTaskLists>
 8005a20:	e00d      	b.n	8005a3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a22:	4b25      	ldr	r3, [pc, #148]	; (8005ab8 <prvAddNewTaskToReadyList+0xc8>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d109      	bne.n	8005a3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a2a:	4b22      	ldr	r3, [pc, #136]	; (8005ab4 <prvAddNewTaskToReadyList+0xc4>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d802      	bhi.n	8005a3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a38:	4a1e      	ldr	r2, [pc, #120]	; (8005ab4 <prvAddNewTaskToReadyList+0xc4>)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a3e:	4b1f      	ldr	r3, [pc, #124]	; (8005abc <prvAddNewTaskToReadyList+0xcc>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3301      	adds	r3, #1
 8005a44:	4a1d      	ldr	r2, [pc, #116]	; (8005abc <prvAddNewTaskToReadyList+0xcc>)
 8005a46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a48:	4b1c      	ldr	r3, [pc, #112]	; (8005abc <prvAddNewTaskToReadyList+0xcc>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	2201      	movs	r2, #1
 8005a56:	409a      	lsls	r2, r3
 8005a58:	4b19      	ldr	r3, [pc, #100]	; (8005ac0 <prvAddNewTaskToReadyList+0xd0>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	4a18      	ldr	r2, [pc, #96]	; (8005ac0 <prvAddNewTaskToReadyList+0xd0>)
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a66:	4613      	mov	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4a15      	ldr	r2, [pc, #84]	; (8005ac4 <prvAddNewTaskToReadyList+0xd4>)
 8005a70:	441a      	add	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	3304      	adds	r3, #4
 8005a76:	4619      	mov	r1, r3
 8005a78:	4610      	mov	r0, r2
 8005a7a:	f7ff fa05 	bl	8004e88 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a7e:	f000 ff81 	bl	8006984 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a82:	4b0d      	ldr	r3, [pc, #52]	; (8005ab8 <prvAddNewTaskToReadyList+0xc8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00e      	beq.n	8005aa8 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a8a:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <prvAddNewTaskToReadyList+0xc4>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d207      	bcs.n	8005aa8 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a98:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <prvAddNewTaskToReadyList+0xd8>)
 8005a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aa8:	bf00      	nop
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	20000acc 	.word	0x20000acc
 8005ab4:	200009cc 	.word	0x200009cc
 8005ab8:	20000ad8 	.word	0x20000ad8
 8005abc:	20000ae8 	.word	0x20000ae8
 8005ac0:	20000ad4 	.word	0x20000ad4
 8005ac4:	200009d0 	.word	0x200009d0
 8005ac8:	e000ed04 	.word	0xe000ed04

08005acc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005ad4:	f000 ff26 	bl	8006924 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <vTaskDelete+0x18>
 8005ade:	4b39      	ldr	r3, [pc, #228]	; (8005bc4 <vTaskDelete+0xf8>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	e000      	b.n	8005ae6 <vTaskDelete+0x1a>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	3304      	adds	r3, #4
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7ff fa28 	bl	8004f42 <uxListRemove>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d115      	bne.n	8005b24 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afc:	4932      	ldr	r1, [pc, #200]	; (8005bc8 <vTaskDelete+0xfc>)
 8005afe:	4613      	mov	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	440b      	add	r3, r1
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <vTaskDelete+0x58>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b12:	2201      	movs	r2, #1
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	43da      	mvns	r2, r3
 8005b1a:	4b2c      	ldr	r3, [pc, #176]	; (8005bcc <vTaskDelete+0x100>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	4a2a      	ldr	r2, [pc, #168]	; (8005bcc <vTaskDelete+0x100>)
 8005b22:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d004      	beq.n	8005b36 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	3318      	adds	r3, #24
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7ff fa06 	bl	8004f42 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005b36:	4b26      	ldr	r3, [pc, #152]	; (8005bd0 <vTaskDelete+0x104>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	4a24      	ldr	r2, [pc, #144]	; (8005bd0 <vTaskDelete+0x104>)
 8005b3e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005b40:	4b20      	ldr	r3, [pc, #128]	; (8005bc4 <vTaskDelete+0xf8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d10b      	bne.n	8005b62 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4820      	ldr	r0, [pc, #128]	; (8005bd4 <vTaskDelete+0x108>)
 8005b52:	f7ff f999 	bl	8004e88 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005b56:	4b20      	ldr	r3, [pc, #128]	; (8005bd8 <vTaskDelete+0x10c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	4a1e      	ldr	r2, [pc, #120]	; (8005bd8 <vTaskDelete+0x10c>)
 8005b5e:	6013      	str	r3, [r2, #0]
 8005b60:	e009      	b.n	8005b76 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005b62:	4b1e      	ldr	r3, [pc, #120]	; (8005bdc <vTaskDelete+0x110>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	4a1c      	ldr	r2, [pc, #112]	; (8005bdc <vTaskDelete+0x110>)
 8005b6a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 fc4d 	bl	800640c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005b72:	f000 fc7f 	bl	8006474 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8005b76:	f000 ff05 	bl	8006984 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005b7a:	4b19      	ldr	r3, [pc, #100]	; (8005be0 <vTaskDelete+0x114>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d01b      	beq.n	8005bba <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8005b82:	4b10      	ldr	r3, [pc, #64]	; (8005bc4 <vTaskDelete+0xf8>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d116      	bne.n	8005bba <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005b8c:	4b15      	ldr	r3, [pc, #84]	; (8005be4 <vTaskDelete+0x118>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00a      	beq.n	8005baa <vTaskDelete+0xde>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	60bb      	str	r3, [r7, #8]
}
 8005ba6:	bf00      	nop
 8005ba8:	e7fe      	b.n	8005ba8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8005baa:	4b0f      	ldr	r3, [pc, #60]	; (8005be8 <vTaskDelete+0x11c>)
 8005bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005bba:	bf00      	nop
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	200009cc 	.word	0x200009cc
 8005bc8:	200009d0 	.word	0x200009d0
 8005bcc:	20000ad4 	.word	0x20000ad4
 8005bd0:	20000ae8 	.word	0x20000ae8
 8005bd4:	20000aa0 	.word	0x20000aa0
 8005bd8:	20000ab4 	.word	0x20000ab4
 8005bdc:	20000acc 	.word	0x20000acc
 8005be0:	20000ad8 	.word	0x20000ad8
 8005be4:	20000af4 	.word	0x20000af4
 8005be8:	e000ed04 	.word	0xe000ed04

08005bec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d017      	beq.n	8005c2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bfe:	4b13      	ldr	r3, [pc, #76]	; (8005c4c <vTaskDelay+0x60>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00a      	beq.n	8005c1c <vTaskDelay+0x30>
	__asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	60bb      	str	r3, [r7, #8]
}
 8005c18:	bf00      	nop
 8005c1a:	e7fe      	b.n	8005c1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c1c:	f000 f886 	bl	8005d2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c20:	2100      	movs	r1, #0
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fcea 	bl	80065fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c28:	f000 f88e 	bl	8005d48 <xTaskResumeAll>
 8005c2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d107      	bne.n	8005c44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005c34:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <vTaskDelay+0x64>)
 8005c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c44:	bf00      	nop
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	20000af4 	.word	0x20000af4
 8005c50:	e000ed04 	.word	0xe000ed04

08005c54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b08a      	sub	sp, #40	; 0x28
 8005c58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c62:	463a      	mov	r2, r7
 8005c64:	1d39      	adds	r1, r7, #4
 8005c66:	f107 0308 	add.w	r3, r7, #8
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fa fc9e 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c70:	6839      	ldr	r1, [r7, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	9202      	str	r2, [sp, #8]
 8005c78:	9301      	str	r3, [sp, #4]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	2300      	movs	r3, #0
 8005c80:	460a      	mov	r2, r1
 8005c82:	4922      	ldr	r1, [pc, #136]	; (8005d0c <vTaskStartScheduler+0xb8>)
 8005c84:	4822      	ldr	r0, [pc, #136]	; (8005d10 <vTaskStartScheduler+0xbc>)
 8005c86:	f7ff fd65 	bl	8005754 <xTaskCreateStatic>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	4a21      	ldr	r2, [pc, #132]	; (8005d14 <vTaskStartScheduler+0xc0>)
 8005c8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c90:	4b20      	ldr	r3, [pc, #128]	; (8005d14 <vTaskStartScheduler+0xc0>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	617b      	str	r3, [r7, #20]
 8005c9c:	e001      	b.n	8005ca2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d11d      	bne.n	8005ce4 <vTaskStartScheduler+0x90>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	613b      	str	r3, [r7, #16]
}
 8005cba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005cbc:	4b16      	ldr	r3, [pc, #88]	; (8005d18 <vTaskStartScheduler+0xc4>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	335c      	adds	r3, #92	; 0x5c
 8005cc2:	4a16      	ldr	r2, [pc, #88]	; (8005d1c <vTaskStartScheduler+0xc8>)
 8005cc4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005cc6:	4b16      	ldr	r3, [pc, #88]	; (8005d20 <vTaskStartScheduler+0xcc>)
 8005cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ccc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005cce:	4b15      	ldr	r3, [pc, #84]	; (8005d24 <vTaskStartScheduler+0xd0>)
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005cd4:	4b14      	ldr	r3, [pc, #80]	; (8005d28 <vTaskStartScheduler+0xd4>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8005cda:	f7fa fe75 	bl	80009c8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005cde:	f000 fd7f 	bl	80067e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ce2:	e00e      	b.n	8005d02 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cea:	d10a      	bne.n	8005d02 <vTaskStartScheduler+0xae>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	60fb      	str	r3, [r7, #12]
}
 8005cfe:	bf00      	nop
 8005d00:	e7fe      	b.n	8005d00 <vTaskStartScheduler+0xac>
}
 8005d02:	bf00      	nop
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	08008f14 	.word	0x08008f14
 8005d10:	08006301 	.word	0x08006301
 8005d14:	20000af0 	.word	0x20000af0
 8005d18:	200009cc 	.word	0x200009cc
 8005d1c:	200000cc 	.word	0x200000cc
 8005d20:	20000aec 	.word	0x20000aec
 8005d24:	20000ad8 	.word	0x20000ad8
 8005d28:	20000ad0 	.word	0x20000ad0

08005d2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005d30:	4b04      	ldr	r3, [pc, #16]	; (8005d44 <vTaskSuspendAll+0x18>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3301      	adds	r3, #1
 8005d36:	4a03      	ldr	r2, [pc, #12]	; (8005d44 <vTaskSuspendAll+0x18>)
 8005d38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005d3a:	bf00      	nop
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	20000af4 	.word	0x20000af4

08005d48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d56:	4b41      	ldr	r3, [pc, #260]	; (8005e5c <xTaskResumeAll+0x114>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10a      	bne.n	8005d74 <xTaskResumeAll+0x2c>
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	603b      	str	r3, [r7, #0]
}
 8005d70:	bf00      	nop
 8005d72:	e7fe      	b.n	8005d72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d74:	f000 fdd6 	bl	8006924 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d78:	4b38      	ldr	r3, [pc, #224]	; (8005e5c <xTaskResumeAll+0x114>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	4a37      	ldr	r2, [pc, #220]	; (8005e5c <xTaskResumeAll+0x114>)
 8005d80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d82:	4b36      	ldr	r3, [pc, #216]	; (8005e5c <xTaskResumeAll+0x114>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d161      	bne.n	8005e4e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d8a:	4b35      	ldr	r3, [pc, #212]	; (8005e60 <xTaskResumeAll+0x118>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d05d      	beq.n	8005e4e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d92:	e02e      	b.n	8005df2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d94:	4b33      	ldr	r3, [pc, #204]	; (8005e64 <xTaskResumeAll+0x11c>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3318      	adds	r3, #24
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff f8ce 	bl	8004f42 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	3304      	adds	r3, #4
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7ff f8c9 	bl	8004f42 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db4:	2201      	movs	r2, #1
 8005db6:	409a      	lsls	r2, r3
 8005db8:	4b2b      	ldr	r3, [pc, #172]	; (8005e68 <xTaskResumeAll+0x120>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	4a2a      	ldr	r2, [pc, #168]	; (8005e68 <xTaskResumeAll+0x120>)
 8005dc0:	6013      	str	r3, [r2, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4a27      	ldr	r2, [pc, #156]	; (8005e6c <xTaskResumeAll+0x124>)
 8005dd0:	441a      	add	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4610      	mov	r0, r2
 8005dda:	f7ff f855 	bl	8004e88 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de2:	4b23      	ldr	r3, [pc, #140]	; (8005e70 <xTaskResumeAll+0x128>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d302      	bcc.n	8005df2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005dec:	4b21      	ldr	r3, [pc, #132]	; (8005e74 <xTaskResumeAll+0x12c>)
 8005dee:	2201      	movs	r2, #1
 8005df0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005df2:	4b1c      	ldr	r3, [pc, #112]	; (8005e64 <xTaskResumeAll+0x11c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1cc      	bne.n	8005d94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e00:	f000 fb38 	bl	8006474 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005e04:	4b1c      	ldr	r3, [pc, #112]	; (8005e78 <xTaskResumeAll+0x130>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d010      	beq.n	8005e32 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e10:	f000 f836 	bl	8005e80 <xTaskIncrementTick>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005e1a:	4b16      	ldr	r3, [pc, #88]	; (8005e74 <xTaskResumeAll+0x12c>)
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1f1      	bne.n	8005e10 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005e2c:	4b12      	ldr	r3, [pc, #72]	; (8005e78 <xTaskResumeAll+0x130>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e32:	4b10      	ldr	r3, [pc, #64]	; (8005e74 <xTaskResumeAll+0x12c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d009      	beq.n	8005e4e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e3e:	4b0f      	ldr	r3, [pc, #60]	; (8005e7c <xTaskResumeAll+0x134>)
 8005e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e4e:	f000 fd99 	bl	8006984 <vPortExitCritical>

	return xAlreadyYielded;
 8005e52:	68bb      	ldr	r3, [r7, #8]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	20000af4 	.word	0x20000af4
 8005e60:	20000acc 	.word	0x20000acc
 8005e64:	20000a8c 	.word	0x20000a8c
 8005e68:	20000ad4 	.word	0x20000ad4
 8005e6c:	200009d0 	.word	0x200009d0
 8005e70:	200009cc 	.word	0x200009cc
 8005e74:	20000ae0 	.word	0x20000ae0
 8005e78:	20000adc 	.word	0x20000adc
 8005e7c:	e000ed04 	.word	0xe000ed04

08005e80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e86:	2300      	movs	r3, #0
 8005e88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e8a:	4b4e      	ldr	r3, [pc, #312]	; (8005fc4 <xTaskIncrementTick+0x144>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f040 808e 	bne.w	8005fb0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e94:	4b4c      	ldr	r3, [pc, #304]	; (8005fc8 <xTaskIncrementTick+0x148>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e9c:	4a4a      	ldr	r2, [pc, #296]	; (8005fc8 <xTaskIncrementTick+0x148>)
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d120      	bne.n	8005eea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ea8:	4b48      	ldr	r3, [pc, #288]	; (8005fcc <xTaskIncrementTick+0x14c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <xTaskIncrementTick+0x48>
	__asm volatile
 8005eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	603b      	str	r3, [r7, #0]
}
 8005ec4:	bf00      	nop
 8005ec6:	e7fe      	b.n	8005ec6 <xTaskIncrementTick+0x46>
 8005ec8:	4b40      	ldr	r3, [pc, #256]	; (8005fcc <xTaskIncrementTick+0x14c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	4b40      	ldr	r3, [pc, #256]	; (8005fd0 <xTaskIncrementTick+0x150>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a3e      	ldr	r2, [pc, #248]	; (8005fcc <xTaskIncrementTick+0x14c>)
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	4a3e      	ldr	r2, [pc, #248]	; (8005fd0 <xTaskIncrementTick+0x150>)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	4b3d      	ldr	r3, [pc, #244]	; (8005fd4 <xTaskIncrementTick+0x154>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	4a3c      	ldr	r2, [pc, #240]	; (8005fd4 <xTaskIncrementTick+0x154>)
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	f000 fac5 	bl	8006474 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005eea:	4b3b      	ldr	r3, [pc, #236]	; (8005fd8 <xTaskIncrementTick+0x158>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d348      	bcc.n	8005f86 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ef4:	4b35      	ldr	r3, [pc, #212]	; (8005fcc <xTaskIncrementTick+0x14c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d104      	bne.n	8005f08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005efe:	4b36      	ldr	r3, [pc, #216]	; (8005fd8 <xTaskIncrementTick+0x158>)
 8005f00:	f04f 32ff 	mov.w	r2, #4294967295
 8005f04:	601a      	str	r2, [r3, #0]
					break;
 8005f06:	e03e      	b.n	8005f86 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f08:	4b30      	ldr	r3, [pc, #192]	; (8005fcc <xTaskIncrementTick+0x14c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d203      	bcs.n	8005f28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f20:	4a2d      	ldr	r2, [pc, #180]	; (8005fd8 <xTaskIncrementTick+0x158>)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f26:	e02e      	b.n	8005f86 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7ff f808 	bl	8004f42 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d004      	beq.n	8005f44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	3318      	adds	r3, #24
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fe ffff 	bl	8004f42 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	2201      	movs	r2, #1
 8005f4a:	409a      	lsls	r2, r3
 8005f4c:	4b23      	ldr	r3, [pc, #140]	; (8005fdc <xTaskIncrementTick+0x15c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	4a22      	ldr	r2, [pc, #136]	; (8005fdc <xTaskIncrementTick+0x15c>)
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4a1f      	ldr	r2, [pc, #124]	; (8005fe0 <xTaskIncrementTick+0x160>)
 8005f64:	441a      	add	r2, r3
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	3304      	adds	r3, #4
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	f7fe ff8b 	bl	8004e88 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f76:	4b1b      	ldr	r3, [pc, #108]	; (8005fe4 <xTaskIncrementTick+0x164>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d3b9      	bcc.n	8005ef4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f80:	2301      	movs	r3, #1
 8005f82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f84:	e7b6      	b.n	8005ef4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f86:	4b17      	ldr	r3, [pc, #92]	; (8005fe4 <xTaskIncrementTick+0x164>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8c:	4914      	ldr	r1, [pc, #80]	; (8005fe0 <xTaskIncrementTick+0x160>)
 8005f8e:	4613      	mov	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	440b      	add	r3, r1
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d901      	bls.n	8005fa2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005fa2:	4b11      	ldr	r3, [pc, #68]	; (8005fe8 <xTaskIncrementTick+0x168>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d007      	beq.n	8005fba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005faa:	2301      	movs	r3, #1
 8005fac:	617b      	str	r3, [r7, #20]
 8005fae:	e004      	b.n	8005fba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005fb0:	4b0e      	ldr	r3, [pc, #56]	; (8005fec <xTaskIncrementTick+0x16c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	4a0d      	ldr	r2, [pc, #52]	; (8005fec <xTaskIncrementTick+0x16c>)
 8005fb8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005fba:	697b      	ldr	r3, [r7, #20]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3718      	adds	r7, #24
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	20000af4 	.word	0x20000af4
 8005fc8:	20000ad0 	.word	0x20000ad0
 8005fcc:	20000a84 	.word	0x20000a84
 8005fd0:	20000a88 	.word	0x20000a88
 8005fd4:	20000ae4 	.word	0x20000ae4
 8005fd8:	20000aec 	.word	0x20000aec
 8005fdc:	20000ad4 	.word	0x20000ad4
 8005fe0:	200009d0 	.word	0x200009d0
 8005fe4:	200009cc 	.word	0x200009cc
 8005fe8:	20000ae0 	.word	0x20000ae0
 8005fec:	20000adc 	.word	0x20000adc

08005ff0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ff6:	4b35      	ldr	r3, [pc, #212]	; (80060cc <vTaskSwitchContext+0xdc>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ffe:	4b34      	ldr	r3, [pc, #208]	; (80060d0 <vTaskSwitchContext+0xe0>)
 8006000:	2201      	movs	r2, #1
 8006002:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006004:	e05d      	b.n	80060c2 <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
 8006006:	4b32      	ldr	r3, [pc, #200]	; (80060d0 <vTaskSwitchContext+0xe0>)
 8006008:	2200      	movs	r2, #0
 800600a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800600c:	f7fa fce8 	bl	80009e0 <getRunTimeCounterValue>
 8006010:	4603      	mov	r3, r0
 8006012:	4a30      	ldr	r2, [pc, #192]	; (80060d4 <vTaskSwitchContext+0xe4>)
 8006014:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006016:	4b2f      	ldr	r3, [pc, #188]	; (80060d4 <vTaskSwitchContext+0xe4>)
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	4b2f      	ldr	r3, [pc, #188]	; (80060d8 <vTaskSwitchContext+0xe8>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	429a      	cmp	r2, r3
 8006020:	d909      	bls.n	8006036 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006022:	4b2e      	ldr	r3, [pc, #184]	; (80060dc <vTaskSwitchContext+0xec>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8006028:	4a2a      	ldr	r2, [pc, #168]	; (80060d4 <vTaskSwitchContext+0xe4>)
 800602a:	6810      	ldr	r0, [r2, #0]
 800602c:	4a2a      	ldr	r2, [pc, #168]	; (80060d8 <vTaskSwitchContext+0xe8>)
 800602e:	6812      	ldr	r2, [r2, #0]
 8006030:	1a82      	subs	r2, r0, r2
 8006032:	440a      	add	r2, r1
 8006034:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8006036:	4b27      	ldr	r3, [pc, #156]	; (80060d4 <vTaskSwitchContext+0xe4>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a27      	ldr	r2, [pc, #156]	; (80060d8 <vTaskSwitchContext+0xe8>)
 800603c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800603e:	4b28      	ldr	r3, [pc, #160]	; (80060e0 <vTaskSwitchContext+0xf0>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	fab3 f383 	clz	r3, r3
 800604a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800604c:	7afb      	ldrb	r3, [r7, #11]
 800604e:	f1c3 031f 	rsb	r3, r3, #31
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	4923      	ldr	r1, [pc, #140]	; (80060e4 <vTaskSwitchContext+0xf4>)
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	4613      	mov	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	440b      	add	r3, r1
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10a      	bne.n	800607e <vTaskSwitchContext+0x8e>
	__asm volatile
 8006068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	607b      	str	r3, [r7, #4]
}
 800607a:	bf00      	nop
 800607c:	e7fe      	b.n	800607c <vTaskSwitchContext+0x8c>
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4a16      	ldr	r2, [pc, #88]	; (80060e4 <vTaskSwitchContext+0xf4>)
 800608a:	4413      	add	r3, r2
 800608c:	613b      	str	r3, [r7, #16]
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	605a      	str	r2, [r3, #4]
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	3308      	adds	r3, #8
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d104      	bne.n	80060ae <vTaskSwitchContext+0xbe>
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	605a      	str	r2, [r3, #4]
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	4a09      	ldr	r2, [pc, #36]	; (80060dc <vTaskSwitchContext+0xec>)
 80060b6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060b8:	4b08      	ldr	r3, [pc, #32]	; (80060dc <vTaskSwitchContext+0xec>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	335c      	adds	r3, #92	; 0x5c
 80060be:	4a0a      	ldr	r2, [pc, #40]	; (80060e8 <vTaskSwitchContext+0xf8>)
 80060c0:	6013      	str	r3, [r2, #0]
}
 80060c2:	bf00      	nop
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	20000af4 	.word	0x20000af4
 80060d0:	20000ae0 	.word	0x20000ae0
 80060d4:	20000afc 	.word	0x20000afc
 80060d8:	20000af8 	.word	0x20000af8
 80060dc:	200009cc 	.word	0x200009cc
 80060e0:	20000ad4 	.word	0x20000ad4
 80060e4:	200009d0 	.word	0x200009d0
 80060e8:	200000cc 	.word	0x200000cc

080060ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10a      	bne.n	8006112 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80060fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	60fb      	str	r3, [r7, #12]
}
 800610e:	bf00      	nop
 8006110:	e7fe      	b.n	8006110 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006112:	4b07      	ldr	r3, [pc, #28]	; (8006130 <vTaskPlaceOnEventList+0x44>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3318      	adds	r3, #24
 8006118:	4619      	mov	r1, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7fe fed8 	bl	8004ed0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006120:	2101      	movs	r1, #1
 8006122:	6838      	ldr	r0, [r7, #0]
 8006124:	f000 fa6a 	bl	80065fc <prvAddCurrentTaskToDelayedList>
}
 8006128:	bf00      	nop
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	200009cc 	.word	0x200009cc

08006134 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10a      	bne.n	8006160 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800614a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	60fb      	str	r3, [r7, #12]
}
 800615c:	bf00      	nop
 800615e:	e7fe      	b.n	800615e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	3318      	adds	r3, #24
 8006164:	4618      	mov	r0, r3
 8006166:	f7fe feec 	bl	8004f42 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800616a:	4b1d      	ldr	r3, [pc, #116]	; (80061e0 <xTaskRemoveFromEventList+0xac>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d11c      	bne.n	80061ac <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	3304      	adds	r3, #4
 8006176:	4618      	mov	r0, r3
 8006178:	f7fe fee3 	bl	8004f42 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	2201      	movs	r2, #1
 8006182:	409a      	lsls	r2, r3
 8006184:	4b17      	ldr	r3, [pc, #92]	; (80061e4 <xTaskRemoveFromEventList+0xb0>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4313      	orrs	r3, r2
 800618a:	4a16      	ldr	r2, [pc, #88]	; (80061e4 <xTaskRemoveFromEventList+0xb0>)
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006192:	4613      	mov	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4a13      	ldr	r2, [pc, #76]	; (80061e8 <xTaskRemoveFromEventList+0xb4>)
 800619c:	441a      	add	r2, r3
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	3304      	adds	r3, #4
 80061a2:	4619      	mov	r1, r3
 80061a4:	4610      	mov	r0, r2
 80061a6:	f7fe fe6f 	bl	8004e88 <vListInsertEnd>
 80061aa:	e005      	b.n	80061b8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	3318      	adds	r3, #24
 80061b0:	4619      	mov	r1, r3
 80061b2:	480e      	ldr	r0, [pc, #56]	; (80061ec <xTaskRemoveFromEventList+0xb8>)
 80061b4:	f7fe fe68 	bl	8004e88 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061bc:	4b0c      	ldr	r3, [pc, #48]	; (80061f0 <xTaskRemoveFromEventList+0xbc>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d905      	bls.n	80061d2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80061c6:	2301      	movs	r3, #1
 80061c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80061ca:	4b0a      	ldr	r3, [pc, #40]	; (80061f4 <xTaskRemoveFromEventList+0xc0>)
 80061cc:	2201      	movs	r2, #1
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	e001      	b.n	80061d6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80061d2:	2300      	movs	r3, #0
 80061d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80061d6:	697b      	ldr	r3, [r7, #20]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	20000af4 	.word	0x20000af4
 80061e4:	20000ad4 	.word	0x20000ad4
 80061e8:	200009d0 	.word	0x200009d0
 80061ec:	20000a8c 	.word	0x20000a8c
 80061f0:	200009cc 	.word	0x200009cc
 80061f4:	20000ae0 	.word	0x20000ae0

080061f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006200:	4b06      	ldr	r3, [pc, #24]	; (800621c <vTaskInternalSetTimeOutState+0x24>)
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006208:	4b05      	ldr	r3, [pc, #20]	; (8006220 <vTaskInternalSetTimeOutState+0x28>)
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	605a      	str	r2, [r3, #4]
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	20000ae4 	.word	0x20000ae4
 8006220:	20000ad0 	.word	0x20000ad0

08006224 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10a      	bne.n	800624a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	613b      	str	r3, [r7, #16]
}
 8006246:	bf00      	nop
 8006248:	e7fe      	b.n	8006248 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	60fb      	str	r3, [r7, #12]
}
 8006262:	bf00      	nop
 8006264:	e7fe      	b.n	8006264 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006266:	f000 fb5d 	bl	8006924 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800626a:	4b1d      	ldr	r3, [pc, #116]	; (80062e0 <xTaskCheckForTimeOut+0xbc>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006282:	d102      	bne.n	800628a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006284:	2300      	movs	r3, #0
 8006286:	61fb      	str	r3, [r7, #28]
 8006288:	e023      	b.n	80062d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	4b15      	ldr	r3, [pc, #84]	; (80062e4 <xTaskCheckForTimeOut+0xc0>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	429a      	cmp	r2, r3
 8006294:	d007      	beq.n	80062a6 <xTaskCheckForTimeOut+0x82>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	429a      	cmp	r2, r3
 800629e:	d302      	bcc.n	80062a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80062a0:	2301      	movs	r3, #1
 80062a2:	61fb      	str	r3, [r7, #28]
 80062a4:	e015      	b.n	80062d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d20b      	bcs.n	80062c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	1ad2      	subs	r2, r2, r3
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff ff9b 	bl	80061f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80062c2:	2300      	movs	r3, #0
 80062c4:	61fb      	str	r3, [r7, #28]
 80062c6:	e004      	b.n	80062d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2200      	movs	r2, #0
 80062cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80062ce:	2301      	movs	r3, #1
 80062d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80062d2:	f000 fb57 	bl	8006984 <vPortExitCritical>

	return xReturn;
 80062d6:	69fb      	ldr	r3, [r7, #28]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3720      	adds	r7, #32
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	20000ad0 	.word	0x20000ad0
 80062e4:	20000ae4 	.word	0x20000ae4

080062e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80062ec:	4b03      	ldr	r3, [pc, #12]	; (80062fc <vTaskMissedYield+0x14>)
 80062ee:	2201      	movs	r2, #1
 80062f0:	601a      	str	r2, [r3, #0]
}
 80062f2:	bf00      	nop
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	20000ae0 	.word	0x20000ae0

08006300 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006308:	f000 f852 	bl	80063b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800630c:	4b06      	ldr	r3, [pc, #24]	; (8006328 <prvIdleTask+0x28>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d9f9      	bls.n	8006308 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006314:	4b05      	ldr	r3, [pc, #20]	; (800632c <prvIdleTask+0x2c>)
 8006316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006324:	e7f0      	b.n	8006308 <prvIdleTask+0x8>
 8006326:	bf00      	nop
 8006328:	200009d0 	.word	0x200009d0
 800632c:	e000ed04 	.word	0xe000ed04

08006330 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006336:	2300      	movs	r3, #0
 8006338:	607b      	str	r3, [r7, #4]
 800633a:	e00c      	b.n	8006356 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	4613      	mov	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4a12      	ldr	r2, [pc, #72]	; (8006390 <prvInitialiseTaskLists+0x60>)
 8006348:	4413      	add	r3, r2
 800634a:	4618      	mov	r0, r3
 800634c:	f7fe fd6f 	bl	8004e2e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	3301      	adds	r3, #1
 8006354:	607b      	str	r3, [r7, #4]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b06      	cmp	r3, #6
 800635a:	d9ef      	bls.n	800633c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800635c:	480d      	ldr	r0, [pc, #52]	; (8006394 <prvInitialiseTaskLists+0x64>)
 800635e:	f7fe fd66 	bl	8004e2e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006362:	480d      	ldr	r0, [pc, #52]	; (8006398 <prvInitialiseTaskLists+0x68>)
 8006364:	f7fe fd63 	bl	8004e2e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006368:	480c      	ldr	r0, [pc, #48]	; (800639c <prvInitialiseTaskLists+0x6c>)
 800636a:	f7fe fd60 	bl	8004e2e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800636e:	480c      	ldr	r0, [pc, #48]	; (80063a0 <prvInitialiseTaskLists+0x70>)
 8006370:	f7fe fd5d 	bl	8004e2e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006374:	480b      	ldr	r0, [pc, #44]	; (80063a4 <prvInitialiseTaskLists+0x74>)
 8006376:	f7fe fd5a 	bl	8004e2e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800637a:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <prvInitialiseTaskLists+0x78>)
 800637c:	4a05      	ldr	r2, [pc, #20]	; (8006394 <prvInitialiseTaskLists+0x64>)
 800637e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006380:	4b0a      	ldr	r3, [pc, #40]	; (80063ac <prvInitialiseTaskLists+0x7c>)
 8006382:	4a05      	ldr	r2, [pc, #20]	; (8006398 <prvInitialiseTaskLists+0x68>)
 8006384:	601a      	str	r2, [r3, #0]
}
 8006386:	bf00      	nop
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	200009d0 	.word	0x200009d0
 8006394:	20000a5c 	.word	0x20000a5c
 8006398:	20000a70 	.word	0x20000a70
 800639c:	20000a8c 	.word	0x20000a8c
 80063a0:	20000aa0 	.word	0x20000aa0
 80063a4:	20000ab8 	.word	0x20000ab8
 80063a8:	20000a84 	.word	0x20000a84
 80063ac:	20000a88 	.word	0x20000a88

080063b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063b6:	e019      	b.n	80063ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80063b8:	f000 fab4 	bl	8006924 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063bc:	4b10      	ldr	r3, [pc, #64]	; (8006400 <prvCheckTasksWaitingTermination+0x50>)
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3304      	adds	r3, #4
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fe fdba 	bl	8004f42 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80063ce:	4b0d      	ldr	r3, [pc, #52]	; (8006404 <prvCheckTasksWaitingTermination+0x54>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	4a0b      	ldr	r2, [pc, #44]	; (8006404 <prvCheckTasksWaitingTermination+0x54>)
 80063d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063d8:	4b0b      	ldr	r3, [pc, #44]	; (8006408 <prvCheckTasksWaitingTermination+0x58>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3b01      	subs	r3, #1
 80063de:	4a0a      	ldr	r2, [pc, #40]	; (8006408 <prvCheckTasksWaitingTermination+0x58>)
 80063e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80063e2:	f000 facf 	bl	8006984 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f810 	bl	800640c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063ec:	4b06      	ldr	r3, [pc, #24]	; (8006408 <prvCheckTasksWaitingTermination+0x58>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e1      	bne.n	80063b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063f4:	bf00      	nop
 80063f6:	bf00      	nop
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	20000aa0 	.word	0x20000aa0
 8006404:	20000acc 	.word	0x20000acc
 8006408:	20000ab4 	.word	0x20000ab4

0800640c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	335c      	adds	r3, #92	; 0x5c
 8006418:	4618      	mov	r0, r3
 800641a:	f001 ff3b 	bl	8008294 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8006424:	2b00      	cmp	r3, #0
 8006426:	d108      	bne.n	800643a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642c:	4618      	mov	r0, r3
 800642e:	f000 fc27 	bl	8006c80 <vPortFree>
				vPortFree( pxTCB );
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fc24 	bl	8006c80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006438:	e018      	b.n	800646c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8006440:	2b01      	cmp	r3, #1
 8006442:	d103      	bne.n	800644c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fc1b 	bl	8006c80 <vPortFree>
	}
 800644a:	e00f      	b.n	800646c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8006452:	2b02      	cmp	r3, #2
 8006454:	d00a      	beq.n	800646c <prvDeleteTCB+0x60>
	__asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	60fb      	str	r3, [r7, #12]
}
 8006468:	bf00      	nop
 800646a:	e7fe      	b.n	800646a <prvDeleteTCB+0x5e>
	}
 800646c:	bf00      	nop
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800647a:	4b0c      	ldr	r3, [pc, #48]	; (80064ac <prvResetNextTaskUnblockTime+0x38>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d104      	bne.n	800648e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006484:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <prvResetNextTaskUnblockTime+0x3c>)
 8006486:	f04f 32ff 	mov.w	r2, #4294967295
 800648a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800648c:	e008      	b.n	80064a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800648e:	4b07      	ldr	r3, [pc, #28]	; (80064ac <prvResetNextTaskUnblockTime+0x38>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	4a04      	ldr	r2, [pc, #16]	; (80064b0 <prvResetNextTaskUnblockTime+0x3c>)
 800649e:	6013      	str	r3, [r2, #0]
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	20000a84 	.word	0x20000a84
 80064b0:	20000aec 	.word	0x20000aec

080064b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80064ba:	4b0b      	ldr	r3, [pc, #44]	; (80064e8 <xTaskGetSchedulerState+0x34>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d102      	bne.n	80064c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80064c2:	2301      	movs	r3, #1
 80064c4:	607b      	str	r3, [r7, #4]
 80064c6:	e008      	b.n	80064da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064c8:	4b08      	ldr	r3, [pc, #32]	; (80064ec <xTaskGetSchedulerState+0x38>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d102      	bne.n	80064d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80064d0:	2302      	movs	r3, #2
 80064d2:	607b      	str	r3, [r7, #4]
 80064d4:	e001      	b.n	80064da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80064d6:	2300      	movs	r3, #0
 80064d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80064da:	687b      	ldr	r3, [r7, #4]
	}
 80064dc:	4618      	mov	r0, r3
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	20000ad8 	.word	0x20000ad8
 80064ec:	20000af4 	.word	0x20000af4

080064f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80064fc:	2300      	movs	r3, #0
 80064fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d06e      	beq.n	80065e4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006506:	4b3a      	ldr	r3, [pc, #232]	; (80065f0 <xTaskPriorityDisinherit+0x100>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	429a      	cmp	r2, r3
 800650e:	d00a      	beq.n	8006526 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	60fb      	str	r3, [r7, #12]
}
 8006522:	bf00      	nop
 8006524:	e7fe      	b.n	8006524 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10a      	bne.n	8006544 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	60bb      	str	r3, [r7, #8]
}
 8006540:	bf00      	nop
 8006542:	e7fe      	b.n	8006542 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006548:	1e5a      	subs	r2, r3, #1
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006556:	429a      	cmp	r2, r3
 8006558:	d044      	beq.n	80065e4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655e:	2b00      	cmp	r3, #0
 8006560:	d140      	bne.n	80065e4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	3304      	adds	r3, #4
 8006566:	4618      	mov	r0, r3
 8006568:	f7fe fceb 	bl	8004f42 <uxListRemove>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d115      	bne.n	800659e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006576:	491f      	ldr	r1, [pc, #124]	; (80065f4 <xTaskPriorityDisinherit+0x104>)
 8006578:	4613      	mov	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	440b      	add	r3, r1
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10a      	bne.n	800659e <xTaskPriorityDisinherit+0xae>
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	2201      	movs	r2, #1
 800658e:	fa02 f303 	lsl.w	r3, r2, r3
 8006592:	43da      	mvns	r2, r3
 8006594:	4b18      	ldr	r3, [pc, #96]	; (80065f8 <xTaskPriorityDisinherit+0x108>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4013      	ands	r3, r2
 800659a:	4a17      	ldr	r2, [pc, #92]	; (80065f8 <xTaskPriorityDisinherit+0x108>)
 800659c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065aa:	f1c3 0207 	rsb	r2, r3, #7
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b6:	2201      	movs	r2, #1
 80065b8:	409a      	lsls	r2, r3
 80065ba:	4b0f      	ldr	r3, [pc, #60]	; (80065f8 <xTaskPriorityDisinherit+0x108>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4313      	orrs	r3, r2
 80065c0:	4a0d      	ldr	r2, [pc, #52]	; (80065f8 <xTaskPriorityDisinherit+0x108>)
 80065c2:	6013      	str	r3, [r2, #0]
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c8:	4613      	mov	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4a08      	ldr	r2, [pc, #32]	; (80065f4 <xTaskPriorityDisinherit+0x104>)
 80065d2:	441a      	add	r2, r3
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	3304      	adds	r3, #4
 80065d8:	4619      	mov	r1, r3
 80065da:	4610      	mov	r0, r2
 80065dc:	f7fe fc54 	bl	8004e88 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80065e0:	2301      	movs	r3, #1
 80065e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80065e4:	697b      	ldr	r3, [r7, #20]
	}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	200009cc 	.word	0x200009cc
 80065f4:	200009d0 	.word	0x200009d0
 80065f8:	20000ad4 	.word	0x20000ad4

080065fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006606:	4b29      	ldr	r3, [pc, #164]	; (80066ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800660c:	4b28      	ldr	r3, [pc, #160]	; (80066b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3304      	adds	r3, #4
 8006612:	4618      	mov	r0, r3
 8006614:	f7fe fc95 	bl	8004f42 <uxListRemove>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10b      	bne.n	8006636 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800661e:	4b24      	ldr	r3, [pc, #144]	; (80066b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	2201      	movs	r2, #1
 8006626:	fa02 f303 	lsl.w	r3, r2, r3
 800662a:	43da      	mvns	r2, r3
 800662c:	4b21      	ldr	r3, [pc, #132]	; (80066b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4013      	ands	r3, r2
 8006632:	4a20      	ldr	r2, [pc, #128]	; (80066b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006634:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663c:	d10a      	bne.n	8006654 <prvAddCurrentTaskToDelayedList+0x58>
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006644:	4b1a      	ldr	r3, [pc, #104]	; (80066b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3304      	adds	r3, #4
 800664a:	4619      	mov	r1, r3
 800664c:	481a      	ldr	r0, [pc, #104]	; (80066b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800664e:	f7fe fc1b 	bl	8004e88 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006652:	e026      	b.n	80066a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4413      	add	r3, r2
 800665a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800665c:	4b14      	ldr	r3, [pc, #80]	; (80066b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	429a      	cmp	r2, r3
 800666a:	d209      	bcs.n	8006680 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800666c:	4b13      	ldr	r3, [pc, #76]	; (80066bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	4b0f      	ldr	r3, [pc, #60]	; (80066b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3304      	adds	r3, #4
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f7fe fc29 	bl	8004ed0 <vListInsert>
}
 800667e:	e010      	b.n	80066a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006680:	4b0f      	ldr	r3, [pc, #60]	; (80066c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	4b0a      	ldr	r3, [pc, #40]	; (80066b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3304      	adds	r3, #4
 800668a:	4619      	mov	r1, r3
 800668c:	4610      	mov	r0, r2
 800668e:	f7fe fc1f 	bl	8004ed0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006692:	4b0c      	ldr	r3, [pc, #48]	; (80066c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	429a      	cmp	r2, r3
 800669a:	d202      	bcs.n	80066a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800669c:	4a09      	ldr	r2, [pc, #36]	; (80066c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	6013      	str	r3, [r2, #0]
}
 80066a2:	bf00      	nop
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	20000ad0 	.word	0x20000ad0
 80066b0:	200009cc 	.word	0x200009cc
 80066b4:	20000ad4 	.word	0x20000ad4
 80066b8:	20000ab8 	.word	0x20000ab8
 80066bc:	20000a88 	.word	0x20000a88
 80066c0:	20000a84 	.word	0x20000a84
 80066c4:	20000aec 	.word	0x20000aec

080066c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	3b04      	subs	r3, #4
 80066d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80066e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	3b04      	subs	r3, #4
 80066e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	f023 0201 	bic.w	r2, r3, #1
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3b04      	subs	r3, #4
 80066f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066f8:	4a0c      	ldr	r2, [pc, #48]	; (800672c <pxPortInitialiseStack+0x64>)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	3b14      	subs	r3, #20
 8006702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	3b04      	subs	r3, #4
 800670e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f06f 0202 	mvn.w	r2, #2
 8006716:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	3b20      	subs	r3, #32
 800671c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800671e:	68fb      	ldr	r3, [r7, #12]
}
 8006720:	4618      	mov	r0, r3
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	08006731 	.word	0x08006731

08006730 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006736:	2300      	movs	r3, #0
 8006738:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800673a:	4b12      	ldr	r3, [pc, #72]	; (8006784 <prvTaskExitError+0x54>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006742:	d00a      	beq.n	800675a <prvTaskExitError+0x2a>
	__asm volatile
 8006744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	60fb      	str	r3, [r7, #12]
}
 8006756:	bf00      	nop
 8006758:	e7fe      	b.n	8006758 <prvTaskExitError+0x28>
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	60bb      	str	r3, [r7, #8]
}
 800676c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800676e:	bf00      	nop
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d0fc      	beq.n	8006770 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006776:	bf00      	nop
 8006778:	bf00      	nop
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	2000000c 	.word	0x2000000c
	...

08006790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006790:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <pxCurrentTCBConst2>)
 8006792:	6819      	ldr	r1, [r3, #0]
 8006794:	6808      	ldr	r0, [r1, #0]
 8006796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679a:	f380 8809 	msr	PSP, r0
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f04f 0000 	mov.w	r0, #0
 80067a6:	f380 8811 	msr	BASEPRI, r0
 80067aa:	4770      	bx	lr
 80067ac:	f3af 8000 	nop.w

080067b0 <pxCurrentTCBConst2>:
 80067b0:	200009cc 	.word	0x200009cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop

080067b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80067b8:	4808      	ldr	r0, [pc, #32]	; (80067dc <prvPortStartFirstTask+0x24>)
 80067ba:	6800      	ldr	r0, [r0, #0]
 80067bc:	6800      	ldr	r0, [r0, #0]
 80067be:	f380 8808 	msr	MSP, r0
 80067c2:	f04f 0000 	mov.w	r0, #0
 80067c6:	f380 8814 	msr	CONTROL, r0
 80067ca:	b662      	cpsie	i
 80067cc:	b661      	cpsie	f
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	df00      	svc	0
 80067d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067da:	bf00      	nop
 80067dc:	e000ed08 	.word	0xe000ed08

080067e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80067e6:	4b46      	ldr	r3, [pc, #280]	; (8006900 <xPortStartScheduler+0x120>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a46      	ldr	r2, [pc, #280]	; (8006904 <xPortStartScheduler+0x124>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d10a      	bne.n	8006806 <xPortStartScheduler+0x26>
	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	613b      	str	r3, [r7, #16]
}
 8006802:	bf00      	nop
 8006804:	e7fe      	b.n	8006804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006806:	4b3e      	ldr	r3, [pc, #248]	; (8006900 <xPortStartScheduler+0x120>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a3f      	ldr	r2, [pc, #252]	; (8006908 <xPortStartScheduler+0x128>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d10a      	bne.n	8006826 <xPortStartScheduler+0x46>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	60fb      	str	r3, [r7, #12]
}
 8006822:	bf00      	nop
 8006824:	e7fe      	b.n	8006824 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006826:	4b39      	ldr	r3, [pc, #228]	; (800690c <xPortStartScheduler+0x12c>)
 8006828:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	22ff      	movs	r2, #255	; 0xff
 8006836:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	b2db      	uxtb	r3, r3
 800683e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	b2db      	uxtb	r3, r3
 8006844:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006848:	b2da      	uxtb	r2, r3
 800684a:	4b31      	ldr	r3, [pc, #196]	; (8006910 <xPortStartScheduler+0x130>)
 800684c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800684e:	4b31      	ldr	r3, [pc, #196]	; (8006914 <xPortStartScheduler+0x134>)
 8006850:	2207      	movs	r2, #7
 8006852:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006854:	e009      	b.n	800686a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006856:	4b2f      	ldr	r3, [pc, #188]	; (8006914 <xPortStartScheduler+0x134>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3b01      	subs	r3, #1
 800685c:	4a2d      	ldr	r2, [pc, #180]	; (8006914 <xPortStartScheduler+0x134>)
 800685e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	b2db      	uxtb	r3, r3
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	b2db      	uxtb	r3, r3
 8006868:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800686a:	78fb      	ldrb	r3, [r7, #3]
 800686c:	b2db      	uxtb	r3, r3
 800686e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006872:	2b80      	cmp	r3, #128	; 0x80
 8006874:	d0ef      	beq.n	8006856 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006876:	4b27      	ldr	r3, [pc, #156]	; (8006914 <xPortStartScheduler+0x134>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f1c3 0307 	rsb	r3, r3, #7
 800687e:	2b04      	cmp	r3, #4
 8006880:	d00a      	beq.n	8006898 <xPortStartScheduler+0xb8>
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	60bb      	str	r3, [r7, #8]
}
 8006894:	bf00      	nop
 8006896:	e7fe      	b.n	8006896 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006898:	4b1e      	ldr	r3, [pc, #120]	; (8006914 <xPortStartScheduler+0x134>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	021b      	lsls	r3, r3, #8
 800689e:	4a1d      	ldr	r2, [pc, #116]	; (8006914 <xPortStartScheduler+0x134>)
 80068a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068a2:	4b1c      	ldr	r3, [pc, #112]	; (8006914 <xPortStartScheduler+0x134>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068aa:	4a1a      	ldr	r2, [pc, #104]	; (8006914 <xPortStartScheduler+0x134>)
 80068ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068b6:	4b18      	ldr	r3, [pc, #96]	; (8006918 <xPortStartScheduler+0x138>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a17      	ldr	r2, [pc, #92]	; (8006918 <xPortStartScheduler+0x138>)
 80068bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068c2:	4b15      	ldr	r3, [pc, #84]	; (8006918 <xPortStartScheduler+0x138>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a14      	ldr	r2, [pc, #80]	; (8006918 <xPortStartScheduler+0x138>)
 80068c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80068cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068ce:	f000 f8dd 	bl	8006a8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068d2:	4b12      	ldr	r3, [pc, #72]	; (800691c <xPortStartScheduler+0x13c>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80068d8:	f000 f8fc 	bl	8006ad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068dc:	4b10      	ldr	r3, [pc, #64]	; (8006920 <xPortStartScheduler+0x140>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a0f      	ldr	r2, [pc, #60]	; (8006920 <xPortStartScheduler+0x140>)
 80068e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80068e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80068e8:	f7ff ff66 	bl	80067b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80068ec:	f7ff fb80 	bl	8005ff0 <vTaskSwitchContext>
	prvTaskExitError();
 80068f0:	f7ff ff1e 	bl	8006730 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	e000ed00 	.word	0xe000ed00
 8006904:	410fc271 	.word	0x410fc271
 8006908:	410fc270 	.word	0x410fc270
 800690c:	e000e400 	.word	0xe000e400
 8006910:	20000b00 	.word	0x20000b00
 8006914:	20000b04 	.word	0x20000b04
 8006918:	e000ed20 	.word	0xe000ed20
 800691c:	2000000c 	.word	0x2000000c
 8006920:	e000ef34 	.word	0xe000ef34

08006924 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
	__asm volatile
 800692a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	607b      	str	r3, [r7, #4]
}
 800693c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800693e:	4b0f      	ldr	r3, [pc, #60]	; (800697c <vPortEnterCritical+0x58>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3301      	adds	r3, #1
 8006944:	4a0d      	ldr	r2, [pc, #52]	; (800697c <vPortEnterCritical+0x58>)
 8006946:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006948:	4b0c      	ldr	r3, [pc, #48]	; (800697c <vPortEnterCritical+0x58>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d10f      	bne.n	8006970 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006950:	4b0b      	ldr	r3, [pc, #44]	; (8006980 <vPortEnterCritical+0x5c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <vPortEnterCritical+0x4c>
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	603b      	str	r3, [r7, #0]
}
 800696c:	bf00      	nop
 800696e:	e7fe      	b.n	800696e <vPortEnterCritical+0x4a>
	}
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	2000000c 	.word	0x2000000c
 8006980:	e000ed04 	.word	0xe000ed04

08006984 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800698a:	4b12      	ldr	r3, [pc, #72]	; (80069d4 <vPortExitCritical+0x50>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10a      	bne.n	80069a8 <vPortExitCritical+0x24>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	607b      	str	r3, [r7, #4]
}
 80069a4:	bf00      	nop
 80069a6:	e7fe      	b.n	80069a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80069a8:	4b0a      	ldr	r3, [pc, #40]	; (80069d4 <vPortExitCritical+0x50>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	4a09      	ldr	r2, [pc, #36]	; (80069d4 <vPortExitCritical+0x50>)
 80069b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069b2:	4b08      	ldr	r3, [pc, #32]	; (80069d4 <vPortExitCritical+0x50>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d105      	bne.n	80069c6 <vPortExitCritical+0x42>
 80069ba:	2300      	movs	r3, #0
 80069bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80069c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	2000000c 	.word	0x2000000c
	...

080069e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069e0:	f3ef 8009 	mrs	r0, PSP
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	4b15      	ldr	r3, [pc, #84]	; (8006a40 <pxCurrentTCBConst>)
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	f01e 0f10 	tst.w	lr, #16
 80069f0:	bf08      	it	eq
 80069f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fa:	6010      	str	r0, [r2, #0]
 80069fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a04:	f380 8811 	msr	BASEPRI, r0
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f7ff faee 	bl	8005ff0 <vTaskSwitchContext>
 8006a14:	f04f 0000 	mov.w	r0, #0
 8006a18:	f380 8811 	msr	BASEPRI, r0
 8006a1c:	bc09      	pop	{r0, r3}
 8006a1e:	6819      	ldr	r1, [r3, #0]
 8006a20:	6808      	ldr	r0, [r1, #0]
 8006a22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a26:	f01e 0f10 	tst.w	lr, #16
 8006a2a:	bf08      	it	eq
 8006a2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a30:	f380 8809 	msr	PSP, r0
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	f3af 8000 	nop.w

08006a40 <pxCurrentTCBConst>:
 8006a40:	200009cc 	.word	0x200009cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop

08006a48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	607b      	str	r3, [r7, #4]
}
 8006a60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a62:	f7ff fa0d 	bl	8005e80 <xTaskIncrementTick>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a6c:	4b06      	ldr	r3, [pc, #24]	; (8006a88 <SysTick_Handler+0x40>)
 8006a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	2300      	movs	r3, #0
 8006a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	f383 8811 	msr	BASEPRI, r3
}
 8006a7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	e000ed04 	.word	0xe000ed04

08006a8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a90:	4b0b      	ldr	r3, [pc, #44]	; (8006ac0 <vPortSetupTimerInterrupt+0x34>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a96:	4b0b      	ldr	r3, [pc, #44]	; (8006ac4 <vPortSetupTimerInterrupt+0x38>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a9c:	4b0a      	ldr	r3, [pc, #40]	; (8006ac8 <vPortSetupTimerInterrupt+0x3c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a0a      	ldr	r2, [pc, #40]	; (8006acc <vPortSetupTimerInterrupt+0x40>)
 8006aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa6:	099b      	lsrs	r3, r3, #6
 8006aa8:	4a09      	ldr	r2, [pc, #36]	; (8006ad0 <vPortSetupTimerInterrupt+0x44>)
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006aae:	4b04      	ldr	r3, [pc, #16]	; (8006ac0 <vPortSetupTimerInterrupt+0x34>)
 8006ab0:	2207      	movs	r2, #7
 8006ab2:	601a      	str	r2, [r3, #0]
}
 8006ab4:	bf00      	nop
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	e000e010 	.word	0xe000e010
 8006ac4:	e000e018 	.word	0xe000e018
 8006ac8:	20000000 	.word	0x20000000
 8006acc:	10624dd3 	.word	0x10624dd3
 8006ad0:	e000e014 	.word	0xe000e014

08006ad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ad4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ae4 <vPortEnableVFP+0x10>
 8006ad8:	6801      	ldr	r1, [r0, #0]
 8006ada:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006ade:	6001      	str	r1, [r0, #0]
 8006ae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ae2:	bf00      	nop
 8006ae4:	e000ed88 	.word	0xe000ed88

08006ae8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08a      	sub	sp, #40	; 0x28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006af0:	2300      	movs	r3, #0
 8006af2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006af4:	f7ff f91a 	bl	8005d2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006af8:	4b5b      	ldr	r3, [pc, #364]	; (8006c68 <pvPortMalloc+0x180>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b00:	f000 f920 	bl	8006d44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b04:	4b59      	ldr	r3, [pc, #356]	; (8006c6c <pvPortMalloc+0x184>)
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f040 8093 	bne.w	8006c38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d01d      	beq.n	8006b54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006b18:	2208      	movs	r2, #8
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d014      	beq.n	8006b54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f023 0307 	bic.w	r3, r3, #7
 8006b30:	3308      	adds	r3, #8
 8006b32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f003 0307 	and.w	r3, r3, #7
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00a      	beq.n	8006b54 <pvPortMalloc+0x6c>
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	617b      	str	r3, [r7, #20]
}
 8006b50:	bf00      	nop
 8006b52:	e7fe      	b.n	8006b52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d06e      	beq.n	8006c38 <pvPortMalloc+0x150>
 8006b5a:	4b45      	ldr	r3, [pc, #276]	; (8006c70 <pvPortMalloc+0x188>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d869      	bhi.n	8006c38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b64:	4b43      	ldr	r3, [pc, #268]	; (8006c74 <pvPortMalloc+0x18c>)
 8006b66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b68:	4b42      	ldr	r3, [pc, #264]	; (8006c74 <pvPortMalloc+0x18c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b6e:	e004      	b.n	8006b7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d903      	bls.n	8006b8c <pvPortMalloc+0xa4>
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1f1      	bne.n	8006b70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b8c:	4b36      	ldr	r3, [pc, #216]	; (8006c68 <pvPortMalloc+0x180>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d050      	beq.n	8006c38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2208      	movs	r2, #8
 8006b9c:	4413      	add	r3, r2
 8006b9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	1ad2      	subs	r2, r2, r3
 8006bb0:	2308      	movs	r3, #8
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d91f      	bls.n	8006bf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	f003 0307 	and.w	r3, r3, #7
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00a      	beq.n	8006be0 <pvPortMalloc+0xf8>
	__asm volatile
 8006bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	613b      	str	r3, [r7, #16]
}
 8006bdc:	bf00      	nop
 8006bde:	e7fe      	b.n	8006bde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	1ad2      	subs	r2, r2, r3
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006bf2:	69b8      	ldr	r0, [r7, #24]
 8006bf4:	f000 f908 	bl	8006e08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006bf8:	4b1d      	ldr	r3, [pc, #116]	; (8006c70 <pvPortMalloc+0x188>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	4a1b      	ldr	r2, [pc, #108]	; (8006c70 <pvPortMalloc+0x188>)
 8006c04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c06:	4b1a      	ldr	r3, [pc, #104]	; (8006c70 <pvPortMalloc+0x188>)
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	4b1b      	ldr	r3, [pc, #108]	; (8006c78 <pvPortMalloc+0x190>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d203      	bcs.n	8006c1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c12:	4b17      	ldr	r3, [pc, #92]	; (8006c70 <pvPortMalloc+0x188>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a18      	ldr	r2, [pc, #96]	; (8006c78 <pvPortMalloc+0x190>)
 8006c18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	4b13      	ldr	r3, [pc, #76]	; (8006c6c <pvPortMalloc+0x184>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	431a      	orrs	r2, r3
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c2e:	4b13      	ldr	r3, [pc, #76]	; (8006c7c <pvPortMalloc+0x194>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3301      	adds	r3, #1
 8006c34:	4a11      	ldr	r2, [pc, #68]	; (8006c7c <pvPortMalloc+0x194>)
 8006c36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c38:	f7ff f886 	bl	8005d48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	f003 0307 	and.w	r3, r3, #7
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <pvPortMalloc+0x174>
	__asm volatile
 8006c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	60fb      	str	r3, [r7, #12]
}
 8006c58:	bf00      	nop
 8006c5a:	e7fe      	b.n	8006c5a <pvPortMalloc+0x172>
	return pvReturn;
 8006c5c:	69fb      	ldr	r3, [r7, #28]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3728      	adds	r7, #40	; 0x28
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20004710 	.word	0x20004710
 8006c6c:	20004724 	.word	0x20004724
 8006c70:	20004714 	.word	0x20004714
 8006c74:	20004708 	.word	0x20004708
 8006c78:	20004718 	.word	0x20004718
 8006c7c:	2000471c 	.word	0x2000471c

08006c80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d04d      	beq.n	8006d2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c92:	2308      	movs	r3, #8
 8006c94:	425b      	negs	r3, r3
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4413      	add	r3, r2
 8006c9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	4b24      	ldr	r3, [pc, #144]	; (8006d38 <vPortFree+0xb8>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10a      	bne.n	8006cc4 <vPortFree+0x44>
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	60fb      	str	r3, [r7, #12]
}
 8006cc0:	bf00      	nop
 8006cc2:	e7fe      	b.n	8006cc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00a      	beq.n	8006ce2 <vPortFree+0x62>
	__asm volatile
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	60bb      	str	r3, [r7, #8]
}
 8006cde:	bf00      	nop
 8006ce0:	e7fe      	b.n	8006ce0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	4b14      	ldr	r3, [pc, #80]	; (8006d38 <vPortFree+0xb8>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4013      	ands	r3, r2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d01e      	beq.n	8006d2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d11a      	bne.n	8006d2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	4b0e      	ldr	r3, [pc, #56]	; (8006d38 <vPortFree+0xb8>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	43db      	mvns	r3, r3
 8006d02:	401a      	ands	r2, r3
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d08:	f7ff f810 	bl	8005d2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	4b0a      	ldr	r3, [pc, #40]	; (8006d3c <vPortFree+0xbc>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4413      	add	r3, r2
 8006d16:	4a09      	ldr	r2, [pc, #36]	; (8006d3c <vPortFree+0xbc>)
 8006d18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d1a:	6938      	ldr	r0, [r7, #16]
 8006d1c:	f000 f874 	bl	8006e08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d20:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <vPortFree+0xc0>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3301      	adds	r3, #1
 8006d26:	4a06      	ldr	r2, [pc, #24]	; (8006d40 <vPortFree+0xc0>)
 8006d28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d2a:	f7ff f80d 	bl	8005d48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d2e:	bf00      	nop
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20004724 	.word	0x20004724
 8006d3c:	20004714 	.word	0x20004714
 8006d40:	20004720 	.word	0x20004720

08006d44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d50:	4b27      	ldr	r3, [pc, #156]	; (8006df0 <prvHeapInit+0xac>)
 8006d52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f003 0307 	and.w	r3, r3, #7
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00c      	beq.n	8006d78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3307      	adds	r3, #7
 8006d62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f023 0307 	bic.w	r3, r3, #7
 8006d6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	4a1f      	ldr	r2, [pc, #124]	; (8006df0 <prvHeapInit+0xac>)
 8006d74:	4413      	add	r3, r2
 8006d76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d7c:	4a1d      	ldr	r2, [pc, #116]	; (8006df4 <prvHeapInit+0xb0>)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d82:	4b1c      	ldr	r3, [pc, #112]	; (8006df4 <prvHeapInit+0xb0>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d90:	2208      	movs	r2, #8
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	1a9b      	subs	r3, r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0307 	bic.w	r3, r3, #7
 8006d9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4a15      	ldr	r2, [pc, #84]	; (8006df8 <prvHeapInit+0xb4>)
 8006da4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006da6:	4b14      	ldr	r3, [pc, #80]	; (8006df8 <prvHeapInit+0xb4>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2200      	movs	r2, #0
 8006dac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dae:	4b12      	ldr	r3, [pc, #72]	; (8006df8 <prvHeapInit+0xb4>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	1ad2      	subs	r2, r2, r3
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006dc4:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <prvHeapInit+0xb4>)
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	4a0a      	ldr	r2, [pc, #40]	; (8006dfc <prvHeapInit+0xb8>)
 8006dd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	4a09      	ldr	r2, [pc, #36]	; (8006e00 <prvHeapInit+0xbc>)
 8006dda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ddc:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <prvHeapInit+0xc0>)
 8006dde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006de2:	601a      	str	r2, [r3, #0]
}
 8006de4:	bf00      	nop
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	20000b08 	.word	0x20000b08
 8006df4:	20004708 	.word	0x20004708
 8006df8:	20004710 	.word	0x20004710
 8006dfc:	20004718 	.word	0x20004718
 8006e00:	20004714 	.word	0x20004714
 8006e04:	20004724 	.word	0x20004724

08006e08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e10:	4b28      	ldr	r3, [pc, #160]	; (8006eb4 <prvInsertBlockIntoFreeList+0xac>)
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	e002      	b.n	8006e1c <prvInsertBlockIntoFreeList+0x14>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d8f7      	bhi.n	8006e16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	4413      	add	r3, r2
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d108      	bne.n	8006e4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	441a      	add	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	441a      	add	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d118      	bne.n	8006e90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	4b15      	ldr	r3, [pc, #84]	; (8006eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d00d      	beq.n	8006e86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	441a      	add	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	e008      	b.n	8006e98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e86:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	e003      	b.n	8006e98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d002      	beq.n	8006ea6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ea6:	bf00      	nop
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	20004708 	.word	0x20004708
 8006eb8:	20004710 	.word	0x20004710

08006ebc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
    /* e.g. write a character to the USART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8006ec4:	1d39      	adds	r1, r7, #4
 8006ec6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006eca:	2201      	movs	r2, #1
 8006ecc:	4803      	ldr	r0, [pc, #12]	; (8006edc <__io_putchar+0x20>)
 8006ece:	f7fc fba4 	bl	800361a <HAL_UART_Transmit>

	return ch;
 8006ed2:	687b      	ldr	r3, [r7, #4]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	200003e4 	.word	0x200003e4

08006ee0 <vPrintString>:

/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	 * exclusion. */
	taskENTER_CRITICAL();
 8006ee8:	f7ff fd1c 	bl	8006924 <vPortEnterCritical>
	{
		printf( "%s", pcString );
 8006eec:	6879      	ldr	r1, [r7, #4]
 8006eee:	4807      	ldr	r0, [pc, #28]	; (8006f0c <vPrintString+0x2c>)
 8006ef0:	f001 f962 	bl	80081b8 <iprintf>
		fflush( stdout );
 8006ef4:	4b06      	ldr	r3, [pc, #24]	; (8006f10 <vPrintString+0x30>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f001 f874 	bl	8007fe8 <fflush>
	}
	taskEXIT_CRITICAL();
 8006f00:	f7ff fd40 	bl	8006984 <vPortExitCritical>
}
 8006f04:	bf00      	nop
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	08008f44 	.word	0x08008f44
 8006f10:	200000cc 	.word	0x200000cc

08006f14 <resetear_parametros>:
 *
 * @param[void]
 *
 * @return Función del tipo void.
 */
static void resetear_parametros(void) {
 8006f14:	b480      	push	{r7}
 8006f16:	af00      	add	r7, sp, #0
	RisingUp_Time = 0;
 8006f18:	4b0d      	ldr	r3, [pc, #52]	; (8006f50 <resetear_parametros+0x3c>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]
	FallingDown_Time = 0;
 8006f1e:	4b0d      	ldr	r3, [pc, #52]	; (8006f54 <resetear_parametros+0x40>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]
	if (Btn_State != BLOCKED)
 8006f24:	4b0c      	ldr	r3, [pc, #48]	; (8006f58 <resetear_parametros+0x44>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d002      	beq.n	8006f32 <resetear_parametros+0x1e>
		BtnPressed_Time = 0;
 8006f2c:	4b0b      	ldr	r3, [pc, #44]	; (8006f5c <resetear_parametros+0x48>)
 8006f2e:	2200      	movs	r2, #0
 8006f30:	601a      	str	r2, [r3, #0]
	rising_flag = 0;
 8006f32:	4b0b      	ldr	r3, [pc, #44]	; (8006f60 <resetear_parametros+0x4c>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	701a      	strb	r2, [r3, #0]
	buttonChange = 0;
 8006f38:	4b0a      	ldr	r3, [pc, #40]	; (8006f64 <resetear_parametros+0x50>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	701a      	strb	r2, [r3, #0]
	Btn_State = NONE;
 8006f3e:	4b06      	ldr	r3, [pc, #24]	; (8006f58 <resetear_parametros+0x44>)
 8006f40:	2204      	movs	r2, #4
 8006f42:	701a      	strb	r2, [r3, #0]
}
 8006f44:	bf00      	nop
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	2000472c 	.word	0x2000472c
 8006f54:	20004730 	.word	0x20004730
 8006f58:	20000014 	.word	0x20000014
 8006f5c:	20004734 	.word	0x20004734
 8006f60:	2000473c 	.word	0x2000473c
 8006f64:	20004745 	.word	0x20004745

08006f68 <process_button_state>:
 *
 * @param[enum Btn_Status] Estado del botón
 *
 * @return Función del tipo void.
 */
static void process_button_state(enum Btn_Status estadoButton) {
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	71fb      	strb	r3, [r7, #7]
	switch (estadoButton) {
 8006f72:	79fb      	ldrb	r3, [r7, #7]
 8006f74:	2b04      	cmp	r3, #4
 8006f76:	d865      	bhi.n	8007044 <process_button_state+0xdc>
 8006f78:	a201      	add	r2, pc, #4	; (adr r2, 8006f80 <process_button_state+0x18>)
 8006f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7e:	bf00      	nop
 8006f80:	08006f95 	.word	0x08006f95
 8006f84:	08006f9b 	.word	0x08006f9b
 8006f88:	08006fa1 	.word	0x08006fa1
 8006f8c:	08006fbb 	.word	0x08006fbb
 8006f90:	08006fc1 	.word	0x08006fc1
	case SHORTPRESSED:
		resetear_parametros();
 8006f94:	f7ff ffbe 	bl	8006f14 <resetear_parametros>
		break;
 8006f98:	e059      	b.n	800704e <process_button_state+0xe6>
	case LONGPRESSED:
		resetear_parametros();
 8006f9a:	f7ff ffbb 	bl	8006f14 <resetear_parametros>
		break;
 8006f9e:	e056      	b.n	800704e <process_button_state+0xe6>
	case BLOCKED:
		if (!rising_flag)
 8006fa0:	4b2d      	ldr	r3, [pc, #180]	; (8007058 <process_button_state+0xf0>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	f083 0301 	eor.w	r3, r3, #1
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <process_button_state+0x4a>
			resetear_parametros();
 8006fae:	f7ff ffb1 	bl	8006f14 <resetear_parametros>
		buttonChange = 0;
 8006fb2:	4b2a      	ldr	r3, [pc, #168]	; (800705c <process_button_state+0xf4>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	701a      	strb	r2, [r3, #0]
		break;
 8006fb8:	e049      	b.n	800704e <process_button_state+0xe6>
	case UNBLOCKED:
		resetear_parametros();
 8006fba:	f7ff ffab 	bl	8006f14 <resetear_parametros>
		break;
 8006fbe:	e046      	b.n	800704e <process_button_state+0xe6>
	case NONE:
		if (100 < BtnPressed_Time && BtnPressed_Time < 2000) {
 8006fc0:	4b27      	ldr	r3, [pc, #156]	; (8007060 <process_button_state+0xf8>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b64      	cmp	r3, #100	; 0x64
 8006fc6:	dd0b      	ble.n	8006fe0 <process_button_state+0x78>
 8006fc8:	4b25      	ldr	r3, [pc, #148]	; (8007060 <process_button_state+0xf8>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006fd0:	da06      	bge.n	8006fe0 <process_button_state+0x78>
			Btn_State = SHORTPRESSED;
 8006fd2:	4b24      	ldr	r3, [pc, #144]	; (8007064 <process_button_state+0xfc>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	701a      	strb	r2, [r3, #0]
			buttonChange = 1;
 8006fd8:	4b20      	ldr	r3, [pc, #128]	; (800705c <process_button_state+0xf4>)
 8006fda:	2201      	movs	r2, #1
 8006fdc:	701a      	strb	r2, [r3, #0]
 8006fde:	e030      	b.n	8007042 <process_button_state+0xda>
		}

		else if (2000 < BtnPressed_Time && BtnPressed_Time < 8000) {
 8006fe0:	4b1f      	ldr	r3, [pc, #124]	; (8007060 <process_button_state+0xf8>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006fe8:	dd0b      	ble.n	8007002 <process_button_state+0x9a>
 8006fea:	4b1d      	ldr	r3, [pc, #116]	; (8007060 <process_button_state+0xf8>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8006ff2:	da06      	bge.n	8007002 <process_button_state+0x9a>
			Btn_State = LONGPRESSED;
 8006ff4:	4b1b      	ldr	r3, [pc, #108]	; (8007064 <process_button_state+0xfc>)
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	701a      	strb	r2, [r3, #0]
			buttonChange = 1;
 8006ffa:	4b18      	ldr	r3, [pc, #96]	; (800705c <process_button_state+0xf4>)
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	701a      	strb	r2, [r3, #0]
 8007000:	e01f      	b.n	8007042 <process_button_state+0xda>
		} else if (BtnPressed_Time >= 8000) {
 8007002:	4b17      	ldr	r3, [pc, #92]	; (8007060 <process_button_state+0xf8>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800700a:	db06      	blt.n	800701a <process_button_state+0xb2>
			buttonChange = 1;
 800700c:	4b13      	ldr	r3, [pc, #76]	; (800705c <process_button_state+0xf4>)
 800700e:	2201      	movs	r2, #1
 8007010:	701a      	strb	r2, [r3, #0]
			Btn_State = UNBLOCKED;
 8007012:	4b14      	ldr	r3, [pc, #80]	; (8007064 <process_button_state+0xfc>)
 8007014:	2203      	movs	r2, #3
 8007016:	701a      	strb	r2, [r3, #0]
				&& ((HAL_GetTick() / portTICK_PERIOD_MS - RisingUp_Time) >= 8000)) {
			buttonChange = 1;
			Btn_State = BLOCKED;
		}

		break;
 8007018:	e018      	b.n	800704c <process_button_state+0xe4>
		} else if (RisingUp_Time != 0
 800701a:	4b13      	ldr	r3, [pc, #76]	; (8007068 <process_button_state+0x100>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d014      	beq.n	800704c <process_button_state+0xe4>
				&& ((HAL_GetTick() / portTICK_PERIOD_MS - RisingUp_Time) >= 8000)) {
 8007022:	f7fa f811 	bl	8001048 <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	4b0f      	ldr	r3, [pc, #60]	; (8007068 <process_button_state+0x100>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8007032:	d30b      	bcc.n	800704c <process_button_state+0xe4>
			buttonChange = 1;
 8007034:	4b09      	ldr	r3, [pc, #36]	; (800705c <process_button_state+0xf4>)
 8007036:	2201      	movs	r2, #1
 8007038:	701a      	strb	r2, [r3, #0]
			Btn_State = BLOCKED;
 800703a:	4b0a      	ldr	r3, [pc, #40]	; (8007064 <process_button_state+0xfc>)
 800703c:	2202      	movs	r2, #2
 800703e:	701a      	strb	r2, [r3, #0]
		break;
 8007040:	e004      	b.n	800704c <process_button_state+0xe4>
 8007042:	e003      	b.n	800704c <process_button_state+0xe4>
	default:
		Btn_State = NONE;
 8007044:	4b07      	ldr	r3, [pc, #28]	; (8007064 <process_button_state+0xfc>)
 8007046:	2204      	movs	r2, #4
 8007048:	701a      	strb	r2, [r3, #0]
		break;
 800704a:	e000      	b.n	800704e <process_button_state+0xe6>
		break;
 800704c:	bf00      	nop

	}
}
 800704e:	bf00      	nop
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	2000473c 	.word	0x2000473c
 800705c:	20004745 	.word	0x20004745
 8007060:	20004734 	.word	0x20004734
 8007064:	20000014 	.word	0x20000014
 8007068:	2000472c 	.word	0x2000472c

0800706c <updateButton>:

static void updateButton() {
 800706c:	b580      	push	{r7, lr}
 800706e:	af00      	add	r7, sp, #0
	aux = HAL_GetTick() / portTICK_PERIOD_MS; //Guarda el tiempo en el que se llama al callback.
 8007070:	f7f9 ffea 	bl	8001048 <HAL_GetTick>
 8007074:	4603      	mov	r3, r0
 8007076:	4a1a      	ldr	r2, [pc, #104]	; (80070e0 <updateButton+0x74>)
 8007078:	6013      	str	r3, [r2, #0]
	debounceFSM_update(&boton);
 800707a:	481a      	ldr	r0, [pc, #104]	; (80070e4 <updateButton+0x78>)
 800707c:	f000 fb66 	bl	800774c <debounceFSM_update>
	if (boton == BUTTON_DOWN && !rising_flag) {
 8007080:	4b18      	ldr	r3, [pc, #96]	; (80070e4 <updateButton+0x78>)
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b02      	cmp	r3, #2
 8007086:	d111      	bne.n	80070ac <updateButton+0x40>
 8007088:	4b17      	ldr	r3, [pc, #92]	; (80070e8 <updateButton+0x7c>)
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	f083 0301 	eor.w	r3, r3, #1
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00a      	beq.n	80070ac <updateButton+0x40>
		RisingUp_Time = aux;
 8007096:	4b12      	ldr	r3, [pc, #72]	; (80070e0 <updateButton+0x74>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a14      	ldr	r2, [pc, #80]	; (80070ec <updateButton+0x80>)
 800709c:	6013      	str	r3, [r2, #0]
		rising_flag = 1;
 800709e:	4b12      	ldr	r3, [pc, #72]	; (80070e8 <updateButton+0x7c>)
 80070a0:	2201      	movs	r2, #1
 80070a2:	701a      	strb	r2, [r3, #0]
		FallingDown_Time = 0;
 80070a4:	4b12      	ldr	r3, [pc, #72]	; (80070f0 <updateButton+0x84>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	601a      	str	r2, [r3, #0]
	} else if (boton == BUTTON_UP && rising_flag) {
		FallingDown_Time = aux;
		BtnPressed_Time = FallingDown_Time - RisingUp_Time;
		rising_flag = 0;
	}
}
 80070aa:	e016      	b.n	80070da <updateButton+0x6e>
	} else if (boton == BUTTON_UP && rising_flag) {
 80070ac:	4b0d      	ldr	r3, [pc, #52]	; (80070e4 <updateButton+0x78>)
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d112      	bne.n	80070da <updateButton+0x6e>
 80070b4:	4b0c      	ldr	r3, [pc, #48]	; (80070e8 <updateButton+0x7c>)
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00e      	beq.n	80070da <updateButton+0x6e>
		FallingDown_Time = aux;
 80070bc:	4b08      	ldr	r3, [pc, #32]	; (80070e0 <updateButton+0x74>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a0b      	ldr	r2, [pc, #44]	; (80070f0 <updateButton+0x84>)
 80070c2:	6013      	str	r3, [r2, #0]
		BtnPressed_Time = FallingDown_Time - RisingUp_Time;
 80070c4:	4b0a      	ldr	r3, [pc, #40]	; (80070f0 <updateButton+0x84>)
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	4b08      	ldr	r3, [pc, #32]	; (80070ec <updateButton+0x80>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	461a      	mov	r2, r3
 80070d0:	4b08      	ldr	r3, [pc, #32]	; (80070f4 <updateButton+0x88>)
 80070d2:	601a      	str	r2, [r3, #0]
		rising_flag = 0;
 80070d4:	4b04      	ldr	r3, [pc, #16]	; (80070e8 <updateButton+0x7c>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	701a      	strb	r2, [r3, #0]
}
 80070da:	bf00      	nop
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20004740 	.word	0x20004740
 80070e4:	20004744 	.word	0x20004744
 80070e8:	2000473c 	.word	0x2000473c
 80070ec:	2000472c 	.word	0x2000472c
 80070f0:	20004730 	.word	0x20004730
 80070f4:	20004734 	.word	0x20004734

080070f8 <vTask_OA_BTN>:
 *
 * @param[void *] Puntero a parámetros.
 *
 * @return Función del tipo void.
 */
void vTask_OA_BTN(void *pvParameters) {
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
	vPrintString(OABTN_WelcomeMsg);
 8007100:	4b15      	ldr	r3, [pc, #84]	; (8007158 <vTask_OA_BTN+0x60>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff feeb 	bl	8006ee0 <vPrintString>
	debounceFSM_init(&boton);
 800710a:	4814      	ldr	r0, [pc, #80]	; (800715c <vTask_OA_BTN+0x64>)
 800710c:	f000 fafa 	bl	8007704 <debounceFSM_init>
	while (1) {

		/*
		 * Actualiza el estado del botón
		 */
		updateButton();
 8007110:	f7ff ffac 	bl	800706c <updateButton>
		 * LONGPRESSED: El botón fue presionado entre 2000 y 8000 ms.
		 * BLOCKED: El botón se mantuvo presionado más de 8000 ms.
		 * UNBLOCKED: El botón estuvo en estado BLOCKED y posteriormente se liberó.
		 * NONE: El botón no fue presionado.
		 */
		process_button_state(Btn_State);
 8007114:	4b12      	ldr	r3, [pc, #72]	; (8007160 <vTask_OA_BTN+0x68>)
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	4618      	mov	r0, r3
 800711a:	f7ff ff25 	bl	8006f68 <process_button_state>
		/*
		 * Se encola la notificación del estado del botón
		 * objeto activo para ser leída por el objeto activo sys.
		 */
		if (Btn_State != NONE && buttonChange != 0) {
 800711e:	4b10      	ldr	r3, [pc, #64]	; (8007160 <vTask_OA_BTN+0x68>)
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	2b04      	cmp	r3, #4
 8007124:	d0f4      	beq.n	8007110 <vTask_OA_BTN+0x18>
 8007126:	4b0f      	ldr	r3, [pc, #60]	; (8007164 <vTask_OA_BTN+0x6c>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0f0      	beq.n	8007110 <vTask_OA_BTN+0x18>
			sd = xQueueSend(QueueBtnStatus, &Btn_State, 0);
 800712e:	4b0e      	ldr	r3, [pc, #56]	; (8007168 <vTask_OA_BTN+0x70>)
 8007130:	6818      	ldr	r0, [r3, #0]
 8007132:	2300      	movs	r3, #0
 8007134:	2200      	movs	r2, #0
 8007136:	490a      	ldr	r1, [pc, #40]	; (8007160 <vTask_OA_BTN+0x68>)
 8007138:	f7fd fff4 	bl	8005124 <xQueueGenericSend>
 800713c:	4603      	mov	r3, r0
 800713e:	4a0b      	ldr	r2, [pc, #44]	; (800716c <vTask_OA_BTN+0x74>)
 8007140:	6013      	str	r3, [r2, #0]
			assert(sd != 0); //Revisar que el mensaje se halla encolado correctamente.
 8007142:	4b0a      	ldr	r3, [pc, #40]	; (800716c <vTask_OA_BTN+0x74>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1e2      	bne.n	8007110 <vTask_OA_BTN+0x18>
 800714a:	4b09      	ldr	r3, [pc, #36]	; (8007170 <vTask_OA_BTN+0x78>)
 800714c:	4a09      	ldr	r2, [pc, #36]	; (8007174 <vTask_OA_BTN+0x7c>)
 800714e:	2195      	movs	r1, #149	; 0x95
 8007150:	4809      	ldr	r0, [pc, #36]	; (8007178 <vTask_OA_BTN+0x80>)
 8007152:	f000 fe7d 	bl	8007e50 <__assert_func>
 8007156:	bf00      	nop
 8007158:	20000010 	.word	0x20000010
 800715c:	20004744 	.word	0x20004744
 8007160:	20000014 	.word	0x20000014
 8007164:	20004745 	.word	0x20004745
 8007168:	20004728 	.word	0x20004728
 800716c:	20004738 	.word	0x20004738
 8007170:	08008fcc 	.word	0x08008fcc
 8007174:	08009140 	.word	0x08009140
 8007178:	08008fd4 	.word	0x08008fd4

0800717c <callbackLEDS>:
 *
 * @param[codigo_t ] El código del estado que debe tener el led
 *
 * @return Función del tipo void.
 */
static void callbackLEDS(led_t* leds) {
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
	if(leds->color==GREEN && leds->estado==ON)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	785b      	ldrb	r3, [r3, #1]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d107      	bne.n	800719c <callbackLEDS+0x20>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d103      	bne.n	800719c <callbackLEDS+0x20>
	{
		eboard_led_green(1);
 8007194:	2001      	movs	r0, #1
 8007196:	f000 fc43 	bl	8007a20 <eboard_led_green>
 800719a:	e023      	b.n	80071e4 <callbackLEDS+0x68>
	}
	else if(leds->color==GREEN && leds->estado==OFF)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	785b      	ldrb	r3, [r3, #1]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d107      	bne.n	80071b4 <callbackLEDS+0x38>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d103      	bne.n	80071b4 <callbackLEDS+0x38>
	{
		eboard_led_green(0);
 80071ac:	2000      	movs	r0, #0
 80071ae:	f000 fc37 	bl	8007a20 <eboard_led_green>
 80071b2:	e017      	b.n	80071e4 <callbackLEDS+0x68>
	}
	else if(leds->color==RED && leds->estado==ON)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	785b      	ldrb	r3, [r3, #1]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d107      	bne.n	80071cc <callbackLEDS+0x50>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d103      	bne.n	80071cc <callbackLEDS+0x50>
	{
		eboard_led_red(1);
 80071c4:	2001      	movs	r0, #1
 80071c6:	f000 fc1d 	bl	8007a04 <eboard_led_red>
 80071ca:	e00b      	b.n	80071e4 <callbackLEDS+0x68>
	}
	else if(leds->color==RED && leds->estado==OFF)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	785b      	ldrb	r3, [r3, #1]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d107      	bne.n	80071e4 <callbackLEDS+0x68>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d103      	bne.n	80071e4 <callbackLEDS+0x68>
	{
		eboard_led_red(0);
 80071dc:	2000      	movs	r0, #0
 80071de:	f000 fc11 	bl	8007a04 <eboard_led_red>
	}
}
 80071e2:	e7ff      	b.n	80071e4 <callbackLEDS+0x68>
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <task_delete_>:
/*!
 * @brief Elimina la tarea hijo
 *
 * @return Función del tipo void.
 */
static void task_delete_(void) {
 80071ec:	b580      	push	{r7, lr}
 80071ee:	af00      	add	r7, sp, #0
	ELOG("Borro una tarea");
	atencion.task_cnt--;
 80071f0:	4b04      	ldr	r3, [pc, #16]	; (8007204 <task_delete_+0x18>)
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	3b01      	subs	r3, #1
 80071f6:	4a03      	ldr	r2, [pc, #12]	; (8007204 <task_delete_+0x18>)
 80071f8:	6093      	str	r3, [r2, #8]
	ELOG("Cantidad de tareas: %d", atencion.task_cnt);
	vTaskDelete(NULL);
 80071fa:	2000      	movs	r0, #0
 80071fc:	f7fe fc66 	bl	8005acc <vTaskDelete>
}
 8007200:	bf00      	nop
 8007202:	bd80      	pop	{r7, pc}
 8007204:	2000474c 	.word	0x2000474c

08007208 <task_>:
/*!
 * @brief Task para llamar al callback mientras hayan clientes sin atender en la cola
 *@param[void *] Puntero a parámetros.
 * @return Función del tipo void.
 */
static void task_(void *argument) {
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
	led_t* client;
	while (true) {
		while (pdPASS == xQueueReceive(atencion.hclient_queue,&client , 0)) {
 8007210:	e011      	b.n	8007236 <task_+0x2e>
			ELOG("Código del estado del led: [%i]", client);

			atencion.client_cnt++;
 8007212:	4b10      	ldr	r3, [pc, #64]	; (8007254 <task_+0x4c>)
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	3301      	adds	r3, #1
 8007218:	4a0e      	ldr	r2, [pc, #56]	; (8007254 <task_+0x4c>)
 800721a:	60d3      	str	r3, [r2, #12]
			ELOG("Cantidad de estados leds siendo atendidos: %d", client->color);

			atencion.callback(client);
 800721c:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <task_+0x4c>)
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	4610      	mov	r0, r2
 8007224:	4798      	blx	r3
			//Tiempo que toma atender a un item led de la cola
			vTaskDelay((TickType_t) (TASK_PERIOD_MS_ / portTICK_PERIOD_MS));
 8007226:	200a      	movs	r0, #10
 8007228:	f7fe fce0 	bl	8005bec <vTaskDelay>
			ELOG("Fin de la atención del led: [%i]", client);

			atencion.client_cnt--;
 800722c:	4b09      	ldr	r3, [pc, #36]	; (8007254 <task_+0x4c>)
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	3b01      	subs	r3, #1
 8007232:	4a08      	ldr	r2, [pc, #32]	; (8007254 <task_+0x4c>)
 8007234:	60d3      	str	r3, [r2, #12]
		while (pdPASS == xQueueReceive(atencion.hclient_queue,&client , 0)) {
 8007236:	4b07      	ldr	r3, [pc, #28]	; (8007254 <task_+0x4c>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f107 010c 	add.w	r1, r7, #12
 800723e:	2200      	movs	r2, #0
 8007240:	4618      	mov	r0, r3
 8007242:	f7fe f86d 	bl	8005320 <xQueueReceive>
 8007246:	4603      	mov	r3, r0
 8007248:	2b01      	cmp	r3, #1
 800724a:	d0e2      	beq.n	8007212 <task_+0xa>
			ELOG("Cantidad de estados leds siendo atendidos: %d", atencion.client_cnt);
		}
		task_delete_();
 800724c:	f7ff ffce 	bl	80071ec <task_delete_>
		while (pdPASS == xQueueReceive(atencion.hclient_queue,&client , 0)) {
 8007250:	e7f1      	b.n	8007236 <task_+0x2e>
 8007252:	bf00      	nop
 8007254:	2000474c 	.word	0x2000474c

08007258 <task_create_>:
/*!
 * @brief Crea un task dinámico
 *
 * @return Función del tipo void.
 */
static bool task_create_(void) {
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af02      	add	r7, sp, #8
	if (atencion.task_cnt < MAX_THREADS_)
 800725e:	4b0f      	ldr	r3, [pc, #60]	; (800729c <task_create_+0x44>)
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d115      	bne.n	8007292 <task_create_+0x3a>
	{
		ELOG("Creo una tarea");
		atencion.task_cnt++;
 8007266:	4b0d      	ldr	r3, [pc, #52]	; (800729c <task_create_+0x44>)
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	3301      	adds	r3, #1
 800726c:	4a0b      	ldr	r2, [pc, #44]	; (800729c <task_create_+0x44>)
 800726e:	6093      	str	r3, [r2, #8]
		ELOG("Cantidad de tareas: %d", atencion.task_cnt);
		BaseType_t status;
		status = xTaskCreate(task_, "task_bank", 128, NULL,
 8007270:	2300      	movs	r3, #0
 8007272:	9301      	str	r3, [sp, #4]
 8007274:	2301      	movs	r3, #1
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	2300      	movs	r3, #0
 800727a:	2280      	movs	r2, #128	; 0x80
 800727c:	4908      	ldr	r1, [pc, #32]	; (80072a0 <task_create_+0x48>)
 800727e:	4809      	ldr	r0, [pc, #36]	; (80072a4 <task_create_+0x4c>)
 8007280:	f7fe fac5 	bl	800580e <xTaskCreate>
 8007284:	6078      	str	r0, [r7, #4]
				tskIDLE_PRIORITY + 1, NULL);
		while (pdPASS != status)
 8007286:	bf00      	nop
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d1fc      	bne.n	8007288 <task_create_+0x30>
		{
			ELOG("Error!!!");
			// error
		}
		return true;
 800728e:	2301      	movs	r3, #1
 8007290:	e000      	b.n	8007294 <task_create_+0x3c>
	}
	else
	{
		ELOG("No puedo crear nuevas tareas");
		return false;
 8007292:	2300      	movs	r3, #0
	}
}
 8007294:	4618      	mov	r0, r3
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	2000474c 	.word	0x2000474c
 80072a0:	08008ff0 	.word	0x08008ff0
 80072a4:	08007209 	.word	0x08007209

080072a8 <sendtoQueueHijo>:
 * @brief Envía puntero a una estructura con los datos del led a atender
 * @param[led_t *] La informacion del led.
 * @return Función del tipo void.
 */
static void sendtoQueueHijo(led_t* leds)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
	if (pdPASS== xQueueSend(atencion.hclient_queue,&leds, 0))
 80072b0:	4b09      	ldr	r3, [pc, #36]	; (80072d8 <sendtoQueueHijo+0x30>)
 80072b2:	6818      	ldr	r0, [r3, #0]
 80072b4:	1d39      	adds	r1, r7, #4
 80072b6:	2300      	movs	r3, #0
 80072b8:	2200      	movs	r2, #0
 80072ba:	f7fd ff33 	bl	8005124 <xQueueGenericSend>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d105      	bne.n	80072d0 <sendtoQueueHijo+0x28>
			{
				ELOG("Ingresa el cliente [%i] a la fila", codigo_recibido);
				if (0 == atencion.task_cnt)
 80072c4:	4b04      	ldr	r3, [pc, #16]	; (80072d8 <sendtoQueueHijo+0x30>)
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <sendtoQueueHijo+0x28>
				{
					if(!task_create_())
 80072cc:	f7ff ffc4 	bl	8007258 <task_create_>
			}
			else
			{
				ELOG("Error!!!");				//error
			}
}
 80072d0:	bf00      	nop
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	2000474c 	.word	0x2000474c

080072dc <decodificarLeds>:
/*!
 * @brief Decodifica el valor recibido
 * @param[codigo_t ] Codigo recibido desde OA_SYS.
 * @return Función del tipo void.
 */
static void decodificarLeds(codigo_t cod) {
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	4603      	mov	r3, r0
 80072e4:	71fb      	strb	r3, [r7, #7]
	switch (cod) {
 80072e6:	79fb      	ldrb	r3, [r7, #7]
 80072e8:	2b05      	cmp	r3, #5
 80072ea:	d85d      	bhi.n	80073a8 <decodificarLeds+0xcc>
 80072ec:	a201      	add	r2, pc, #4	; (adr r2, 80072f4 <decodificarLeds+0x18>)
 80072ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f2:	bf00      	nop
 80072f4:	0800730d 	.word	0x0800730d
 80072f8:	08007335 	.word	0x08007335
 80072fc:	08007321 	.word	0x08007321
 8007300:	08007349 	.word	0x08007349
 8007304:	0800735d 	.word	0x0800735d
 8007308:	08007383 	.word	0x08007383
					case GREEN_ON:
						infoLed.color = GREEN;
 800730c:	4b28      	ldr	r3, [pc, #160]	; (80073b0 <decodificarLeds+0xd4>)
 800730e:	2201      	movs	r2, #1
 8007310:	705a      	strb	r2, [r3, #1]
						infoLed.estado=ON;
 8007312:	4b27      	ldr	r3, [pc, #156]	; (80073b0 <decodificarLeds+0xd4>)
 8007314:	2200      	movs	r2, #0
 8007316:	701a      	strb	r2, [r3, #0]
						sendtoQueueHijo(&infoLed);
 8007318:	4825      	ldr	r0, [pc, #148]	; (80073b0 <decodificarLeds+0xd4>)
 800731a:	f7ff ffc5 	bl	80072a8 <sendtoQueueHijo>
						break;
 800731e:	e043      	b.n	80073a8 <decodificarLeds+0xcc>
					case GREEN_OFF:
						infoLed.color = GREEN;
 8007320:	4b23      	ldr	r3, [pc, #140]	; (80073b0 <decodificarLeds+0xd4>)
 8007322:	2201      	movs	r2, #1
 8007324:	705a      	strb	r2, [r3, #1]
						infoLed.estado=OFF;
 8007326:	4b22      	ldr	r3, [pc, #136]	; (80073b0 <decodificarLeds+0xd4>)
 8007328:	2201      	movs	r2, #1
 800732a:	701a      	strb	r2, [r3, #0]
						sendtoQueueHijo(&infoLed);
 800732c:	4820      	ldr	r0, [pc, #128]	; (80073b0 <decodificarLeds+0xd4>)
 800732e:	f7ff ffbb 	bl	80072a8 <sendtoQueueHijo>
						break;
 8007332:	e039      	b.n	80073a8 <decodificarLeds+0xcc>
					case RED_ON:
						infoLed.color = RED;
 8007334:	4b1e      	ldr	r3, [pc, #120]	; (80073b0 <decodificarLeds+0xd4>)
 8007336:	2200      	movs	r2, #0
 8007338:	705a      	strb	r2, [r3, #1]
						infoLed.estado=ON;
 800733a:	4b1d      	ldr	r3, [pc, #116]	; (80073b0 <decodificarLeds+0xd4>)
 800733c:	2200      	movs	r2, #0
 800733e:	701a      	strb	r2, [r3, #0]
						sendtoQueueHijo(&infoLed);
 8007340:	481b      	ldr	r0, [pc, #108]	; (80073b0 <decodificarLeds+0xd4>)
 8007342:	f7ff ffb1 	bl	80072a8 <sendtoQueueHijo>
						break;
 8007346:	e02f      	b.n	80073a8 <decodificarLeds+0xcc>
					case RED_OFF:
						infoLed.color = RED;
 8007348:	4b19      	ldr	r3, [pc, #100]	; (80073b0 <decodificarLeds+0xd4>)
 800734a:	2200      	movs	r2, #0
 800734c:	705a      	strb	r2, [r3, #1]
						infoLed.estado=OFF;
 800734e:	4b18      	ldr	r3, [pc, #96]	; (80073b0 <decodificarLeds+0xd4>)
 8007350:	2201      	movs	r2, #1
 8007352:	701a      	strb	r2, [r3, #0]
						sendtoQueueHijo(&infoLed);
 8007354:	4816      	ldr	r0, [pc, #88]	; (80073b0 <decodificarLeds+0xd4>)
 8007356:	f7ff ffa7 	bl	80072a8 <sendtoQueueHijo>
						break;
 800735a:	e025      	b.n	80073a8 <decodificarLeds+0xcc>
					case BOTH_ON:
						infoLed.color = GREEN;
 800735c:	4b14      	ldr	r3, [pc, #80]	; (80073b0 <decodificarLeds+0xd4>)
 800735e:	2201      	movs	r2, #1
 8007360:	705a      	strb	r2, [r3, #1]
						infoLed.estado=ON;
 8007362:	4b13      	ldr	r3, [pc, #76]	; (80073b0 <decodificarLeds+0xd4>)
 8007364:	2200      	movs	r2, #0
 8007366:	701a      	strb	r2, [r3, #0]
						sendtoQueueHijo(&infoLed);
 8007368:	4811      	ldr	r0, [pc, #68]	; (80073b0 <decodificarLeds+0xd4>)
 800736a:	f7ff ff9d 	bl	80072a8 <sendtoQueueHijo>
						infoLed2.color = RED;
 800736e:	4b11      	ldr	r3, [pc, #68]	; (80073b4 <decodificarLeds+0xd8>)
 8007370:	2200      	movs	r2, #0
 8007372:	705a      	strb	r2, [r3, #1]
						infoLed2.estado=ON;
 8007374:	4b0f      	ldr	r3, [pc, #60]	; (80073b4 <decodificarLeds+0xd8>)
 8007376:	2200      	movs	r2, #0
 8007378:	701a      	strb	r2, [r3, #0]
						sendtoQueueHijo(&infoLed2);
 800737a:	480e      	ldr	r0, [pc, #56]	; (80073b4 <decodificarLeds+0xd8>)
 800737c:	f7ff ff94 	bl	80072a8 <sendtoQueueHijo>
						break;
 8007380:	e012      	b.n	80073a8 <decodificarLeds+0xcc>
					case BOTH_OFF:
						infoLed.color = GREEN;
 8007382:	4b0b      	ldr	r3, [pc, #44]	; (80073b0 <decodificarLeds+0xd4>)
 8007384:	2201      	movs	r2, #1
 8007386:	705a      	strb	r2, [r3, #1]
						infoLed.estado=OFF;
 8007388:	4b09      	ldr	r3, [pc, #36]	; (80073b0 <decodificarLeds+0xd4>)
 800738a:	2201      	movs	r2, #1
 800738c:	701a      	strb	r2, [r3, #0]
						sendtoQueueHijo(&infoLed);
 800738e:	4808      	ldr	r0, [pc, #32]	; (80073b0 <decodificarLeds+0xd4>)
 8007390:	f7ff ff8a 	bl	80072a8 <sendtoQueueHijo>
						infoLed2.color = RED;
 8007394:	4b07      	ldr	r3, [pc, #28]	; (80073b4 <decodificarLeds+0xd8>)
 8007396:	2200      	movs	r2, #0
 8007398:	705a      	strb	r2, [r3, #1]
						infoLed2.estado=OFF;
 800739a:	4b06      	ldr	r3, [pc, #24]	; (80073b4 <decodificarLeds+0xd8>)
 800739c:	2201      	movs	r2, #1
 800739e:	701a      	strb	r2, [r3, #0]
						sendtoQueueHijo(&infoLed2);
 80073a0:	4804      	ldr	r0, [pc, #16]	; (80073b4 <decodificarLeds+0xd8>)
 80073a2:	f7ff ff81 	bl	80072a8 <sendtoQueueHijo>
						break;
 80073a6:	bf00      	nop
					}
}
 80073a8:	bf00      	nop
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	2000475c 	.word	0x2000475c
 80073b4:	20004760 	.word	0x20004760

080073b8 <vTask_OA_LEDS>:
/*!
 * @brief Crea un task dinámico
 * @param[void *] Puntero a parámetros.
 * @return Función del tipo void.
 */
void vTask_OA_LEDS(void *pvParameters) {
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]

	codigo_t codigo_recibido;

	/*Creación de cola para task hijo*/
	QueueLED_hijo = xQueueCreate(2, sizeof(led_t*));
 80073c0:	2200      	movs	r2, #0
 80073c2:	2104      	movs	r1, #4
 80073c4:	2002      	movs	r0, #2
 80073c6:	f7fd fe4f 	bl	8005068 <xQueueGenericCreate>
 80073ca:	4603      	mov	r3, r0
 80073cc:	4a16      	ldr	r2, [pc, #88]	; (8007428 <vTask_OA_LEDS+0x70>)
 80073ce:	6013      	str	r3, [r2, #0]

	/* Check the queues was created successfully */
	configASSERT(QueueLED_hijo != NULL);
 80073d0:	4b15      	ldr	r3, [pc, #84]	; (8007428 <vTask_OA_LEDS+0x70>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10a      	bne.n	80073ee <vTask_OA_LEDS+0x36>
	__asm volatile
 80073d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073dc:	f383 8811 	msr	BASEPRI, r3
 80073e0:	f3bf 8f6f 	isb	sy
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	60fb      	str	r3, [r7, #12]
}
 80073ea:	bf00      	nop
 80073ec:	e7fe      	b.n	80073ec <vTask_OA_LEDS+0x34>

	/* We want this queue to be viewable in a RTOS kernel aware debugger, so register it. */
	vQueueAddToRegistry(QueueLED_hijo, "QueueLED_hijo");
 80073ee:	4b0e      	ldr	r3, [pc, #56]	; (8007428 <vTask_OA_LEDS+0x70>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	490e      	ldr	r1, [pc, #56]	; (800742c <vTask_OA_LEDS+0x74>)
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7fe f983 	bl	8005700 <vQueueAddToRegistry>

	atencion.hclient_queue = QueueLED_hijo;
 80073fa:	4b0b      	ldr	r3, [pc, #44]	; (8007428 <vTask_OA_LEDS+0x70>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a0c      	ldr	r2, [pc, #48]	; (8007430 <vTask_OA_LEDS+0x78>)
 8007400:	6013      	str	r3, [r2, #0]
	atencion.callback = callbackLEDS;
 8007402:	4b0b      	ldr	r3, [pc, #44]	; (8007430 <vTask_OA_LEDS+0x78>)
 8007404:	4a0b      	ldr	r2, [pc, #44]	; (8007434 <vTask_OA_LEDS+0x7c>)
 8007406:	605a      	str	r2, [r3, #4]
	while (1) {

		/*
		 * Recibe el estado del botón de la cola y lo envía a la cola de atención
		 */
		if (pdPASS == xQueueReceive(QueueLEDS, &codigo_recibido, 0))
 8007408:	4b0b      	ldr	r3, [pc, #44]	; (8007438 <vTask_OA_LEDS+0x80>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f107 010b 	add.w	r1, r7, #11
 8007410:	2200      	movs	r2, #0
 8007412:	4618      	mov	r0, r3
 8007414:	f7fd ff84 	bl	8005320 <xQueueReceive>
 8007418:	4603      	mov	r3, r0
 800741a:	2b01      	cmp	r3, #1
 800741c:	d1f4      	bne.n	8007408 <vTask_OA_LEDS+0x50>
		{
			decodificarLeds(codigo_recibido);
 800741e:	7afb      	ldrb	r3, [r7, #11]
 8007420:	4618      	mov	r0, r3
 8007422:	f7ff ff5b 	bl	80072dc <decodificarLeds>
		if (pdPASS == xQueueReceive(QueueLEDS, &codigo_recibido, 0))
 8007426:	e7ef      	b.n	8007408 <vTask_OA_LEDS+0x50>
 8007428:	20004748 	.word	0x20004748
 800742c:	08008ffc 	.word	0x08008ffc
 8007430:	2000474c 	.word	0x2000474c
 8007434:	0800717d 	.word	0x0800717d
 8007438:	20004770 	.word	0x20004770

0800743c <sendToLeds_cod>:
 * @param[codigo_t ] El código del estado que debe tener el led
 *
 * @return Función del tipo void.
 */
static void sendToLeds_cod(codigo_t codigo)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	4603      	mov	r3, r0
 8007444:	71fb      	strb	r3, [r7, #7]
	if(pdPASS==xQueueSend(QueueLEDS, &codigo, 0))
 8007446:	4b05      	ldr	r3, [pc, #20]	; (800745c <sendToLeds_cod+0x20>)
 8007448:	6818      	ldr	r0, [r3, #0]
 800744a:	1df9      	adds	r1, r7, #7
 800744c:	2300      	movs	r3, #0
 800744e:	2200      	movs	r2, #0
 8007450:	f7fd fe68 	bl	8005124 <xQueueGenericSend>
	else
	{
		ELOG("Error!!!");//error
	}

}
 8007454:	bf00      	nop
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	20004770 	.word	0x20004770

08007460 <vTask_OA_SYS>:
 * @brief OA_SYS procesa el código recibido del botón
 * @param[void *] Puntero a parámetros.
 * @return Función del tipo void.
 */
void vTask_OA_SYS(void *pvParameters)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]

	enum Btn_Status estadoBoton; //Variable que almacena la notificación de la cola que contiene el estado del botón

	while(1)
	{
		if(pdPASS==xQueueReceive(QueueBtnStatus, &estadoBoton, 0))
 8007468:	4b20      	ldr	r3, [pc, #128]	; (80074ec <vTask_OA_SYS+0x8c>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f107 010f 	add.w	r1, r7, #15
 8007470:	2200      	movs	r2, #0
 8007472:	4618      	mov	r0, r3
 8007474:	f7fd ff54 	bl	8005320 <xQueueReceive>
 8007478:	4603      	mov	r3, r0
 800747a:	2b01      	cmp	r3, #1
 800747c:	d1f4      	bne.n	8007468 <vTask_OA_SYS+0x8>
		{
			switch (estadoBoton) {
 800747e:	7bfb      	ldrb	r3, [r7, #15]
 8007480:	2b04      	cmp	r3, #4
 8007482:	d831      	bhi.n	80074e8 <vTask_OA_SYS+0x88>
 8007484:	a201      	add	r2, pc, #4	; (adr r2, 800748c <vTask_OA_SYS+0x2c>)
 8007486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748a:	bf00      	nop
 800748c:	080074a1 	.word	0x080074a1
 8007490:	080074bd 	.word	0x080074bd
 8007494:	080074d9 	.word	0x080074d9
 8007498:	080074e1 	.word	0x080074e1
 800749c:	080074e9 	.word	0x080074e9
				case SHORTPRESSED: // Toggle Led Verde
					if(eboard_gpio_read(EBOARD_GPIO_LEDG))
 80074a0:	2001      	movs	r0, #1
 80074a2:	f000 fa93 	bl	80079cc <eboard_gpio_read>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <vTask_OA_SYS+0x54>
					sendToLeds_cod(GREEN_OFF);
 80074ac:	2002      	movs	r0, #2
 80074ae:	f7ff ffc5 	bl	800743c <sendToLeds_cod>
					else
					sendToLeds_cod(GREEN_ON);
					break;
 80074b2:	e01a      	b.n	80074ea <vTask_OA_SYS+0x8a>
					sendToLeds_cod(GREEN_ON);
 80074b4:	2000      	movs	r0, #0
 80074b6:	f7ff ffc1 	bl	800743c <sendToLeds_cod>
					break;
 80074ba:	e016      	b.n	80074ea <vTask_OA_SYS+0x8a>
				case LONGPRESSED: // Toggle Led Rojo
					if(eboard_gpio_read(EBOARD_GPIO_LEDR))
 80074bc:	2000      	movs	r0, #0
 80074be:	f000 fa85 	bl	80079cc <eboard_gpio_read>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <vTask_OA_SYS+0x70>
					sendToLeds_cod(RED_OFF);
 80074c8:	2003      	movs	r0, #3
 80074ca:	f7ff ffb7 	bl	800743c <sendToLeds_cod>
					else
					sendToLeds_cod(RED_ON);
					break;
 80074ce:	e00c      	b.n	80074ea <vTask_OA_SYS+0x8a>
					sendToLeds_cod(RED_ON);
 80074d0:	2001      	movs	r0, #1
 80074d2:	f7ff ffb3 	bl	800743c <sendToLeds_cod>
					break;
 80074d6:	e008      	b.n	80074ea <vTask_OA_SYS+0x8a>
				case BLOCKED: // Encender los dos Leds
					sendToLeds_cod(BOTH_ON);
 80074d8:	2004      	movs	r0, #4
 80074da:	f7ff ffaf 	bl	800743c <sendToLeds_cod>
					break;
 80074de:	e004      	b.n	80074ea <vTask_OA_SYS+0x8a>
				case UNBLOCKED: //Apagar los dos leds
					sendToLeds_cod(BOTH_OFF);
 80074e0:	2005      	movs	r0, #5
 80074e2:	f7ff ffab 	bl	800743c <sendToLeds_cod>
					break;
 80074e6:	e000      	b.n	80074ea <vTask_OA_SYS+0x8a>
				case NONE:
					//No realiza nada
					break;
				default:
					//default
					break;
 80074e8:	bf00      	nop
		if(pdPASS==xQueueReceive(QueueBtnStatus, &estadoBoton, 0))
 80074ea:	e7bd      	b.n	8007468 <vTask_OA_SYS+0x8>
 80074ec:	20004728 	.word	0x20004728

080074f0 <app_init>:
		                    "- Anthony  Maisincho              N°SIU e2011 \r\n"
		                    "- Jesus    Gonzales               N°SIU e2006\r\n";
//Inicia las tareas de los OA

	/* App Initialization */
void app_init( void ){
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b088      	sub	sp, #32
 80074f4:	af02      	add	r7, sp, #8
		  	vPrintString( pcTextForMain );
 80074f6:	4b49      	ldr	r3, [pc, #292]	; (800761c <app_init+0x12c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7ff fcf0 	bl	8006ee0 <vPrintString>

		    // drivers
		    {
		      eboard_init();
 8007500:	f000 fad0 	bl	8007aa4 <eboard_init>
		    }

			/*Creación de colas*/
		  	QueueBtnStatus = xQueueCreate(QUEUE_LEDS_LENGHT,sizeof(Btn_State));
 8007504:	2200      	movs	r2, #0
 8007506:	2101      	movs	r1, #1
 8007508:	2001      	movs	r0, #1
 800750a:	f7fd fdad 	bl	8005068 <xQueueGenericCreate>
 800750e:	4603      	mov	r3, r0
 8007510:	4a43      	ldr	r2, [pc, #268]	; (8007620 <app_init+0x130>)
 8007512:	6013      	str	r3, [r2, #0]


			/* Check the queues was created successfully */
			configASSERT( QueueBtnStatus != NULL );
 8007514:	4b42      	ldr	r3, [pc, #264]	; (8007620 <app_init+0x130>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10a      	bne.n	8007532 <app_init+0x42>
	__asm volatile
 800751c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	613b      	str	r3, [r7, #16]
}
 800752e:	bf00      	nop
 8007530:	e7fe      	b.n	8007530 <app_init+0x40>

			/* We want this queue to be viewable in a RTOS kernel aware debugger, so register it. */
			vQueueAddToRegistry( QueueBtnStatus, "QueueBtnStatus" );
 8007532:	4b3b      	ldr	r3, [pc, #236]	; (8007620 <app_init+0x130>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	493b      	ldr	r1, [pc, #236]	; (8007624 <app_init+0x134>)
 8007538:	4618      	mov	r0, r3
 800753a:	f7fe f8e1 	bl	8005700 <vQueueAddToRegistry>

			/*Creación de colas*/
			QueueLEDS = xQueueCreate(QUEUE_BUTTON_LENGHT,sizeof(codigo_t));
 800753e:	2200      	movs	r2, #0
 8007540:	2101      	movs	r1, #1
 8007542:	2001      	movs	r0, #1
 8007544:	f7fd fd90 	bl	8005068 <xQueueGenericCreate>
 8007548:	4603      	mov	r3, r0
 800754a:	4a37      	ldr	r2, [pc, #220]	; (8007628 <app_init+0x138>)
 800754c:	6013      	str	r3, [r2, #0]

			/* Check the queues was created successfully */
			configASSERT( QueueLEDS != NULL );
 800754e:	4b36      	ldr	r3, [pc, #216]	; (8007628 <app_init+0x138>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10a      	bne.n	800756c <app_init+0x7c>
	__asm volatile
 8007556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	60fb      	str	r3, [r7, #12]
}
 8007568:	bf00      	nop
 800756a:	e7fe      	b.n	800756a <app_init+0x7a>

			/* We want this queue to be viewable in a RTOS kernel aware debugger, so register it. */
			vQueueAddToRegistry( QueueLEDS, "QueueLEDS" );
 800756c:	4b2e      	ldr	r3, [pc, #184]	; (8007628 <app_init+0x138>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	492e      	ldr	r1, [pc, #184]	; (800762c <app_init+0x13c>)
 8007572:	4618      	mov	r0, r3
 8007574:	f7fe f8c4 	bl	8005700 <vQueueAddToRegistry>


			BaseType_t ret;

			/* Task OA_BTN thread at priority 2 */
			ret = xTaskCreate(vTask_OA_BTN, /* Pointer to the function thats implement the task. */
 8007578:	4b2d      	ldr	r3, [pc, #180]	; (8007630 <app_init+0x140>)
 800757a:	9301      	str	r3, [sp, #4]
 800757c:	2301      	movs	r3, #1
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	2300      	movs	r3, #0
 8007582:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007586:	492b      	ldr	r1, [pc, #172]	; (8007634 <app_init+0x144>)
 8007588:	482b      	ldr	r0, [pc, #172]	; (8007638 <app_init+0x148>)
 800758a:	f7fe f940 	bl	800580e <xTaskCreate>
 800758e:	6178      	str	r0, [r7, #20]
			NULL, /* We are not using the task parameter.		*/
			(tskIDLE_PRIORITY + 1UL), /* This task will run at priority 1. 		*/
			&vTask_OA_BTNHandle); /* We are using a variable as task handle.	*/

			/* Check the task was created successfully. */
			configASSERT(ret == pdPASS);
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d00a      	beq.n	80075ac <app_init+0xbc>
	__asm volatile
 8007596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	60bb      	str	r3, [r7, #8]
}
 80075a8:	bf00      	nop
 80075aa:	e7fe      	b.n	80075aa <app_init+0xba>

			/* Task OA_LEDS thread at priority 2 */
			ret = xTaskCreate(vTask_OA_LEDS, /* Pointer to the function thats implement the task. */
 80075ac:	4b23      	ldr	r3, [pc, #140]	; (800763c <app_init+0x14c>)
 80075ae:	9301      	str	r3, [sp, #4]
 80075b0:	2301      	movs	r3, #1
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	2300      	movs	r3, #0
 80075b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075ba:	4921      	ldr	r1, [pc, #132]	; (8007640 <app_init+0x150>)
 80075bc:	4821      	ldr	r0, [pc, #132]	; (8007644 <app_init+0x154>)
 80075be:	f7fe f926 	bl	800580e <xTaskCreate>
 80075c2:	6178      	str	r0, [r7, #20]
			NULL, /* We are not using the task parameter.		*/
			(tskIDLE_PRIORITY + 1UL), /* This task will run at priority 1. 		*/
			&vTask_OA_LEDSHandle); /* We are using a variable as task handle.	*/

			/* Check the task was created successfully. */
			configASSERT(ret == pdPASS);
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d00a      	beq.n	80075e0 <app_init+0xf0>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	607b      	str	r3, [r7, #4]
}
 80075dc:	bf00      	nop
 80075de:	e7fe      	b.n	80075de <app_init+0xee>

			/* Task OA_SYS thread at priority 2 */
			ret = xTaskCreate(vTask_OA_SYS, /* Pointer to the function thats implement the task. */
 80075e0:	4b19      	ldr	r3, [pc, #100]	; (8007648 <app_init+0x158>)
 80075e2:	9301      	str	r3, [sp, #4]
 80075e4:	2301      	movs	r3, #1
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	2300      	movs	r3, #0
 80075ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075ee:	4917      	ldr	r1, [pc, #92]	; (800764c <app_init+0x15c>)
 80075f0:	4817      	ldr	r0, [pc, #92]	; (8007650 <app_init+0x160>)
 80075f2:	f7fe f90c 	bl	800580e <xTaskCreate>
 80075f6:	6178      	str	r0, [r7, #20]
			NULL, /* We are not using the task parameter.		*/
			(tskIDLE_PRIORITY + 1UL), /* This task will run at priority 1. 		*/
			&vTask_OA_SYSHandle); /* We are using a variable as task handle.	*/

			/* Check the task was created successfully. */
			configASSERT(ret == pdPASS);
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d00a      	beq.n	8007614 <app_init+0x124>
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	603b      	str	r3, [r7, #0]
}
 8007610:	bf00      	nop
 8007612:	e7fe      	b.n	8007612 <app_init+0x122>


			return;
 8007614:	bf00      	nop

}
 8007616:	3718      	adds	r7, #24
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	20000018 	.word	0x20000018
 8007620:	20004728 	.word	0x20004728
 8007624:	080090a0 	.word	0x080090a0
 8007628:	20004770 	.word	0x20004770
 800762c:	080090b0 	.word	0x080090b0
 8007630:	20004764 	.word	0x20004764
 8007634:	080090bc 	.word	0x080090bc
 8007638:	080070f9 	.word	0x080070f9
 800763c:	20004768 	.word	0x20004768
 8007640:	080090c8 	.word	0x080090c8
 8007644:	080073b9 	.word	0x080073b9
 8007648:	2000476c 	.word	0x2000476c
 800764c:	080090d8 	.word	0x080090d8
 8007650:	08007461 	.word	0x08007461

08007654 <delayInit>:

static delay_t delay_1;
static tick_t duracion_1=20;


void delayInit( delay_t * delay, tick_t duration ){
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
	assert(delay!= NULL);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d105      	bne.n	8007670 <delayInit+0x1c>
 8007664:	4b07      	ldr	r3, [pc, #28]	; (8007684 <delayInit+0x30>)
 8007666:	4a08      	ldr	r2, [pc, #32]	; (8007688 <delayInit+0x34>)
 8007668:	210f      	movs	r1, #15
 800766a:	4808      	ldr	r0, [pc, #32]	; (800768c <delayInit+0x38>)
 800766c:	f000 fbf0 	bl	8007e50 <__assert_func>
 delay->duration= duration;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	605a      	str	r2, [r3, #4]
 delay->running=false;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	721a      	strb	r2, [r3, #8]
}
 800767c:	bf00      	nop
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	080090e4 	.word	0x080090e4
 8007688:	08009150 	.word	0x08009150
 800768c:	080090f4 	.word	0x080090f4

08007690 <delayRead>:

bool_t delayRead( delay_t * delay ){
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]

	assert(delay!= NULL);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d105      	bne.n	80076aa <delayRead+0x1a>
 800769e:	4b16      	ldr	r3, [pc, #88]	; (80076f8 <delayRead+0x68>)
 80076a0:	4a16      	ldr	r2, [pc, #88]	; (80076fc <delayRead+0x6c>)
 80076a2:	2116      	movs	r1, #22
 80076a4:	4816      	ldr	r0, [pc, #88]	; (8007700 <delayRead+0x70>)
 80076a6:	f000 fbd3 	bl	8007e50 <__assert_func>
	if((delay->running)==false ){
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	7a1b      	ldrb	r3, [r3, #8]
 80076ae:	f083 0301 	eor.w	r3, r3, #1
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d007      	beq.n	80076c8 <delayRead+0x38>
		delay->startTime = HAL_GetTick();
 80076b8:	f7f9 fcc6 	bl	8001048 <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	601a      	str	r2, [r3, #0]
		delay->running = true;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	721a      	strb	r2, [r3, #8]
	}

	if(delay->running){
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	7a1b      	ldrb	r3, [r3, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00c      	beq.n	80076ea <delayRead+0x5a>
		if((HAL_GetTick()-(delay->startTime))>=delay->duration){
 80076d0:	f7f9 fcba 	bl	8001048 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	1ad2      	subs	r2, r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d302      	bcc.n	80076ea <delayRead+0x5a>
			delay->running = false;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	721a      	strb	r2, [r3, #8]
		}
	}
return delay->running;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	7a1b      	ldrb	r3, [r3, #8]

}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	080090e4 	.word	0x080090e4
 80076fc:	0800915c 	.word	0x0800915c
 8007700:	080090f4 	.word	0x080090f4

08007704 <debounceFSM_init>:
void delayWrite( delay_t * delay, tick_t duration ){
	assert(delay!= NULL);
	delay->duration = duration;
}

void debounceFSM_init(debounceState_t * estado){
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
	delayInit(&delay_1,duracion_1);
 800770c:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <debounceFSM_init+0x34>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4619      	mov	r1, r3
 8007712:	480a      	ldr	r0, [pc, #40]	; (800773c <debounceFSM_init+0x38>)
 8007714:	f7ff ff9e 	bl	8007654 <delayInit>
	assert(estado!=NULL);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d105      	bne.n	800772a <debounceFSM_init+0x26>
 800771e:	4b08      	ldr	r3, [pc, #32]	; (8007740 <debounceFSM_init+0x3c>)
 8007720:	4a08      	ldr	r2, [pc, #32]	; (8007744 <debounceFSM_init+0x40>)
 8007722:	212b      	movs	r1, #43	; 0x2b
 8007724:	4808      	ldr	r0, [pc, #32]	; (8007748 <debounceFSM_init+0x44>)
 8007726:	f000 fb93 	bl	8007e50 <__assert_func>
	*estado=BUTTON_UP;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	701a      	strb	r2, [r3, #0]
}
 8007730:	bf00      	nop
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	2000001c 	.word	0x2000001c
 800773c:	20004774 	.word	0x20004774
 8007740:	08009118 	.word	0x08009118
 8007744:	08009168 	.word	0x08009168
 8007748:	080090f4 	.word	0x080090f4

0800774c <debounceFSM_update>:

void debounceFSM_update(debounceState_t * estado){
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
	assert(estado!=NULL);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d105      	bne.n	8007766 <debounceFSM_update+0x1a>
 800775a:	4b34      	ldr	r3, [pc, #208]	; (800782c <debounceFSM_update+0xe0>)
 800775c:	4a34      	ldr	r2, [pc, #208]	; (8007830 <debounceFSM_update+0xe4>)
 800775e:	2130      	movs	r1, #48	; 0x30
 8007760:	4834      	ldr	r0, [pc, #208]	; (8007834 <debounceFSM_update+0xe8>)
 8007762:	f000 fb75 	bl	8007e50 <__assert_func>
		switch(*estado)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	2b03      	cmp	r3, #3
 800776c:	d84e      	bhi.n	800780c <debounceFSM_update+0xc0>
 800776e:	a201      	add	r2, pc, #4	; (adr r2, 8007774 <debounceFSM_update+0x28>)
 8007770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007774:	08007785 	.word	0x08007785
 8007778:	08007797 	.word	0x08007797
 800777c:	080077c3 	.word	0x080077c3
 8007780:	080077db 	.word	0x080077db
		{
		case BUTTON_UP:
			if(eboard_switch())
 8007784:	f000 f95a 	bl	8007a3c <eboard_switch>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d042      	beq.n	8007814 <debounceFSM_update+0xc8>
				*estado=BUTTON_FALLING;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	701a      	strb	r2, [r3, #0]

			break;
 8007794:	e03e      	b.n	8007814 <debounceFSM_update+0xc8>
		case BUTTON_FALLING:
			if(!(delayRead(&delay_1)))
 8007796:	4828      	ldr	r0, [pc, #160]	; (8007838 <debounceFSM_update+0xec>)
 8007798:	f7ff ff7a 	bl	8007690 <delayRead>
 800779c:	4603      	mov	r3, r0
 800779e:	f083 0301 	eor.w	r3, r3, #1
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d037      	beq.n	8007818 <debounceFSM_update+0xcc>
			{
				if(eboard_switch())
 80077a8:	f000 f948 	bl	8007a3c <eboard_switch>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d003      	beq.n	80077ba <debounceFSM_update+0x6e>
				{
					*estado=BUTTON_DOWN;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2202      	movs	r2, #2
 80077b6:	701a      	strb	r2, [r3, #0]
				}
				else{
					*estado=BUTTON_UP;
				}
			}
			break;
 80077b8:	e02e      	b.n	8007818 <debounceFSM_update+0xcc>
					*estado=BUTTON_UP;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	701a      	strb	r2, [r3, #0]
			break;
 80077c0:	e02a      	b.n	8007818 <debounceFSM_update+0xcc>
		case BUTTON_DOWN:
			if(!(eboard_switch()))
 80077c2:	f000 f93b 	bl	8007a3c <eboard_switch>
 80077c6:	4603      	mov	r3, r0
 80077c8:	f083 0301 	eor.w	r3, r3, #1
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d024      	beq.n	800781c <debounceFSM_update+0xd0>
						*estado=BUTTON_RAISING;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2203      	movs	r2, #3
 80077d6:	701a      	strb	r2, [r3, #0]
			break;
 80077d8:	e020      	b.n	800781c <debounceFSM_update+0xd0>
		case BUTTON_RAISING:
			if(!(delayRead(&delay_1)))
 80077da:	4817      	ldr	r0, [pc, #92]	; (8007838 <debounceFSM_update+0xec>)
 80077dc:	f7ff ff58 	bl	8007690 <delayRead>
 80077e0:	4603      	mov	r3, r0
 80077e2:	f083 0301 	eor.w	r3, r3, #1
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d019      	beq.n	8007820 <debounceFSM_update+0xd4>
					{
						if(!(eboard_switch()))
 80077ec:	f000 f926 	bl	8007a3c <eboard_switch>
 80077f0:	4603      	mov	r3, r0
 80077f2:	f083 0301 	eor.w	r3, r3, #1
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d003      	beq.n	8007804 <debounceFSM_update+0xb8>
						{
							*estado=BUTTON_UP;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	701a      	strb	r2, [r3, #0]
						}
						else{
							*estado=BUTTON_DOWN;
						}
					}
			break;
 8007802:	e00d      	b.n	8007820 <debounceFSM_update+0xd4>
							*estado=BUTTON_DOWN;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2202      	movs	r2, #2
 8007808:	701a      	strb	r2, [r3, #0]
			break;
 800780a:	e009      	b.n	8007820 <debounceFSM_update+0xd4>
		default:
			debounceFSM_init(estado);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7ff ff79 	bl	8007704 <debounceFSM_init>
			break;
 8007812:	e006      	b.n	8007822 <debounceFSM_update+0xd6>
			break;
 8007814:	bf00      	nop
 8007816:	e004      	b.n	8007822 <debounceFSM_update+0xd6>
			break;
 8007818:	bf00      	nop
 800781a:	e002      	b.n	8007822 <debounceFSM_update+0xd6>
			break;
 800781c:	bf00      	nop
 800781e:	e000      	b.n	8007822 <debounceFSM_update+0xd6>
			break;
 8007820:	bf00      	nop

		}
}
 8007822:	bf00      	nop
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	08009118 	.word	0x08009118
 8007830:	0800917c 	.word	0x0800917c
 8007834:	080090f4 	.word	0x080090f4
 8007838:	20004774 	.word	0x20004774

0800783c <euart_hal_receive>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

void euart_hal_receive(void *phardware_handle, uint8_t *pbuffer, size_t size)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	607a      	str	r2, [r7, #4]
  HAL_UARTEx_ReceiveToIdle_IT((UART_HandleTypeDef*)phardware_handle, pbuffer, size);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	b29b      	uxth	r3, r3
 800784c:	461a      	mov	r2, r3
 800784e:	68b9      	ldr	r1, [r7, #8]
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f7fb ffb9 	bl	80037c8 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8007856:	bf00      	nop
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <euart_hal_send>:

void euart_hal_send(void *phardware_handle, uint8_t *pbuffer, size_t size)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	60f8      	str	r0, [r7, #12]
 8007866:	60b9      	str	r1, [r7, #8]
 8007868:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit_IT((UART_HandleTypeDef*)phardware_handle, pbuffer, size);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	b29b      	uxth	r3, r3
 800786e:	461a      	mov	r2, r3
 8007870:	68b9      	ldr	r1, [r7, #8]
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f7fb ff63 	bl	800373e <HAL_UART_Transmit_IT>
}
 8007878:	bf00      	nop
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  eboard_hal_port_uart_error((void*)huart);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f8df 	bl	8007a4c <eboard_hal_port_uart_error>
  // TODO: ¿?
}
 800788e:	bf00      	nop
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b082      	sub	sp, #8
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
 800789e:	460b      	mov	r3, r1
 80078a0:	807b      	strh	r3, [r7, #2]
  eboard_hal_port_uart_rx_irq((void*)huart, size);
 80078a2:	887b      	ldrh	r3, [r7, #2]
 80078a4:	4619      	mov	r1, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f8da 	bl	8007a60 <eboard_hal_port_uart_rx_irq>
}
 80078ac:	bf00      	nop
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  eboard_hal_port_uart_tx_irq((void*)huart);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f8e1 	bl	8007a84 <eboard_hal_port_uart_tx_irq>
}
 80078c2:	bf00      	nop
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <eboard_hal_port_gpio_write>:

void eboard_hal_port_gpio_write(void *handle, bool value)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
 80078d2:	460b      	mov	r3, r1
 80078d4:	70fb      	strb	r3, [r7, #3]
  driver_gpio_descriptor_t_ *hgpio = (driver_gpio_descriptor_t_*)handle;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(hgpio->GPIOx, hgpio->GPIO_Pin, value ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6858      	ldr	r0, [r3, #4]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	891b      	ldrh	r3, [r3, #8]
 80078e2:	78fa      	ldrb	r2, [r7, #3]
 80078e4:	4619      	mov	r1, r3
 80078e6:	f7f9 feff 	bl	80016e8 <HAL_GPIO_WritePin>
}
 80078ea:	bf00      	nop
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <eboard_hal_port_gpio_read>:

bool eboard_hal_port_gpio_read(void *handle)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b084      	sub	sp, #16
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  driver_gpio_descriptor_t_ *hgpio = (driver_gpio_descriptor_t_*)handle;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	60fb      	str	r3, [r7, #12]
  GPIO_PinState state = HAL_GPIO_ReadPin(hgpio->GPIOx, hgpio->GPIO_Pin);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	685a      	ldr	r2, [r3, #4]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	891b      	ldrh	r3, [r3, #8]
 8007906:	4619      	mov	r1, r3
 8007908:	4610      	mov	r0, r2
 800790a:	f7f9 fed5 	bl	80016b8 <HAL_GPIO_ReadPin>
 800790e:	4603      	mov	r3, r0
 8007910:	72fb      	strb	r3, [r7, #11]
  return (GPIO_PIN_SET == state);
 8007912:	7afb      	ldrb	r3, [r7, #11]
 8007914:	2b01      	cmp	r3, #1
 8007916:	bf0c      	ite	eq
 8007918:	2301      	moveq	r3, #1
 800791a:	2300      	movne	r3, #0
 800791c:	b2db      	uxtb	r3, r3
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
	...

08007928 <eboard_uart_init>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

void eboard_uart_init(void* phuart)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af02      	add	r7, sp, #8
 800792e:	6078      	str	r0, [r7, #4]
  euart_init(pheuart_, phuart, tx_buffer_, RB_TX_BUFFER_SIZE_, rx_buffer_, RB_RX_BUFFER_SIZE_);
 8007930:	4807      	ldr	r0, [pc, #28]	; (8007950 <eboard_uart_init+0x28>)
 8007932:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007936:	9301      	str	r3, [sp, #4]
 8007938:	4b06      	ldr	r3, [pc, #24]	; (8007954 <eboard_uart_init+0x2c>)
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007940:	4a05      	ldr	r2, [pc, #20]	; (8007958 <eboard_uart_init+0x30>)
 8007942:	6879      	ldr	r1, [r7, #4]
 8007944:	f000 fa22 	bl	8007d8c <euart_init>
}
 8007948:	bf00      	nop
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	20004c80 	.word	0x20004c80
 8007954:	20004b80 	.word	0x20004b80
 8007958:	20004780 	.word	0x20004780

0800795c <eboard_gpio_init>:

void eboard_gpio_init(eboard_gpio_idx_t idx, void* hgpio)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	6039      	str	r1, [r7, #0]
 8007966:	71fb      	strb	r3, [r7, #7]
	gpios_[idx].hgpio = hgpio;
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	4905      	ldr	r1, [pc, #20]	; (8007980 <eboard_gpio_init+0x24>)
 800796c:	683a      	ldr	r2, [r7, #0]
 800796e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
}
 8007972:	bf00      	nop
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	20000054 	.word	0x20000054

08007984 <eboard_gpio_write>:

void eboard_gpio_write(eboard_gpio_idx_t idx, bool value)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	4603      	mov	r3, r0
 800798c:	460a      	mov	r2, r1
 800798e:	71fb      	strb	r3, [r7, #7]
 8007990:	4613      	mov	r3, r2
 8007992:	71bb      	strb	r3, [r7, #6]
  if(EBOARD_GPIO__CNT <= idx)
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	2b03      	cmp	r3, #3
 8007998:	d810      	bhi.n	80079bc <eboard_gpio_write+0x38>
  {
    return;
  }

  eboard_gpio_descriptor_t_* hgpio = gpios_ + idx;
 800799a:	79fb      	ldrb	r3, [r7, #7]
 800799c:	00db      	lsls	r3, r3, #3
 800799e:	4a0a      	ldr	r2, [pc, #40]	; (80079c8 <eboard_gpio_write+0x44>)
 80079a0:	4413      	add	r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]
  if(hgpio->input)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	791b      	ldrb	r3, [r3, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d109      	bne.n	80079c0 <eboard_gpio_write+0x3c>
  {
    return;
  }

  eboard_hal_port_gpio_write((void*)hgpio->hgpio, value);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	79ba      	ldrb	r2, [r7, #6]
 80079b2:	4611      	mov	r1, r2
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7ff ff88 	bl	80078ca <eboard_hal_port_gpio_write>
 80079ba:	e002      	b.n	80079c2 <eboard_gpio_write+0x3e>
    return;
 80079bc:	bf00      	nop
 80079be:	e000      	b.n	80079c2 <eboard_gpio_write+0x3e>
    return;
 80079c0:	bf00      	nop
}
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	20000054 	.word	0x20000054

080079cc <eboard_gpio_read>:

bool eboard_gpio_read(eboard_gpio_idx_t idx)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	4603      	mov	r3, r0
 80079d4:	71fb      	strb	r3, [r7, #7]
  if(EBOARD_GPIO__CNT <= idx)
 80079d6:	79fb      	ldrb	r3, [r7, #7]
 80079d8:	2b03      	cmp	r3, #3
 80079da:	d901      	bls.n	80079e0 <eboard_gpio_read+0x14>
  {
    return false;
 80079dc:	2300      	movs	r3, #0
 80079de:	e00a      	b.n	80079f6 <eboard_gpio_read+0x2a>
  }

  eboard_gpio_descriptor_t_* hgpio = gpios_ + idx;
 80079e0:	79fb      	ldrb	r3, [r7, #7]
 80079e2:	00db      	lsls	r3, r3, #3
 80079e4:	4a06      	ldr	r2, [pc, #24]	; (8007a00 <eboard_gpio_read+0x34>)
 80079e6:	4413      	add	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]
  return eboard_hal_port_gpio_read((void*)hgpio->hgpio);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7ff ff7f 	bl	80078f2 <eboard_hal_port_gpio_read>
 80079f4:	4603      	mov	r3, r0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000054 	.word	0x20000054

08007a04 <eboard_led_red>:

void eboard_led_red(bool value)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	71fb      	strb	r3, [r7, #7]
  eboard_gpio_write(EBOARD_GPIO_LEDR, value);
 8007a0e:	79fb      	ldrb	r3, [r7, #7]
 8007a10:	4619      	mov	r1, r3
 8007a12:	2000      	movs	r0, #0
 8007a14:	f7ff ffb6 	bl	8007984 <eboard_gpio_write>
}
 8007a18:	bf00      	nop
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <eboard_led_green>:

void eboard_led_green(bool value)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	4603      	mov	r3, r0
 8007a28:	71fb      	strb	r3, [r7, #7]
  eboard_gpio_write(EBOARD_GPIO_LEDG, value);
 8007a2a:	79fb      	ldrb	r3, [r7, #7]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	2001      	movs	r0, #1
 8007a30:	f7ff ffa8 	bl	8007984 <eboard_gpio_write>
}
 8007a34:	bf00      	nop
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <eboard_switch>:
{
  eboard_gpio_write(EBOARD_GPIO_LEDB, value);
}

bool eboard_switch(void)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	af00      	add	r7, sp, #0
  return eboard_gpio_read(EBOARD_GPIO_SW);
 8007a40:	2003      	movs	r0, #3
 8007a42:	f7ff ffc3 	bl	80079cc <eboard_gpio_read>
 8007a46:	4603      	mov	r3, r0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <eboard_hal_port_uart_error>:
  eboard_uart_swrite_line((elog_msg_len < (ELOG_MAXLEN - 1)) ? "" : " ...");
}

// port uart
void eboard_hal_port_uart_error(void* huart)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  // TODO: ¿?
}
 8007a54:	bf00      	nop
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <eboard_hal_port_uart_rx_irq>:

void eboard_hal_port_uart_rx_irq(void* huart, uint16_t size)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	807b      	strh	r3, [r7, #2]
  euart_rx_irq(pheuart_, huart, size);
 8007a6c:	4804      	ldr	r0, [pc, #16]	; (8007a80 <eboard_hal_port_uart_rx_irq+0x20>)
 8007a6e:	887b      	ldrh	r3, [r7, #2]
 8007a70:	461a      	mov	r2, r3
 8007a72:	6879      	ldr	r1, [r7, #4]
 8007a74:	f000 f9ac 	bl	8007dd0 <euart_rx_irq>
}
 8007a78:	bf00      	nop
 8007a7a:	3708      	adds	r7, #8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	20004c80 	.word	0x20004c80

08007a84 <eboard_hal_port_uart_tx_irq>:

void eboard_hal_port_uart_tx_irq(void* huart)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  euart_tx_irq(pheuart_, (void*)huart);
 8007a8c:	4b04      	ldr	r3, [pc, #16]	; (8007aa0 <eboard_hal_port_uart_tx_irq+0x1c>)
 8007a8e:	6879      	ldr	r1, [r7, #4]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 f9bc 	bl	8007e0e <euart_tx_irq>
}
 8007a96:	bf00      	nop
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20004c80 	.word	0x20004c80

08007aa4 <eboard_init>:

void eboard_init(void)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
  eboard_uart_init((void*)p_huart_selected_);
 8007aaa:	4b10      	ldr	r3, [pc, #64]	; (8007aec <eboard_init+0x48>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff ff3a 	bl	8007928 <eboard_uart_init>

  for (eboard_gpio_idx_t idx = 0; idx < EBOARD_GPIO__CNT; ++idx)
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	71fb      	strb	r3, [r7, #7]
 8007ab8:	e00f      	b.n	8007ada <eboard_init+0x36>
  {
    eboard_gpio_init(idx, (void*)(driver_gpios_ + idx));
 8007aba:	79fa      	ldrb	r2, [r7, #7]
 8007abc:	4613      	mov	r3, r2
 8007abe:	005b      	lsls	r3, r3, #1
 8007ac0:	4413      	add	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	4b0a      	ldr	r3, [pc, #40]	; (8007af0 <eboard_init+0x4c>)
 8007ac8:	441a      	add	r2, r3
 8007aca:	79fb      	ldrb	r3, [r7, #7]
 8007acc:	4611      	mov	r1, r2
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff ff44 	bl	800795c <eboard_gpio_init>
  for (eboard_gpio_idx_t idx = 0; idx < EBOARD_GPIO__CNT; ++idx)
 8007ad4:	79fb      	ldrb	r3, [r7, #7]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	71fb      	strb	r3, [r7, #7]
 8007ada:	79fb      	ldrb	r3, [r7, #7]
 8007adc:	2b03      	cmp	r3, #3
 8007ade:	d9ec      	bls.n	8007aba <eboard_init+0x16>
  }
}
 8007ae0:	bf00      	nop
 8007ae2:	bf00      	nop
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	20000050 	.word	0x20000050
 8007af0:	20000020 	.word	0x20000020

08007af4 <inc_idex_>:
 */

#include "eringbuffer.h"

inline static void inc_idex_(size_t *index, size_t size)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  *index += 1;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	601a      	str	r2, [r3, #0]
  if(size <= *index)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	683a      	ldr	r2, [r7, #0]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d802      	bhi.n	8007b18 <inc_idex_+0x24>
  {
    *index = 0;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	601a      	str	r2, [r3, #0]
  }
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <write_byte_>:

inline static void write_byte_(eringbuffer_t *rb, uint8_t byte)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	70fb      	strb	r3, [r7, #3]
  rb->buffer[rb->w] = byte;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	4413      	add	r3, r2
 8007b3a:	78fa      	ldrb	r2, [r7, #3]
 8007b3c:	701a      	strb	r2, [r3, #0]
  inc_idex_(&(rb->w), rb->size);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f103 020c 	add.w	r2, r3, #12
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	4610      	mov	r0, r2
 8007b4c:	f7ff ffd2 	bl	8007af4 <inc_idex_>
  rb->len++;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	1c5a      	adds	r2, r3, #1
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	609a      	str	r2, [r3, #8]
}
 8007b5a:	bf00      	nop
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <read_byte_>:

inline static void read_byte_(eringbuffer_t *rb, uint8_t *byte)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b082      	sub	sp, #8
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	6039      	str	r1, [r7, #0]
  *byte = rb->buffer[rb->r];
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	4413      	add	r3, r2
 8007b76:	781a      	ldrb	r2, [r3, #0]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	701a      	strb	r2, [r3, #0]
  inc_idex_(&(rb->r), rb->size);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f103 0210 	add.w	r2, r3, #16
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	4619      	mov	r1, r3
 8007b88:	4610      	mov	r0, r2
 8007b8a:	f7ff ffb3 	bl	8007af4 <inc_idex_>
  rb->len--;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	1e5a      	subs	r2, r3, #1
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	609a      	str	r2, [r3, #8]
}
 8007b98:	bf00      	nop
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <eringbuffer_init>:

void eringbuffer_init(eringbuffer_t *rb, uint8_t *buffer, size_t size)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
  rb->buffer = buffer;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	601a      	str	r2, [r3, #0]
  rb->size = size;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	605a      	str	r2, [r3, #4]
  rb->len = 0;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	609a      	str	r2, [r3, #8]
  rb->w = 0;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	60da      	str	r2, [r3, #12]
  rb->r = 0;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	611a      	str	r2, [r3, #16]
}
 8007bca:	bf00      	nop
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <eringbuffer_len>:
{
  return rb->size;
}

size_t eringbuffer_len(const eringbuffer_t *rb)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  return rb->len;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	689b      	ldr	r3, [r3, #8]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <eringbuffer_free>:

size_t eringbuffer_free(const eringbuffer_t *rb)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b083      	sub	sp, #12
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  return rb->size - rb->len;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	1ad3      	subs	r3, r2, r3
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <eringbuffer_is_full>:

bool eringbuffer_is_full(const eringbuffer_t *rb)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  return (0 == eringbuffer_free(rb));
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f7ff ffea 	bl	8007bee <eringbuffer_free>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	bf0c      	ite	eq
 8007c20:	2301      	moveq	r3, #1
 8007c22:	2300      	movne	r3, #0
 8007c24:	b2db      	uxtb	r3, r3
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <eringbuffer_is_empty>:

bool eringbuffer_is_empty(const eringbuffer_t *rb)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b082      	sub	sp, #8
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  return (0 == eringbuffer_len(rb));
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7ff ffcd 	bl	8007bd6 <eringbuffer_len>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	bf0c      	ite	eq
 8007c42:	2301      	moveq	r3, #1
 8007c44:	2300      	movne	r3, #0
 8007c46:	b2db      	uxtb	r3, r3
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <eringbuffer_write_byte>:

size_t eringbuffer_write_byte(eringbuffer_t *rb, uint8_t byte)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	70fb      	strb	r3, [r7, #3]
  if(eringbuffer_is_full(rb))
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7ff ffd5 	bl	8007c0c <eringbuffer_is_full>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <eringbuffer_write_byte+0x1c>
  {
    return 0;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	e005      	b.n	8007c78 <eringbuffer_write_byte+0x28>
  }
  write_byte_(rb, byte);
 8007c6c:	78fb      	ldrb	r3, [r7, #3]
 8007c6e:	4619      	mov	r1, r3
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7ff ff57 	bl	8007b24 <write_byte_>
  return 1;
 8007c76:	2301      	movs	r3, #1
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <eringbuffer_write>:

size_t eringbuffer_write(eringbuffer_t *rb, const uint8_t *buffer, size_t size)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
  size_t i;
  for(i = 0; i < size; ++i)
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	617b      	str	r3, [r7, #20]
 8007c90:	e00d      	b.n	8007cae <eringbuffer_write+0x2e>
  {
    if(0 == eringbuffer_write_byte(rb, buffer[i]))
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	4413      	add	r3, r2
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f7ff ffd7 	bl	8007c50 <eringbuffer_write_byte>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d007      	beq.n	8007cb8 <eringbuffer_write+0x38>
  for(i = 0; i < size; ++i)
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	3301      	adds	r3, #1
 8007cac:	617b      	str	r3, [r7, #20]
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d3ed      	bcc.n	8007c92 <eringbuffer_write+0x12>
 8007cb6:	e000      	b.n	8007cba <eringbuffer_write+0x3a>
    {
      break;
 8007cb8:	bf00      	nop
    }
  }
  return i;
 8007cba:	697b      	ldr	r3, [r7, #20]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3718      	adds	r7, #24
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <eringbuffer_read_byte>:

size_t eringbuffer_read_byte(eringbuffer_t *rb, uint8_t *byte)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  if(eringbuffer_is_empty(rb))
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7ff ffad 	bl	8007c2e <eringbuffer_is_empty>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <eringbuffer_read_byte+0x1a>
  {
    return 0;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	e004      	b.n	8007ce8 <eringbuffer_read_byte+0x24>
  }
  read_byte_(rb, byte);
 8007cde:	6839      	ldr	r1, [r7, #0]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f7ff ff3e 	bl	8007b62 <read_byte_>
  return 1;
 8007ce6:	2301      	movs	r3, #1
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <eringbuffer_read>:

size_t eringbuffer_read(eringbuffer_t *rb, uint8_t *buffer, size_t size)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
  size_t i;
  for(i = 0; i < size; ++i)
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	617b      	str	r3, [r7, #20]
 8007d00:	e00c      	b.n	8007d1c <eringbuffer_read+0x2c>
  {
    if(0 == eringbuffer_read_byte(rb, buffer + i))
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	4413      	add	r3, r2
 8007d08:	4619      	mov	r1, r3
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f7ff ffda 	bl	8007cc4 <eringbuffer_read_byte>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d007      	beq.n	8007d26 <eringbuffer_read+0x36>
  for(i = 0; i < size; ++i)
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	617b      	str	r3, [r7, #20]
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d3ee      	bcc.n	8007d02 <eringbuffer_read+0x12>
 8007d24:	e000      	b.n	8007d28 <eringbuffer_read+0x38>
    {
      break;
 8007d26:	bf00      	nop
    }
  }
  return i;
 8007d28:	697b      	ldr	r3, [r7, #20]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3718      	adds	r7, #24
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <hal_receive_>:
#define pTX_BUFFER      (phandle->tx.pbuffer)
#define pRX_RB          (&(phandle->rx.rb))
#define pRX_BUFFER      (phandle->rx.pbuffer)

void hal_receive_(euart_t *phandle)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b082      	sub	sp, #8
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  euart_hal_receive(phandle->phardware_handle, pRX_BUFFER, EUART_HAL_BUFFER_SIZE);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6818      	ldr	r0, [r3, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	3340      	adds	r3, #64	; 0x40
 8007d42:	2210      	movs	r2, #16
 8007d44:	4619      	mov	r1, r3
 8007d46:	f7ff fd79 	bl	800783c <euart_hal_receive>
}
 8007d4a:	bf00      	nop
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <hal_send_>:

void hal_send_(euart_t *phandle)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  size_t tx_len = eringbuffer_read(pTX_RB, pTX_BUFFER, EUART_HAL_BUFFER_SIZE);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f103 0008 	add.w	r0, r3, #8
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	331c      	adds	r3, #28
 8007d64:	2210      	movs	r2, #16
 8007d66:	4619      	mov	r1, r3
 8007d68:	f7ff ffc2 	bl	8007cf0 <eringbuffer_read>
 8007d6c:	60f8      	str	r0, [r7, #12]
  euart_hal_send(phandle->phardware_handle, pTX_BUFFER, tx_len);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6818      	ldr	r0, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	331c      	adds	r3, #28
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	4619      	mov	r1, r3
 8007d7a:	f7ff fd70 	bl	800785e <euart_hal_send>
  phandle->tx_free = false;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	711a      	strb	r2, [r3, #4]
}
 8007d84:	bf00      	nop
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <euart_init>:

void euart_init(euart_t *phandle, void* phardware_handle, uint8_t* ptx_buffer, size_t tx_buffer_size, uint8_t* prx_buffer, size_t rx_buffer_size)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
 8007d98:	603b      	str	r3, [r7, #0]
  phandle->phardware_handle = phardware_handle;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	601a      	str	r2, [r3, #0]
  eringbuffer_init(pTX_RB, ptx_buffer, tx_buffer_size);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	3308      	adds	r3, #8
 8007da4:	683a      	ldr	r2, [r7, #0]
 8007da6:	6879      	ldr	r1, [r7, #4]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7ff fef9 	bl	8007ba0 <eringbuffer_init>
  eringbuffer_init(pRX_RB, prx_buffer, rx_buffer_size);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	332c      	adds	r3, #44	; 0x2c
 8007db2:	69fa      	ldr	r2, [r7, #28]
 8007db4:	69b9      	ldr	r1, [r7, #24]
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7ff fef2 	bl	8007ba0 <eringbuffer_init>
  phandle->tx_free = true;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	711a      	strb	r2, [r3, #4]

  hal_receive_(phandle);
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f7ff ffb5 	bl	8007d32 <hal_receive_>
}
 8007dc8:	bf00      	nop
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <euart_rx_irq>:
{
  return eringbuffer_read(pRX_RB, buffer, size);
}

void euart_rx_irq(euart_t *phandle, void *phardware_handle, size_t size)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
  if(phandle->phardware_handle != phardware_handle)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d10f      	bne.n	8007e06 <euart_rx_irq+0x36>
  {
    return;
  }

  if(0 < size)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d008      	beq.n	8007dfe <euart_rx_irq+0x2e>
  {
    eringbuffer_write(pRX_RB, pRX_BUFFER, size);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3340      	adds	r3, #64	; 0x40
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	f7ff ff41 	bl	8007c80 <eringbuffer_write>
  }
  hal_receive_(phandle);
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f7ff ff97 	bl	8007d32 <hal_receive_>
 8007e04:	e000      	b.n	8007e08 <euart_rx_irq+0x38>
    return;
 8007e06:	bf00      	nop
}
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <euart_tx_irq>:

void euart_tx_irq(euart_t *phandle, void *phardware_handle)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	6039      	str	r1, [r7, #0]
  phandle->tx_free = true;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	711a      	strb	r2, [r3, #4]
  if(phandle->phardware_handle != phardware_handle)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d10e      	bne.n	8007e46 <euart_tx_irq+0x38>
  {
    return;
  }

  if(!eringbuffer_is_empty(pTX_RB))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	3308      	adds	r3, #8
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7ff fefe 	bl	8007c2e <eringbuffer_is_empty>
 8007e32:	4603      	mov	r3, r0
 8007e34:	f083 0301 	eor.w	r3, r3, #1
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d004      	beq.n	8007e48 <euart_tx_irq+0x3a>
  {
    hal_send_(phandle);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7ff ff87 	bl	8007d52 <hal_send_>
 8007e44:	e000      	b.n	8007e48 <euart_tx_irq+0x3a>
    return;
 8007e46:	bf00      	nop
  }
}
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
	...

08007e50 <__assert_func>:
 8007e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e52:	4614      	mov	r4, r2
 8007e54:	461a      	mov	r2, r3
 8007e56:	4b09      	ldr	r3, [pc, #36]	; (8007e7c <__assert_func+0x2c>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4605      	mov	r5, r0
 8007e5c:	68d8      	ldr	r0, [r3, #12]
 8007e5e:	b14c      	cbz	r4, 8007e74 <__assert_func+0x24>
 8007e60:	4b07      	ldr	r3, [pc, #28]	; (8007e80 <__assert_func+0x30>)
 8007e62:	9100      	str	r1, [sp, #0]
 8007e64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e68:	4906      	ldr	r1, [pc, #24]	; (8007e84 <__assert_func+0x34>)
 8007e6a:	462b      	mov	r3, r5
 8007e6c:	f000 f974 	bl	8008158 <fiprintf>
 8007e70:	f000 fad7 	bl	8008422 <abort>
 8007e74:	4b04      	ldr	r3, [pc, #16]	; (8007e88 <__assert_func+0x38>)
 8007e76:	461c      	mov	r4, r3
 8007e78:	e7f3      	b.n	8007e62 <__assert_func+0x12>
 8007e7a:	bf00      	nop
 8007e7c:	200000cc 	.word	0x200000cc
 8007e80:	0800918f 	.word	0x0800918f
 8007e84:	0800919c 	.word	0x0800919c
 8007e88:	080091ca 	.word	0x080091ca

08007e8c <__sflush_r>:
 8007e8c:	898a      	ldrh	r2, [r1, #12]
 8007e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e92:	4605      	mov	r5, r0
 8007e94:	0710      	lsls	r0, r2, #28
 8007e96:	460c      	mov	r4, r1
 8007e98:	d458      	bmi.n	8007f4c <__sflush_r+0xc0>
 8007e9a:	684b      	ldr	r3, [r1, #4]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	dc05      	bgt.n	8007eac <__sflush_r+0x20>
 8007ea0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	dc02      	bgt.n	8007eac <__sflush_r+0x20>
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eae:	2e00      	cmp	r6, #0
 8007eb0:	d0f9      	beq.n	8007ea6 <__sflush_r+0x1a>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007eb8:	682f      	ldr	r7, [r5, #0]
 8007eba:	6a21      	ldr	r1, [r4, #32]
 8007ebc:	602b      	str	r3, [r5, #0]
 8007ebe:	d032      	beq.n	8007f26 <__sflush_r+0x9a>
 8007ec0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	075a      	lsls	r2, r3, #29
 8007ec6:	d505      	bpl.n	8007ed4 <__sflush_r+0x48>
 8007ec8:	6863      	ldr	r3, [r4, #4]
 8007eca:	1ac0      	subs	r0, r0, r3
 8007ecc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ece:	b10b      	cbz	r3, 8007ed4 <__sflush_r+0x48>
 8007ed0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ed2:	1ac0      	subs	r0, r0, r3
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eda:	6a21      	ldr	r1, [r4, #32]
 8007edc:	4628      	mov	r0, r5
 8007ede:	47b0      	blx	r6
 8007ee0:	1c43      	adds	r3, r0, #1
 8007ee2:	89a3      	ldrh	r3, [r4, #12]
 8007ee4:	d106      	bne.n	8007ef4 <__sflush_r+0x68>
 8007ee6:	6829      	ldr	r1, [r5, #0]
 8007ee8:	291d      	cmp	r1, #29
 8007eea:	d82b      	bhi.n	8007f44 <__sflush_r+0xb8>
 8007eec:	4a29      	ldr	r2, [pc, #164]	; (8007f94 <__sflush_r+0x108>)
 8007eee:	410a      	asrs	r2, r1
 8007ef0:	07d6      	lsls	r6, r2, #31
 8007ef2:	d427      	bmi.n	8007f44 <__sflush_r+0xb8>
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	6062      	str	r2, [r4, #4]
 8007ef8:	04d9      	lsls	r1, r3, #19
 8007efa:	6922      	ldr	r2, [r4, #16]
 8007efc:	6022      	str	r2, [r4, #0]
 8007efe:	d504      	bpl.n	8007f0a <__sflush_r+0x7e>
 8007f00:	1c42      	adds	r2, r0, #1
 8007f02:	d101      	bne.n	8007f08 <__sflush_r+0x7c>
 8007f04:	682b      	ldr	r3, [r5, #0]
 8007f06:	b903      	cbnz	r3, 8007f0a <__sflush_r+0x7e>
 8007f08:	6560      	str	r0, [r4, #84]	; 0x54
 8007f0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f0c:	602f      	str	r7, [r5, #0]
 8007f0e:	2900      	cmp	r1, #0
 8007f10:	d0c9      	beq.n	8007ea6 <__sflush_r+0x1a>
 8007f12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f16:	4299      	cmp	r1, r3
 8007f18:	d002      	beq.n	8007f20 <__sflush_r+0x94>
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	f000 fa88 	bl	8008430 <_free_r>
 8007f20:	2000      	movs	r0, #0
 8007f22:	6360      	str	r0, [r4, #52]	; 0x34
 8007f24:	e7c0      	b.n	8007ea8 <__sflush_r+0x1c>
 8007f26:	2301      	movs	r3, #1
 8007f28:	4628      	mov	r0, r5
 8007f2a:	47b0      	blx	r6
 8007f2c:	1c41      	adds	r1, r0, #1
 8007f2e:	d1c8      	bne.n	8007ec2 <__sflush_r+0x36>
 8007f30:	682b      	ldr	r3, [r5, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d0c5      	beq.n	8007ec2 <__sflush_r+0x36>
 8007f36:	2b1d      	cmp	r3, #29
 8007f38:	d001      	beq.n	8007f3e <__sflush_r+0xb2>
 8007f3a:	2b16      	cmp	r3, #22
 8007f3c:	d101      	bne.n	8007f42 <__sflush_r+0xb6>
 8007f3e:	602f      	str	r7, [r5, #0]
 8007f40:	e7b1      	b.n	8007ea6 <__sflush_r+0x1a>
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f48:	81a3      	strh	r3, [r4, #12]
 8007f4a:	e7ad      	b.n	8007ea8 <__sflush_r+0x1c>
 8007f4c:	690f      	ldr	r7, [r1, #16]
 8007f4e:	2f00      	cmp	r7, #0
 8007f50:	d0a9      	beq.n	8007ea6 <__sflush_r+0x1a>
 8007f52:	0793      	lsls	r3, r2, #30
 8007f54:	680e      	ldr	r6, [r1, #0]
 8007f56:	bf08      	it	eq
 8007f58:	694b      	ldreq	r3, [r1, #20]
 8007f5a:	600f      	str	r7, [r1, #0]
 8007f5c:	bf18      	it	ne
 8007f5e:	2300      	movne	r3, #0
 8007f60:	eba6 0807 	sub.w	r8, r6, r7
 8007f64:	608b      	str	r3, [r1, #8]
 8007f66:	f1b8 0f00 	cmp.w	r8, #0
 8007f6a:	dd9c      	ble.n	8007ea6 <__sflush_r+0x1a>
 8007f6c:	6a21      	ldr	r1, [r4, #32]
 8007f6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f70:	4643      	mov	r3, r8
 8007f72:	463a      	mov	r2, r7
 8007f74:	4628      	mov	r0, r5
 8007f76:	47b0      	blx	r6
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	dc06      	bgt.n	8007f8a <__sflush_r+0xfe>
 8007f7c:	89a3      	ldrh	r3, [r4, #12]
 8007f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f82:	81a3      	strh	r3, [r4, #12]
 8007f84:	f04f 30ff 	mov.w	r0, #4294967295
 8007f88:	e78e      	b.n	8007ea8 <__sflush_r+0x1c>
 8007f8a:	4407      	add	r7, r0
 8007f8c:	eba8 0800 	sub.w	r8, r8, r0
 8007f90:	e7e9      	b.n	8007f66 <__sflush_r+0xda>
 8007f92:	bf00      	nop
 8007f94:	dfbffffe 	.word	0xdfbffffe

08007f98 <_fflush_r>:
 8007f98:	b538      	push	{r3, r4, r5, lr}
 8007f9a:	690b      	ldr	r3, [r1, #16]
 8007f9c:	4605      	mov	r5, r0
 8007f9e:	460c      	mov	r4, r1
 8007fa0:	b913      	cbnz	r3, 8007fa8 <_fflush_r+0x10>
 8007fa2:	2500      	movs	r5, #0
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	bd38      	pop	{r3, r4, r5, pc}
 8007fa8:	b118      	cbz	r0, 8007fb2 <_fflush_r+0x1a>
 8007faa:	6a03      	ldr	r3, [r0, #32]
 8007fac:	b90b      	cbnz	r3, 8007fb2 <_fflush_r+0x1a>
 8007fae:	f000 f8bb 	bl	8008128 <__sinit>
 8007fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d0f3      	beq.n	8007fa2 <_fflush_r+0xa>
 8007fba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fbc:	07d0      	lsls	r0, r2, #31
 8007fbe:	d404      	bmi.n	8007fca <_fflush_r+0x32>
 8007fc0:	0599      	lsls	r1, r3, #22
 8007fc2:	d402      	bmi.n	8007fca <_fflush_r+0x32>
 8007fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fc6:	f000 fa1c 	bl	8008402 <__retarget_lock_acquire_recursive>
 8007fca:	4628      	mov	r0, r5
 8007fcc:	4621      	mov	r1, r4
 8007fce:	f7ff ff5d 	bl	8007e8c <__sflush_r>
 8007fd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fd4:	07da      	lsls	r2, r3, #31
 8007fd6:	4605      	mov	r5, r0
 8007fd8:	d4e4      	bmi.n	8007fa4 <_fflush_r+0xc>
 8007fda:	89a3      	ldrh	r3, [r4, #12]
 8007fdc:	059b      	lsls	r3, r3, #22
 8007fde:	d4e1      	bmi.n	8007fa4 <_fflush_r+0xc>
 8007fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fe2:	f000 fa0f 	bl	8008404 <__retarget_lock_release_recursive>
 8007fe6:	e7dd      	b.n	8007fa4 <_fflush_r+0xc>

08007fe8 <fflush>:
 8007fe8:	4601      	mov	r1, r0
 8007fea:	b920      	cbnz	r0, 8007ff6 <fflush+0xe>
 8007fec:	4a04      	ldr	r2, [pc, #16]	; (8008000 <fflush+0x18>)
 8007fee:	4905      	ldr	r1, [pc, #20]	; (8008004 <fflush+0x1c>)
 8007ff0:	4805      	ldr	r0, [pc, #20]	; (8008008 <fflush+0x20>)
 8007ff2:	f000 b8c3 	b.w	800817c <_fwalk_sglue>
 8007ff6:	4b05      	ldr	r3, [pc, #20]	; (800800c <fflush+0x24>)
 8007ff8:	6818      	ldr	r0, [r3, #0]
 8007ffa:	f7ff bfcd 	b.w	8007f98 <_fflush_r>
 8007ffe:	bf00      	nop
 8008000:	20000074 	.word	0x20000074
 8008004:	08007f99 	.word	0x08007f99
 8008008:	20000080 	.word	0x20000080
 800800c:	200000cc 	.word	0x200000cc

08008010 <std>:
 8008010:	2300      	movs	r3, #0
 8008012:	b510      	push	{r4, lr}
 8008014:	4604      	mov	r4, r0
 8008016:	e9c0 3300 	strd	r3, r3, [r0]
 800801a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800801e:	6083      	str	r3, [r0, #8]
 8008020:	8181      	strh	r1, [r0, #12]
 8008022:	6643      	str	r3, [r0, #100]	; 0x64
 8008024:	81c2      	strh	r2, [r0, #14]
 8008026:	6183      	str	r3, [r0, #24]
 8008028:	4619      	mov	r1, r3
 800802a:	2208      	movs	r2, #8
 800802c:	305c      	adds	r0, #92	; 0x5c
 800802e:	f000 f918 	bl	8008262 <memset>
 8008032:	4b0d      	ldr	r3, [pc, #52]	; (8008068 <std+0x58>)
 8008034:	6263      	str	r3, [r4, #36]	; 0x24
 8008036:	4b0d      	ldr	r3, [pc, #52]	; (800806c <std+0x5c>)
 8008038:	62a3      	str	r3, [r4, #40]	; 0x28
 800803a:	4b0d      	ldr	r3, [pc, #52]	; (8008070 <std+0x60>)
 800803c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800803e:	4b0d      	ldr	r3, [pc, #52]	; (8008074 <std+0x64>)
 8008040:	6323      	str	r3, [r4, #48]	; 0x30
 8008042:	4b0d      	ldr	r3, [pc, #52]	; (8008078 <std+0x68>)
 8008044:	6224      	str	r4, [r4, #32]
 8008046:	429c      	cmp	r4, r3
 8008048:	d006      	beq.n	8008058 <std+0x48>
 800804a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800804e:	4294      	cmp	r4, r2
 8008050:	d002      	beq.n	8008058 <std+0x48>
 8008052:	33d0      	adds	r3, #208	; 0xd0
 8008054:	429c      	cmp	r4, r3
 8008056:	d105      	bne.n	8008064 <std+0x54>
 8008058:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800805c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008060:	f000 b9ce 	b.w	8008400 <__retarget_lock_init_recursive>
 8008064:	bd10      	pop	{r4, pc}
 8008066:	bf00      	nop
 8008068:	080081dd 	.word	0x080081dd
 800806c:	080081ff 	.word	0x080081ff
 8008070:	08008237 	.word	0x08008237
 8008074:	0800825b 	.word	0x0800825b
 8008078:	20004cd0 	.word	0x20004cd0

0800807c <stdio_exit_handler>:
 800807c:	4a02      	ldr	r2, [pc, #8]	; (8008088 <stdio_exit_handler+0xc>)
 800807e:	4903      	ldr	r1, [pc, #12]	; (800808c <stdio_exit_handler+0x10>)
 8008080:	4803      	ldr	r0, [pc, #12]	; (8008090 <stdio_exit_handler+0x14>)
 8008082:	f000 b87b 	b.w	800817c <_fwalk_sglue>
 8008086:	bf00      	nop
 8008088:	20000074 	.word	0x20000074
 800808c:	08007f99 	.word	0x08007f99
 8008090:	20000080 	.word	0x20000080

08008094 <cleanup_stdio>:
 8008094:	6841      	ldr	r1, [r0, #4]
 8008096:	4b0c      	ldr	r3, [pc, #48]	; (80080c8 <cleanup_stdio+0x34>)
 8008098:	4299      	cmp	r1, r3
 800809a:	b510      	push	{r4, lr}
 800809c:	4604      	mov	r4, r0
 800809e:	d001      	beq.n	80080a4 <cleanup_stdio+0x10>
 80080a0:	f7ff ff7a 	bl	8007f98 <_fflush_r>
 80080a4:	68a1      	ldr	r1, [r4, #8]
 80080a6:	4b09      	ldr	r3, [pc, #36]	; (80080cc <cleanup_stdio+0x38>)
 80080a8:	4299      	cmp	r1, r3
 80080aa:	d002      	beq.n	80080b2 <cleanup_stdio+0x1e>
 80080ac:	4620      	mov	r0, r4
 80080ae:	f7ff ff73 	bl	8007f98 <_fflush_r>
 80080b2:	68e1      	ldr	r1, [r4, #12]
 80080b4:	4b06      	ldr	r3, [pc, #24]	; (80080d0 <cleanup_stdio+0x3c>)
 80080b6:	4299      	cmp	r1, r3
 80080b8:	d004      	beq.n	80080c4 <cleanup_stdio+0x30>
 80080ba:	4620      	mov	r0, r4
 80080bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080c0:	f7ff bf6a 	b.w	8007f98 <_fflush_r>
 80080c4:	bd10      	pop	{r4, pc}
 80080c6:	bf00      	nop
 80080c8:	20004cd0 	.word	0x20004cd0
 80080cc:	20004d38 	.word	0x20004d38
 80080d0:	20004da0 	.word	0x20004da0

080080d4 <global_stdio_init.part.0>:
 80080d4:	b510      	push	{r4, lr}
 80080d6:	4b0b      	ldr	r3, [pc, #44]	; (8008104 <global_stdio_init.part.0+0x30>)
 80080d8:	4c0b      	ldr	r4, [pc, #44]	; (8008108 <global_stdio_init.part.0+0x34>)
 80080da:	4a0c      	ldr	r2, [pc, #48]	; (800810c <global_stdio_init.part.0+0x38>)
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	4620      	mov	r0, r4
 80080e0:	2200      	movs	r2, #0
 80080e2:	2104      	movs	r1, #4
 80080e4:	f7ff ff94 	bl	8008010 <std>
 80080e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80080ec:	2201      	movs	r2, #1
 80080ee:	2109      	movs	r1, #9
 80080f0:	f7ff ff8e 	bl	8008010 <std>
 80080f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80080f8:	2202      	movs	r2, #2
 80080fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080fe:	2112      	movs	r1, #18
 8008100:	f7ff bf86 	b.w	8008010 <std>
 8008104:	20004e08 	.word	0x20004e08
 8008108:	20004cd0 	.word	0x20004cd0
 800810c:	0800807d 	.word	0x0800807d

08008110 <__sfp_lock_acquire>:
 8008110:	4801      	ldr	r0, [pc, #4]	; (8008118 <__sfp_lock_acquire+0x8>)
 8008112:	f000 b976 	b.w	8008402 <__retarget_lock_acquire_recursive>
 8008116:	bf00      	nop
 8008118:	20004e11 	.word	0x20004e11

0800811c <__sfp_lock_release>:
 800811c:	4801      	ldr	r0, [pc, #4]	; (8008124 <__sfp_lock_release+0x8>)
 800811e:	f000 b971 	b.w	8008404 <__retarget_lock_release_recursive>
 8008122:	bf00      	nop
 8008124:	20004e11 	.word	0x20004e11

08008128 <__sinit>:
 8008128:	b510      	push	{r4, lr}
 800812a:	4604      	mov	r4, r0
 800812c:	f7ff fff0 	bl	8008110 <__sfp_lock_acquire>
 8008130:	6a23      	ldr	r3, [r4, #32]
 8008132:	b11b      	cbz	r3, 800813c <__sinit+0x14>
 8008134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008138:	f7ff bff0 	b.w	800811c <__sfp_lock_release>
 800813c:	4b04      	ldr	r3, [pc, #16]	; (8008150 <__sinit+0x28>)
 800813e:	6223      	str	r3, [r4, #32]
 8008140:	4b04      	ldr	r3, [pc, #16]	; (8008154 <__sinit+0x2c>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1f5      	bne.n	8008134 <__sinit+0xc>
 8008148:	f7ff ffc4 	bl	80080d4 <global_stdio_init.part.0>
 800814c:	e7f2      	b.n	8008134 <__sinit+0xc>
 800814e:	bf00      	nop
 8008150:	08008095 	.word	0x08008095
 8008154:	20004e08 	.word	0x20004e08

08008158 <fiprintf>:
 8008158:	b40e      	push	{r1, r2, r3}
 800815a:	b503      	push	{r0, r1, lr}
 800815c:	4601      	mov	r1, r0
 800815e:	ab03      	add	r3, sp, #12
 8008160:	4805      	ldr	r0, [pc, #20]	; (8008178 <fiprintf+0x20>)
 8008162:	f853 2b04 	ldr.w	r2, [r3], #4
 8008166:	6800      	ldr	r0, [r0, #0]
 8008168:	9301      	str	r3, [sp, #4]
 800816a:	f000 fa83 	bl	8008674 <_vfiprintf_r>
 800816e:	b002      	add	sp, #8
 8008170:	f85d eb04 	ldr.w	lr, [sp], #4
 8008174:	b003      	add	sp, #12
 8008176:	4770      	bx	lr
 8008178:	200000cc 	.word	0x200000cc

0800817c <_fwalk_sglue>:
 800817c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008180:	4607      	mov	r7, r0
 8008182:	4688      	mov	r8, r1
 8008184:	4614      	mov	r4, r2
 8008186:	2600      	movs	r6, #0
 8008188:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800818c:	f1b9 0901 	subs.w	r9, r9, #1
 8008190:	d505      	bpl.n	800819e <_fwalk_sglue+0x22>
 8008192:	6824      	ldr	r4, [r4, #0]
 8008194:	2c00      	cmp	r4, #0
 8008196:	d1f7      	bne.n	8008188 <_fwalk_sglue+0xc>
 8008198:	4630      	mov	r0, r6
 800819a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800819e:	89ab      	ldrh	r3, [r5, #12]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d907      	bls.n	80081b4 <_fwalk_sglue+0x38>
 80081a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081a8:	3301      	adds	r3, #1
 80081aa:	d003      	beq.n	80081b4 <_fwalk_sglue+0x38>
 80081ac:	4629      	mov	r1, r5
 80081ae:	4638      	mov	r0, r7
 80081b0:	47c0      	blx	r8
 80081b2:	4306      	orrs	r6, r0
 80081b4:	3568      	adds	r5, #104	; 0x68
 80081b6:	e7e9      	b.n	800818c <_fwalk_sglue+0x10>

080081b8 <iprintf>:
 80081b8:	b40f      	push	{r0, r1, r2, r3}
 80081ba:	b507      	push	{r0, r1, r2, lr}
 80081bc:	4906      	ldr	r1, [pc, #24]	; (80081d8 <iprintf+0x20>)
 80081be:	ab04      	add	r3, sp, #16
 80081c0:	6808      	ldr	r0, [r1, #0]
 80081c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80081c6:	6881      	ldr	r1, [r0, #8]
 80081c8:	9301      	str	r3, [sp, #4]
 80081ca:	f000 fa53 	bl	8008674 <_vfiprintf_r>
 80081ce:	b003      	add	sp, #12
 80081d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80081d4:	b004      	add	sp, #16
 80081d6:	4770      	bx	lr
 80081d8:	200000cc 	.word	0x200000cc

080081dc <__sread>:
 80081dc:	b510      	push	{r4, lr}
 80081de:	460c      	mov	r4, r1
 80081e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e4:	f000 f8be 	bl	8008364 <_read_r>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	bfab      	itete	ge
 80081ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081ee:	89a3      	ldrhlt	r3, [r4, #12]
 80081f0:	181b      	addge	r3, r3, r0
 80081f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081f6:	bfac      	ite	ge
 80081f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80081fa:	81a3      	strhlt	r3, [r4, #12]
 80081fc:	bd10      	pop	{r4, pc}

080081fe <__swrite>:
 80081fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008202:	461f      	mov	r7, r3
 8008204:	898b      	ldrh	r3, [r1, #12]
 8008206:	05db      	lsls	r3, r3, #23
 8008208:	4605      	mov	r5, r0
 800820a:	460c      	mov	r4, r1
 800820c:	4616      	mov	r6, r2
 800820e:	d505      	bpl.n	800821c <__swrite+0x1e>
 8008210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008214:	2302      	movs	r3, #2
 8008216:	2200      	movs	r2, #0
 8008218:	f000 f892 	bl	8008340 <_lseek_r>
 800821c:	89a3      	ldrh	r3, [r4, #12]
 800821e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008226:	81a3      	strh	r3, [r4, #12]
 8008228:	4632      	mov	r2, r6
 800822a:	463b      	mov	r3, r7
 800822c:	4628      	mov	r0, r5
 800822e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008232:	f000 b8a9 	b.w	8008388 <_write_r>

08008236 <__sseek>:
 8008236:	b510      	push	{r4, lr}
 8008238:	460c      	mov	r4, r1
 800823a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800823e:	f000 f87f 	bl	8008340 <_lseek_r>
 8008242:	1c43      	adds	r3, r0, #1
 8008244:	89a3      	ldrh	r3, [r4, #12]
 8008246:	bf15      	itete	ne
 8008248:	6560      	strne	r0, [r4, #84]	; 0x54
 800824a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800824e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008252:	81a3      	strheq	r3, [r4, #12]
 8008254:	bf18      	it	ne
 8008256:	81a3      	strhne	r3, [r4, #12]
 8008258:	bd10      	pop	{r4, pc}

0800825a <__sclose>:
 800825a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800825e:	f000 b809 	b.w	8008274 <_close_r>

08008262 <memset>:
 8008262:	4402      	add	r2, r0
 8008264:	4603      	mov	r3, r0
 8008266:	4293      	cmp	r3, r2
 8008268:	d100      	bne.n	800826c <memset+0xa>
 800826a:	4770      	bx	lr
 800826c:	f803 1b01 	strb.w	r1, [r3], #1
 8008270:	e7f9      	b.n	8008266 <memset+0x4>
	...

08008274 <_close_r>:
 8008274:	b538      	push	{r3, r4, r5, lr}
 8008276:	4d06      	ldr	r5, [pc, #24]	; (8008290 <_close_r+0x1c>)
 8008278:	2300      	movs	r3, #0
 800827a:	4604      	mov	r4, r0
 800827c:	4608      	mov	r0, r1
 800827e:	602b      	str	r3, [r5, #0]
 8008280:	f7f8 fe05 	bl	8000e8e <_close>
 8008284:	1c43      	adds	r3, r0, #1
 8008286:	d102      	bne.n	800828e <_close_r+0x1a>
 8008288:	682b      	ldr	r3, [r5, #0]
 800828a:	b103      	cbz	r3, 800828e <_close_r+0x1a>
 800828c:	6023      	str	r3, [r4, #0]
 800828e:	bd38      	pop	{r3, r4, r5, pc}
 8008290:	20004e0c 	.word	0x20004e0c

08008294 <_reclaim_reent>:
 8008294:	4b29      	ldr	r3, [pc, #164]	; (800833c <_reclaim_reent+0xa8>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4283      	cmp	r3, r0
 800829a:	b570      	push	{r4, r5, r6, lr}
 800829c:	4604      	mov	r4, r0
 800829e:	d04b      	beq.n	8008338 <_reclaim_reent+0xa4>
 80082a0:	69c3      	ldr	r3, [r0, #28]
 80082a2:	b143      	cbz	r3, 80082b6 <_reclaim_reent+0x22>
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d144      	bne.n	8008334 <_reclaim_reent+0xa0>
 80082aa:	69e3      	ldr	r3, [r4, #28]
 80082ac:	6819      	ldr	r1, [r3, #0]
 80082ae:	b111      	cbz	r1, 80082b6 <_reclaim_reent+0x22>
 80082b0:	4620      	mov	r0, r4
 80082b2:	f000 f8bd 	bl	8008430 <_free_r>
 80082b6:	6961      	ldr	r1, [r4, #20]
 80082b8:	b111      	cbz	r1, 80082c0 <_reclaim_reent+0x2c>
 80082ba:	4620      	mov	r0, r4
 80082bc:	f000 f8b8 	bl	8008430 <_free_r>
 80082c0:	69e1      	ldr	r1, [r4, #28]
 80082c2:	b111      	cbz	r1, 80082ca <_reclaim_reent+0x36>
 80082c4:	4620      	mov	r0, r4
 80082c6:	f000 f8b3 	bl	8008430 <_free_r>
 80082ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80082cc:	b111      	cbz	r1, 80082d4 <_reclaim_reent+0x40>
 80082ce:	4620      	mov	r0, r4
 80082d0:	f000 f8ae 	bl	8008430 <_free_r>
 80082d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082d6:	b111      	cbz	r1, 80082de <_reclaim_reent+0x4a>
 80082d8:	4620      	mov	r0, r4
 80082da:	f000 f8a9 	bl	8008430 <_free_r>
 80082de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80082e0:	b111      	cbz	r1, 80082e8 <_reclaim_reent+0x54>
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 f8a4 	bl	8008430 <_free_r>
 80082e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80082ea:	b111      	cbz	r1, 80082f2 <_reclaim_reent+0x5e>
 80082ec:	4620      	mov	r0, r4
 80082ee:	f000 f89f 	bl	8008430 <_free_r>
 80082f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80082f4:	b111      	cbz	r1, 80082fc <_reclaim_reent+0x68>
 80082f6:	4620      	mov	r0, r4
 80082f8:	f000 f89a 	bl	8008430 <_free_r>
 80082fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80082fe:	b111      	cbz	r1, 8008306 <_reclaim_reent+0x72>
 8008300:	4620      	mov	r0, r4
 8008302:	f000 f895 	bl	8008430 <_free_r>
 8008306:	6a23      	ldr	r3, [r4, #32]
 8008308:	b1b3      	cbz	r3, 8008338 <_reclaim_reent+0xa4>
 800830a:	4620      	mov	r0, r4
 800830c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008310:	4718      	bx	r3
 8008312:	5949      	ldr	r1, [r1, r5]
 8008314:	b941      	cbnz	r1, 8008328 <_reclaim_reent+0x94>
 8008316:	3504      	adds	r5, #4
 8008318:	69e3      	ldr	r3, [r4, #28]
 800831a:	2d80      	cmp	r5, #128	; 0x80
 800831c:	68d9      	ldr	r1, [r3, #12]
 800831e:	d1f8      	bne.n	8008312 <_reclaim_reent+0x7e>
 8008320:	4620      	mov	r0, r4
 8008322:	f000 f885 	bl	8008430 <_free_r>
 8008326:	e7c0      	b.n	80082aa <_reclaim_reent+0x16>
 8008328:	680e      	ldr	r6, [r1, #0]
 800832a:	4620      	mov	r0, r4
 800832c:	f000 f880 	bl	8008430 <_free_r>
 8008330:	4631      	mov	r1, r6
 8008332:	e7ef      	b.n	8008314 <_reclaim_reent+0x80>
 8008334:	2500      	movs	r5, #0
 8008336:	e7ef      	b.n	8008318 <_reclaim_reent+0x84>
 8008338:	bd70      	pop	{r4, r5, r6, pc}
 800833a:	bf00      	nop
 800833c:	200000cc 	.word	0x200000cc

08008340 <_lseek_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4d07      	ldr	r5, [pc, #28]	; (8008360 <_lseek_r+0x20>)
 8008344:	4604      	mov	r4, r0
 8008346:	4608      	mov	r0, r1
 8008348:	4611      	mov	r1, r2
 800834a:	2200      	movs	r2, #0
 800834c:	602a      	str	r2, [r5, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	f7f8 fdc4 	bl	8000edc <_lseek>
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	d102      	bne.n	800835e <_lseek_r+0x1e>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	b103      	cbz	r3, 800835e <_lseek_r+0x1e>
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	bd38      	pop	{r3, r4, r5, pc}
 8008360:	20004e0c 	.word	0x20004e0c

08008364 <_read_r>:
 8008364:	b538      	push	{r3, r4, r5, lr}
 8008366:	4d07      	ldr	r5, [pc, #28]	; (8008384 <_read_r+0x20>)
 8008368:	4604      	mov	r4, r0
 800836a:	4608      	mov	r0, r1
 800836c:	4611      	mov	r1, r2
 800836e:	2200      	movs	r2, #0
 8008370:	602a      	str	r2, [r5, #0]
 8008372:	461a      	mov	r2, r3
 8008374:	f7f8 fd52 	bl	8000e1c <_read>
 8008378:	1c43      	adds	r3, r0, #1
 800837a:	d102      	bne.n	8008382 <_read_r+0x1e>
 800837c:	682b      	ldr	r3, [r5, #0]
 800837e:	b103      	cbz	r3, 8008382 <_read_r+0x1e>
 8008380:	6023      	str	r3, [r4, #0]
 8008382:	bd38      	pop	{r3, r4, r5, pc}
 8008384:	20004e0c 	.word	0x20004e0c

08008388 <_write_r>:
 8008388:	b538      	push	{r3, r4, r5, lr}
 800838a:	4d07      	ldr	r5, [pc, #28]	; (80083a8 <_write_r+0x20>)
 800838c:	4604      	mov	r4, r0
 800838e:	4608      	mov	r0, r1
 8008390:	4611      	mov	r1, r2
 8008392:	2200      	movs	r2, #0
 8008394:	602a      	str	r2, [r5, #0]
 8008396:	461a      	mov	r2, r3
 8008398:	f7f8 fd5d 	bl	8000e56 <_write>
 800839c:	1c43      	adds	r3, r0, #1
 800839e:	d102      	bne.n	80083a6 <_write_r+0x1e>
 80083a0:	682b      	ldr	r3, [r5, #0]
 80083a2:	b103      	cbz	r3, 80083a6 <_write_r+0x1e>
 80083a4:	6023      	str	r3, [r4, #0]
 80083a6:	bd38      	pop	{r3, r4, r5, pc}
 80083a8:	20004e0c 	.word	0x20004e0c

080083ac <__errno>:
 80083ac:	4b01      	ldr	r3, [pc, #4]	; (80083b4 <__errno+0x8>)
 80083ae:	6818      	ldr	r0, [r3, #0]
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	200000cc 	.word	0x200000cc

080083b8 <__libc_init_array>:
 80083b8:	b570      	push	{r4, r5, r6, lr}
 80083ba:	4d0d      	ldr	r5, [pc, #52]	; (80083f0 <__libc_init_array+0x38>)
 80083bc:	4c0d      	ldr	r4, [pc, #52]	; (80083f4 <__libc_init_array+0x3c>)
 80083be:	1b64      	subs	r4, r4, r5
 80083c0:	10a4      	asrs	r4, r4, #2
 80083c2:	2600      	movs	r6, #0
 80083c4:	42a6      	cmp	r6, r4
 80083c6:	d109      	bne.n	80083dc <__libc_init_array+0x24>
 80083c8:	4d0b      	ldr	r5, [pc, #44]	; (80083f8 <__libc_init_array+0x40>)
 80083ca:	4c0c      	ldr	r4, [pc, #48]	; (80083fc <__libc_init_array+0x44>)
 80083cc:	f000 fd6a 	bl	8008ea4 <_init>
 80083d0:	1b64      	subs	r4, r4, r5
 80083d2:	10a4      	asrs	r4, r4, #2
 80083d4:	2600      	movs	r6, #0
 80083d6:	42a6      	cmp	r6, r4
 80083d8:	d105      	bne.n	80083e6 <__libc_init_array+0x2e>
 80083da:	bd70      	pop	{r4, r5, r6, pc}
 80083dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80083e0:	4798      	blx	r3
 80083e2:	3601      	adds	r6, #1
 80083e4:	e7ee      	b.n	80083c4 <__libc_init_array+0xc>
 80083e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ea:	4798      	blx	r3
 80083ec:	3601      	adds	r6, #1
 80083ee:	e7f2      	b.n	80083d6 <__libc_init_array+0x1e>
 80083f0:	08009208 	.word	0x08009208
 80083f4:	08009208 	.word	0x08009208
 80083f8:	08009208 	.word	0x08009208
 80083fc:	0800920c 	.word	0x0800920c

08008400 <__retarget_lock_init_recursive>:
 8008400:	4770      	bx	lr

08008402 <__retarget_lock_acquire_recursive>:
 8008402:	4770      	bx	lr

08008404 <__retarget_lock_release_recursive>:
 8008404:	4770      	bx	lr

08008406 <memcpy>:
 8008406:	440a      	add	r2, r1
 8008408:	4291      	cmp	r1, r2
 800840a:	f100 33ff 	add.w	r3, r0, #4294967295
 800840e:	d100      	bne.n	8008412 <memcpy+0xc>
 8008410:	4770      	bx	lr
 8008412:	b510      	push	{r4, lr}
 8008414:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800841c:	4291      	cmp	r1, r2
 800841e:	d1f9      	bne.n	8008414 <memcpy+0xe>
 8008420:	bd10      	pop	{r4, pc}

08008422 <abort>:
 8008422:	b508      	push	{r3, lr}
 8008424:	2006      	movs	r0, #6
 8008426:	f000 fc8d 	bl	8008d44 <raise>
 800842a:	2001      	movs	r0, #1
 800842c:	f7f8 fcec 	bl	8000e08 <_exit>

08008430 <_free_r>:
 8008430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008432:	2900      	cmp	r1, #0
 8008434:	d044      	beq.n	80084c0 <_free_r+0x90>
 8008436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800843a:	9001      	str	r0, [sp, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	f1a1 0404 	sub.w	r4, r1, #4
 8008442:	bfb8      	it	lt
 8008444:	18e4      	addlt	r4, r4, r3
 8008446:	f000 f8df 	bl	8008608 <__malloc_lock>
 800844a:	4a1e      	ldr	r2, [pc, #120]	; (80084c4 <_free_r+0x94>)
 800844c:	9801      	ldr	r0, [sp, #4]
 800844e:	6813      	ldr	r3, [r2, #0]
 8008450:	b933      	cbnz	r3, 8008460 <_free_r+0x30>
 8008452:	6063      	str	r3, [r4, #4]
 8008454:	6014      	str	r4, [r2, #0]
 8008456:	b003      	add	sp, #12
 8008458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800845c:	f000 b8da 	b.w	8008614 <__malloc_unlock>
 8008460:	42a3      	cmp	r3, r4
 8008462:	d908      	bls.n	8008476 <_free_r+0x46>
 8008464:	6825      	ldr	r5, [r4, #0]
 8008466:	1961      	adds	r1, r4, r5
 8008468:	428b      	cmp	r3, r1
 800846a:	bf01      	itttt	eq
 800846c:	6819      	ldreq	r1, [r3, #0]
 800846e:	685b      	ldreq	r3, [r3, #4]
 8008470:	1949      	addeq	r1, r1, r5
 8008472:	6021      	streq	r1, [r4, #0]
 8008474:	e7ed      	b.n	8008452 <_free_r+0x22>
 8008476:	461a      	mov	r2, r3
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	b10b      	cbz	r3, 8008480 <_free_r+0x50>
 800847c:	42a3      	cmp	r3, r4
 800847e:	d9fa      	bls.n	8008476 <_free_r+0x46>
 8008480:	6811      	ldr	r1, [r2, #0]
 8008482:	1855      	adds	r5, r2, r1
 8008484:	42a5      	cmp	r5, r4
 8008486:	d10b      	bne.n	80084a0 <_free_r+0x70>
 8008488:	6824      	ldr	r4, [r4, #0]
 800848a:	4421      	add	r1, r4
 800848c:	1854      	adds	r4, r2, r1
 800848e:	42a3      	cmp	r3, r4
 8008490:	6011      	str	r1, [r2, #0]
 8008492:	d1e0      	bne.n	8008456 <_free_r+0x26>
 8008494:	681c      	ldr	r4, [r3, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	6053      	str	r3, [r2, #4]
 800849a:	440c      	add	r4, r1
 800849c:	6014      	str	r4, [r2, #0]
 800849e:	e7da      	b.n	8008456 <_free_r+0x26>
 80084a0:	d902      	bls.n	80084a8 <_free_r+0x78>
 80084a2:	230c      	movs	r3, #12
 80084a4:	6003      	str	r3, [r0, #0]
 80084a6:	e7d6      	b.n	8008456 <_free_r+0x26>
 80084a8:	6825      	ldr	r5, [r4, #0]
 80084aa:	1961      	adds	r1, r4, r5
 80084ac:	428b      	cmp	r3, r1
 80084ae:	bf04      	itt	eq
 80084b0:	6819      	ldreq	r1, [r3, #0]
 80084b2:	685b      	ldreq	r3, [r3, #4]
 80084b4:	6063      	str	r3, [r4, #4]
 80084b6:	bf04      	itt	eq
 80084b8:	1949      	addeq	r1, r1, r5
 80084ba:	6021      	streq	r1, [r4, #0]
 80084bc:	6054      	str	r4, [r2, #4]
 80084be:	e7ca      	b.n	8008456 <_free_r+0x26>
 80084c0:	b003      	add	sp, #12
 80084c2:	bd30      	pop	{r4, r5, pc}
 80084c4:	20004e14 	.word	0x20004e14

080084c8 <sbrk_aligned>:
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	4e0e      	ldr	r6, [pc, #56]	; (8008504 <sbrk_aligned+0x3c>)
 80084cc:	460c      	mov	r4, r1
 80084ce:	6831      	ldr	r1, [r6, #0]
 80084d0:	4605      	mov	r5, r0
 80084d2:	b911      	cbnz	r1, 80084da <sbrk_aligned+0x12>
 80084d4:	f000 fc52 	bl	8008d7c <_sbrk_r>
 80084d8:	6030      	str	r0, [r6, #0]
 80084da:	4621      	mov	r1, r4
 80084dc:	4628      	mov	r0, r5
 80084de:	f000 fc4d 	bl	8008d7c <_sbrk_r>
 80084e2:	1c43      	adds	r3, r0, #1
 80084e4:	d00a      	beq.n	80084fc <sbrk_aligned+0x34>
 80084e6:	1cc4      	adds	r4, r0, #3
 80084e8:	f024 0403 	bic.w	r4, r4, #3
 80084ec:	42a0      	cmp	r0, r4
 80084ee:	d007      	beq.n	8008500 <sbrk_aligned+0x38>
 80084f0:	1a21      	subs	r1, r4, r0
 80084f2:	4628      	mov	r0, r5
 80084f4:	f000 fc42 	bl	8008d7c <_sbrk_r>
 80084f8:	3001      	adds	r0, #1
 80084fa:	d101      	bne.n	8008500 <sbrk_aligned+0x38>
 80084fc:	f04f 34ff 	mov.w	r4, #4294967295
 8008500:	4620      	mov	r0, r4
 8008502:	bd70      	pop	{r4, r5, r6, pc}
 8008504:	20004e18 	.word	0x20004e18

08008508 <_malloc_r>:
 8008508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800850c:	1ccd      	adds	r5, r1, #3
 800850e:	f025 0503 	bic.w	r5, r5, #3
 8008512:	3508      	adds	r5, #8
 8008514:	2d0c      	cmp	r5, #12
 8008516:	bf38      	it	cc
 8008518:	250c      	movcc	r5, #12
 800851a:	2d00      	cmp	r5, #0
 800851c:	4607      	mov	r7, r0
 800851e:	db01      	blt.n	8008524 <_malloc_r+0x1c>
 8008520:	42a9      	cmp	r1, r5
 8008522:	d905      	bls.n	8008530 <_malloc_r+0x28>
 8008524:	230c      	movs	r3, #12
 8008526:	603b      	str	r3, [r7, #0]
 8008528:	2600      	movs	r6, #0
 800852a:	4630      	mov	r0, r6
 800852c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008530:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008604 <_malloc_r+0xfc>
 8008534:	f000 f868 	bl	8008608 <__malloc_lock>
 8008538:	f8d8 3000 	ldr.w	r3, [r8]
 800853c:	461c      	mov	r4, r3
 800853e:	bb5c      	cbnz	r4, 8008598 <_malloc_r+0x90>
 8008540:	4629      	mov	r1, r5
 8008542:	4638      	mov	r0, r7
 8008544:	f7ff ffc0 	bl	80084c8 <sbrk_aligned>
 8008548:	1c43      	adds	r3, r0, #1
 800854a:	4604      	mov	r4, r0
 800854c:	d155      	bne.n	80085fa <_malloc_r+0xf2>
 800854e:	f8d8 4000 	ldr.w	r4, [r8]
 8008552:	4626      	mov	r6, r4
 8008554:	2e00      	cmp	r6, #0
 8008556:	d145      	bne.n	80085e4 <_malloc_r+0xdc>
 8008558:	2c00      	cmp	r4, #0
 800855a:	d048      	beq.n	80085ee <_malloc_r+0xe6>
 800855c:	6823      	ldr	r3, [r4, #0]
 800855e:	4631      	mov	r1, r6
 8008560:	4638      	mov	r0, r7
 8008562:	eb04 0903 	add.w	r9, r4, r3
 8008566:	f000 fc09 	bl	8008d7c <_sbrk_r>
 800856a:	4581      	cmp	r9, r0
 800856c:	d13f      	bne.n	80085ee <_malloc_r+0xe6>
 800856e:	6821      	ldr	r1, [r4, #0]
 8008570:	1a6d      	subs	r5, r5, r1
 8008572:	4629      	mov	r1, r5
 8008574:	4638      	mov	r0, r7
 8008576:	f7ff ffa7 	bl	80084c8 <sbrk_aligned>
 800857a:	3001      	adds	r0, #1
 800857c:	d037      	beq.n	80085ee <_malloc_r+0xe6>
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	442b      	add	r3, r5
 8008582:	6023      	str	r3, [r4, #0]
 8008584:	f8d8 3000 	ldr.w	r3, [r8]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d038      	beq.n	80085fe <_malloc_r+0xf6>
 800858c:	685a      	ldr	r2, [r3, #4]
 800858e:	42a2      	cmp	r2, r4
 8008590:	d12b      	bne.n	80085ea <_malloc_r+0xe2>
 8008592:	2200      	movs	r2, #0
 8008594:	605a      	str	r2, [r3, #4]
 8008596:	e00f      	b.n	80085b8 <_malloc_r+0xb0>
 8008598:	6822      	ldr	r2, [r4, #0]
 800859a:	1b52      	subs	r2, r2, r5
 800859c:	d41f      	bmi.n	80085de <_malloc_r+0xd6>
 800859e:	2a0b      	cmp	r2, #11
 80085a0:	d917      	bls.n	80085d2 <_malloc_r+0xca>
 80085a2:	1961      	adds	r1, r4, r5
 80085a4:	42a3      	cmp	r3, r4
 80085a6:	6025      	str	r5, [r4, #0]
 80085a8:	bf18      	it	ne
 80085aa:	6059      	strne	r1, [r3, #4]
 80085ac:	6863      	ldr	r3, [r4, #4]
 80085ae:	bf08      	it	eq
 80085b0:	f8c8 1000 	streq.w	r1, [r8]
 80085b4:	5162      	str	r2, [r4, r5]
 80085b6:	604b      	str	r3, [r1, #4]
 80085b8:	4638      	mov	r0, r7
 80085ba:	f104 060b 	add.w	r6, r4, #11
 80085be:	f000 f829 	bl	8008614 <__malloc_unlock>
 80085c2:	f026 0607 	bic.w	r6, r6, #7
 80085c6:	1d23      	adds	r3, r4, #4
 80085c8:	1af2      	subs	r2, r6, r3
 80085ca:	d0ae      	beq.n	800852a <_malloc_r+0x22>
 80085cc:	1b9b      	subs	r3, r3, r6
 80085ce:	50a3      	str	r3, [r4, r2]
 80085d0:	e7ab      	b.n	800852a <_malloc_r+0x22>
 80085d2:	42a3      	cmp	r3, r4
 80085d4:	6862      	ldr	r2, [r4, #4]
 80085d6:	d1dd      	bne.n	8008594 <_malloc_r+0x8c>
 80085d8:	f8c8 2000 	str.w	r2, [r8]
 80085dc:	e7ec      	b.n	80085b8 <_malloc_r+0xb0>
 80085de:	4623      	mov	r3, r4
 80085e0:	6864      	ldr	r4, [r4, #4]
 80085e2:	e7ac      	b.n	800853e <_malloc_r+0x36>
 80085e4:	4634      	mov	r4, r6
 80085e6:	6876      	ldr	r6, [r6, #4]
 80085e8:	e7b4      	b.n	8008554 <_malloc_r+0x4c>
 80085ea:	4613      	mov	r3, r2
 80085ec:	e7cc      	b.n	8008588 <_malloc_r+0x80>
 80085ee:	230c      	movs	r3, #12
 80085f0:	603b      	str	r3, [r7, #0]
 80085f2:	4638      	mov	r0, r7
 80085f4:	f000 f80e 	bl	8008614 <__malloc_unlock>
 80085f8:	e797      	b.n	800852a <_malloc_r+0x22>
 80085fa:	6025      	str	r5, [r4, #0]
 80085fc:	e7dc      	b.n	80085b8 <_malloc_r+0xb0>
 80085fe:	605b      	str	r3, [r3, #4]
 8008600:	deff      	udf	#255	; 0xff
 8008602:	bf00      	nop
 8008604:	20004e14 	.word	0x20004e14

08008608 <__malloc_lock>:
 8008608:	4801      	ldr	r0, [pc, #4]	; (8008610 <__malloc_lock+0x8>)
 800860a:	f7ff befa 	b.w	8008402 <__retarget_lock_acquire_recursive>
 800860e:	bf00      	nop
 8008610:	20004e10 	.word	0x20004e10

08008614 <__malloc_unlock>:
 8008614:	4801      	ldr	r0, [pc, #4]	; (800861c <__malloc_unlock+0x8>)
 8008616:	f7ff bef5 	b.w	8008404 <__retarget_lock_release_recursive>
 800861a:	bf00      	nop
 800861c:	20004e10 	.word	0x20004e10

08008620 <__sfputc_r>:
 8008620:	6893      	ldr	r3, [r2, #8]
 8008622:	3b01      	subs	r3, #1
 8008624:	2b00      	cmp	r3, #0
 8008626:	b410      	push	{r4}
 8008628:	6093      	str	r3, [r2, #8]
 800862a:	da08      	bge.n	800863e <__sfputc_r+0x1e>
 800862c:	6994      	ldr	r4, [r2, #24]
 800862e:	42a3      	cmp	r3, r4
 8008630:	db01      	blt.n	8008636 <__sfputc_r+0x16>
 8008632:	290a      	cmp	r1, #10
 8008634:	d103      	bne.n	800863e <__sfputc_r+0x1e>
 8008636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800863a:	f000 bac5 	b.w	8008bc8 <__swbuf_r>
 800863e:	6813      	ldr	r3, [r2, #0]
 8008640:	1c58      	adds	r0, r3, #1
 8008642:	6010      	str	r0, [r2, #0]
 8008644:	7019      	strb	r1, [r3, #0]
 8008646:	4608      	mov	r0, r1
 8008648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800864c:	4770      	bx	lr

0800864e <__sfputs_r>:
 800864e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008650:	4606      	mov	r6, r0
 8008652:	460f      	mov	r7, r1
 8008654:	4614      	mov	r4, r2
 8008656:	18d5      	adds	r5, r2, r3
 8008658:	42ac      	cmp	r4, r5
 800865a:	d101      	bne.n	8008660 <__sfputs_r+0x12>
 800865c:	2000      	movs	r0, #0
 800865e:	e007      	b.n	8008670 <__sfputs_r+0x22>
 8008660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008664:	463a      	mov	r2, r7
 8008666:	4630      	mov	r0, r6
 8008668:	f7ff ffda 	bl	8008620 <__sfputc_r>
 800866c:	1c43      	adds	r3, r0, #1
 800866e:	d1f3      	bne.n	8008658 <__sfputs_r+0xa>
 8008670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008674 <_vfiprintf_r>:
 8008674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008678:	460d      	mov	r5, r1
 800867a:	b09d      	sub	sp, #116	; 0x74
 800867c:	4614      	mov	r4, r2
 800867e:	4698      	mov	r8, r3
 8008680:	4606      	mov	r6, r0
 8008682:	b118      	cbz	r0, 800868c <_vfiprintf_r+0x18>
 8008684:	6a03      	ldr	r3, [r0, #32]
 8008686:	b90b      	cbnz	r3, 800868c <_vfiprintf_r+0x18>
 8008688:	f7ff fd4e 	bl	8008128 <__sinit>
 800868c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800868e:	07d9      	lsls	r1, r3, #31
 8008690:	d405      	bmi.n	800869e <_vfiprintf_r+0x2a>
 8008692:	89ab      	ldrh	r3, [r5, #12]
 8008694:	059a      	lsls	r2, r3, #22
 8008696:	d402      	bmi.n	800869e <_vfiprintf_r+0x2a>
 8008698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800869a:	f7ff feb2 	bl	8008402 <__retarget_lock_acquire_recursive>
 800869e:	89ab      	ldrh	r3, [r5, #12]
 80086a0:	071b      	lsls	r3, r3, #28
 80086a2:	d501      	bpl.n	80086a8 <_vfiprintf_r+0x34>
 80086a4:	692b      	ldr	r3, [r5, #16]
 80086a6:	b99b      	cbnz	r3, 80086d0 <_vfiprintf_r+0x5c>
 80086a8:	4629      	mov	r1, r5
 80086aa:	4630      	mov	r0, r6
 80086ac:	f000 faca 	bl	8008c44 <__swsetup_r>
 80086b0:	b170      	cbz	r0, 80086d0 <_vfiprintf_r+0x5c>
 80086b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086b4:	07dc      	lsls	r4, r3, #31
 80086b6:	d504      	bpl.n	80086c2 <_vfiprintf_r+0x4e>
 80086b8:	f04f 30ff 	mov.w	r0, #4294967295
 80086bc:	b01d      	add	sp, #116	; 0x74
 80086be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c2:	89ab      	ldrh	r3, [r5, #12]
 80086c4:	0598      	lsls	r0, r3, #22
 80086c6:	d4f7      	bmi.n	80086b8 <_vfiprintf_r+0x44>
 80086c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086ca:	f7ff fe9b 	bl	8008404 <__retarget_lock_release_recursive>
 80086ce:	e7f3      	b.n	80086b8 <_vfiprintf_r+0x44>
 80086d0:	2300      	movs	r3, #0
 80086d2:	9309      	str	r3, [sp, #36]	; 0x24
 80086d4:	2320      	movs	r3, #32
 80086d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086da:	f8cd 800c 	str.w	r8, [sp, #12]
 80086de:	2330      	movs	r3, #48	; 0x30
 80086e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008894 <_vfiprintf_r+0x220>
 80086e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086e8:	f04f 0901 	mov.w	r9, #1
 80086ec:	4623      	mov	r3, r4
 80086ee:	469a      	mov	sl, r3
 80086f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086f4:	b10a      	cbz	r2, 80086fa <_vfiprintf_r+0x86>
 80086f6:	2a25      	cmp	r2, #37	; 0x25
 80086f8:	d1f9      	bne.n	80086ee <_vfiprintf_r+0x7a>
 80086fa:	ebba 0b04 	subs.w	fp, sl, r4
 80086fe:	d00b      	beq.n	8008718 <_vfiprintf_r+0xa4>
 8008700:	465b      	mov	r3, fp
 8008702:	4622      	mov	r2, r4
 8008704:	4629      	mov	r1, r5
 8008706:	4630      	mov	r0, r6
 8008708:	f7ff ffa1 	bl	800864e <__sfputs_r>
 800870c:	3001      	adds	r0, #1
 800870e:	f000 80a9 	beq.w	8008864 <_vfiprintf_r+0x1f0>
 8008712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008714:	445a      	add	r2, fp
 8008716:	9209      	str	r2, [sp, #36]	; 0x24
 8008718:	f89a 3000 	ldrb.w	r3, [sl]
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 80a1 	beq.w	8008864 <_vfiprintf_r+0x1f0>
 8008722:	2300      	movs	r3, #0
 8008724:	f04f 32ff 	mov.w	r2, #4294967295
 8008728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800872c:	f10a 0a01 	add.w	sl, sl, #1
 8008730:	9304      	str	r3, [sp, #16]
 8008732:	9307      	str	r3, [sp, #28]
 8008734:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008738:	931a      	str	r3, [sp, #104]	; 0x68
 800873a:	4654      	mov	r4, sl
 800873c:	2205      	movs	r2, #5
 800873e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008742:	4854      	ldr	r0, [pc, #336]	; (8008894 <_vfiprintf_r+0x220>)
 8008744:	f7f7 fd64 	bl	8000210 <memchr>
 8008748:	9a04      	ldr	r2, [sp, #16]
 800874a:	b9d8      	cbnz	r0, 8008784 <_vfiprintf_r+0x110>
 800874c:	06d1      	lsls	r1, r2, #27
 800874e:	bf44      	itt	mi
 8008750:	2320      	movmi	r3, #32
 8008752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008756:	0713      	lsls	r3, r2, #28
 8008758:	bf44      	itt	mi
 800875a:	232b      	movmi	r3, #43	; 0x2b
 800875c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008760:	f89a 3000 	ldrb.w	r3, [sl]
 8008764:	2b2a      	cmp	r3, #42	; 0x2a
 8008766:	d015      	beq.n	8008794 <_vfiprintf_r+0x120>
 8008768:	9a07      	ldr	r2, [sp, #28]
 800876a:	4654      	mov	r4, sl
 800876c:	2000      	movs	r0, #0
 800876e:	f04f 0c0a 	mov.w	ip, #10
 8008772:	4621      	mov	r1, r4
 8008774:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008778:	3b30      	subs	r3, #48	; 0x30
 800877a:	2b09      	cmp	r3, #9
 800877c:	d94d      	bls.n	800881a <_vfiprintf_r+0x1a6>
 800877e:	b1b0      	cbz	r0, 80087ae <_vfiprintf_r+0x13a>
 8008780:	9207      	str	r2, [sp, #28]
 8008782:	e014      	b.n	80087ae <_vfiprintf_r+0x13a>
 8008784:	eba0 0308 	sub.w	r3, r0, r8
 8008788:	fa09 f303 	lsl.w	r3, r9, r3
 800878c:	4313      	orrs	r3, r2
 800878e:	9304      	str	r3, [sp, #16]
 8008790:	46a2      	mov	sl, r4
 8008792:	e7d2      	b.n	800873a <_vfiprintf_r+0xc6>
 8008794:	9b03      	ldr	r3, [sp, #12]
 8008796:	1d19      	adds	r1, r3, #4
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	9103      	str	r1, [sp, #12]
 800879c:	2b00      	cmp	r3, #0
 800879e:	bfbb      	ittet	lt
 80087a0:	425b      	neglt	r3, r3
 80087a2:	f042 0202 	orrlt.w	r2, r2, #2
 80087a6:	9307      	strge	r3, [sp, #28]
 80087a8:	9307      	strlt	r3, [sp, #28]
 80087aa:	bfb8      	it	lt
 80087ac:	9204      	strlt	r2, [sp, #16]
 80087ae:	7823      	ldrb	r3, [r4, #0]
 80087b0:	2b2e      	cmp	r3, #46	; 0x2e
 80087b2:	d10c      	bne.n	80087ce <_vfiprintf_r+0x15a>
 80087b4:	7863      	ldrb	r3, [r4, #1]
 80087b6:	2b2a      	cmp	r3, #42	; 0x2a
 80087b8:	d134      	bne.n	8008824 <_vfiprintf_r+0x1b0>
 80087ba:	9b03      	ldr	r3, [sp, #12]
 80087bc:	1d1a      	adds	r2, r3, #4
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	9203      	str	r2, [sp, #12]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	bfb8      	it	lt
 80087c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80087ca:	3402      	adds	r4, #2
 80087cc:	9305      	str	r3, [sp, #20]
 80087ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80088a4 <_vfiprintf_r+0x230>
 80087d2:	7821      	ldrb	r1, [r4, #0]
 80087d4:	2203      	movs	r2, #3
 80087d6:	4650      	mov	r0, sl
 80087d8:	f7f7 fd1a 	bl	8000210 <memchr>
 80087dc:	b138      	cbz	r0, 80087ee <_vfiprintf_r+0x17a>
 80087de:	9b04      	ldr	r3, [sp, #16]
 80087e0:	eba0 000a 	sub.w	r0, r0, sl
 80087e4:	2240      	movs	r2, #64	; 0x40
 80087e6:	4082      	lsls	r2, r0
 80087e8:	4313      	orrs	r3, r2
 80087ea:	3401      	adds	r4, #1
 80087ec:	9304      	str	r3, [sp, #16]
 80087ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087f2:	4829      	ldr	r0, [pc, #164]	; (8008898 <_vfiprintf_r+0x224>)
 80087f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087f8:	2206      	movs	r2, #6
 80087fa:	f7f7 fd09 	bl	8000210 <memchr>
 80087fe:	2800      	cmp	r0, #0
 8008800:	d03f      	beq.n	8008882 <_vfiprintf_r+0x20e>
 8008802:	4b26      	ldr	r3, [pc, #152]	; (800889c <_vfiprintf_r+0x228>)
 8008804:	bb1b      	cbnz	r3, 800884e <_vfiprintf_r+0x1da>
 8008806:	9b03      	ldr	r3, [sp, #12]
 8008808:	3307      	adds	r3, #7
 800880a:	f023 0307 	bic.w	r3, r3, #7
 800880e:	3308      	adds	r3, #8
 8008810:	9303      	str	r3, [sp, #12]
 8008812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008814:	443b      	add	r3, r7
 8008816:	9309      	str	r3, [sp, #36]	; 0x24
 8008818:	e768      	b.n	80086ec <_vfiprintf_r+0x78>
 800881a:	fb0c 3202 	mla	r2, ip, r2, r3
 800881e:	460c      	mov	r4, r1
 8008820:	2001      	movs	r0, #1
 8008822:	e7a6      	b.n	8008772 <_vfiprintf_r+0xfe>
 8008824:	2300      	movs	r3, #0
 8008826:	3401      	adds	r4, #1
 8008828:	9305      	str	r3, [sp, #20]
 800882a:	4619      	mov	r1, r3
 800882c:	f04f 0c0a 	mov.w	ip, #10
 8008830:	4620      	mov	r0, r4
 8008832:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008836:	3a30      	subs	r2, #48	; 0x30
 8008838:	2a09      	cmp	r2, #9
 800883a:	d903      	bls.n	8008844 <_vfiprintf_r+0x1d0>
 800883c:	2b00      	cmp	r3, #0
 800883e:	d0c6      	beq.n	80087ce <_vfiprintf_r+0x15a>
 8008840:	9105      	str	r1, [sp, #20]
 8008842:	e7c4      	b.n	80087ce <_vfiprintf_r+0x15a>
 8008844:	fb0c 2101 	mla	r1, ip, r1, r2
 8008848:	4604      	mov	r4, r0
 800884a:	2301      	movs	r3, #1
 800884c:	e7f0      	b.n	8008830 <_vfiprintf_r+0x1bc>
 800884e:	ab03      	add	r3, sp, #12
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	462a      	mov	r2, r5
 8008854:	4b12      	ldr	r3, [pc, #72]	; (80088a0 <_vfiprintf_r+0x22c>)
 8008856:	a904      	add	r1, sp, #16
 8008858:	4630      	mov	r0, r6
 800885a:	f3af 8000 	nop.w
 800885e:	4607      	mov	r7, r0
 8008860:	1c78      	adds	r0, r7, #1
 8008862:	d1d6      	bne.n	8008812 <_vfiprintf_r+0x19e>
 8008864:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008866:	07d9      	lsls	r1, r3, #31
 8008868:	d405      	bmi.n	8008876 <_vfiprintf_r+0x202>
 800886a:	89ab      	ldrh	r3, [r5, #12]
 800886c:	059a      	lsls	r2, r3, #22
 800886e:	d402      	bmi.n	8008876 <_vfiprintf_r+0x202>
 8008870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008872:	f7ff fdc7 	bl	8008404 <__retarget_lock_release_recursive>
 8008876:	89ab      	ldrh	r3, [r5, #12]
 8008878:	065b      	lsls	r3, r3, #25
 800887a:	f53f af1d 	bmi.w	80086b8 <_vfiprintf_r+0x44>
 800887e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008880:	e71c      	b.n	80086bc <_vfiprintf_r+0x48>
 8008882:	ab03      	add	r3, sp, #12
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	462a      	mov	r2, r5
 8008888:	4b05      	ldr	r3, [pc, #20]	; (80088a0 <_vfiprintf_r+0x22c>)
 800888a:	a904      	add	r1, sp, #16
 800888c:	4630      	mov	r0, r6
 800888e:	f000 f879 	bl	8008984 <_printf_i>
 8008892:	e7e4      	b.n	800885e <_vfiprintf_r+0x1ea>
 8008894:	080091cb 	.word	0x080091cb
 8008898:	080091d5 	.word	0x080091d5
 800889c:	00000000 	.word	0x00000000
 80088a0:	0800864f 	.word	0x0800864f
 80088a4:	080091d1 	.word	0x080091d1

080088a8 <_printf_common>:
 80088a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ac:	4616      	mov	r6, r2
 80088ae:	4699      	mov	r9, r3
 80088b0:	688a      	ldr	r2, [r1, #8]
 80088b2:	690b      	ldr	r3, [r1, #16]
 80088b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088b8:	4293      	cmp	r3, r2
 80088ba:	bfb8      	it	lt
 80088bc:	4613      	movlt	r3, r2
 80088be:	6033      	str	r3, [r6, #0]
 80088c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088c4:	4607      	mov	r7, r0
 80088c6:	460c      	mov	r4, r1
 80088c8:	b10a      	cbz	r2, 80088ce <_printf_common+0x26>
 80088ca:	3301      	adds	r3, #1
 80088cc:	6033      	str	r3, [r6, #0]
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	0699      	lsls	r1, r3, #26
 80088d2:	bf42      	ittt	mi
 80088d4:	6833      	ldrmi	r3, [r6, #0]
 80088d6:	3302      	addmi	r3, #2
 80088d8:	6033      	strmi	r3, [r6, #0]
 80088da:	6825      	ldr	r5, [r4, #0]
 80088dc:	f015 0506 	ands.w	r5, r5, #6
 80088e0:	d106      	bne.n	80088f0 <_printf_common+0x48>
 80088e2:	f104 0a19 	add.w	sl, r4, #25
 80088e6:	68e3      	ldr	r3, [r4, #12]
 80088e8:	6832      	ldr	r2, [r6, #0]
 80088ea:	1a9b      	subs	r3, r3, r2
 80088ec:	42ab      	cmp	r3, r5
 80088ee:	dc26      	bgt.n	800893e <_printf_common+0x96>
 80088f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088f4:	1e13      	subs	r3, r2, #0
 80088f6:	6822      	ldr	r2, [r4, #0]
 80088f8:	bf18      	it	ne
 80088fa:	2301      	movne	r3, #1
 80088fc:	0692      	lsls	r2, r2, #26
 80088fe:	d42b      	bmi.n	8008958 <_printf_common+0xb0>
 8008900:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008904:	4649      	mov	r1, r9
 8008906:	4638      	mov	r0, r7
 8008908:	47c0      	blx	r8
 800890a:	3001      	adds	r0, #1
 800890c:	d01e      	beq.n	800894c <_printf_common+0xa4>
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	6922      	ldr	r2, [r4, #16]
 8008912:	f003 0306 	and.w	r3, r3, #6
 8008916:	2b04      	cmp	r3, #4
 8008918:	bf02      	ittt	eq
 800891a:	68e5      	ldreq	r5, [r4, #12]
 800891c:	6833      	ldreq	r3, [r6, #0]
 800891e:	1aed      	subeq	r5, r5, r3
 8008920:	68a3      	ldr	r3, [r4, #8]
 8008922:	bf0c      	ite	eq
 8008924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008928:	2500      	movne	r5, #0
 800892a:	4293      	cmp	r3, r2
 800892c:	bfc4      	itt	gt
 800892e:	1a9b      	subgt	r3, r3, r2
 8008930:	18ed      	addgt	r5, r5, r3
 8008932:	2600      	movs	r6, #0
 8008934:	341a      	adds	r4, #26
 8008936:	42b5      	cmp	r5, r6
 8008938:	d11a      	bne.n	8008970 <_printf_common+0xc8>
 800893a:	2000      	movs	r0, #0
 800893c:	e008      	b.n	8008950 <_printf_common+0xa8>
 800893e:	2301      	movs	r3, #1
 8008940:	4652      	mov	r2, sl
 8008942:	4649      	mov	r1, r9
 8008944:	4638      	mov	r0, r7
 8008946:	47c0      	blx	r8
 8008948:	3001      	adds	r0, #1
 800894a:	d103      	bne.n	8008954 <_printf_common+0xac>
 800894c:	f04f 30ff 	mov.w	r0, #4294967295
 8008950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008954:	3501      	adds	r5, #1
 8008956:	e7c6      	b.n	80088e6 <_printf_common+0x3e>
 8008958:	18e1      	adds	r1, r4, r3
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	2030      	movs	r0, #48	; 0x30
 800895e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008962:	4422      	add	r2, r4
 8008964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800896c:	3302      	adds	r3, #2
 800896e:	e7c7      	b.n	8008900 <_printf_common+0x58>
 8008970:	2301      	movs	r3, #1
 8008972:	4622      	mov	r2, r4
 8008974:	4649      	mov	r1, r9
 8008976:	4638      	mov	r0, r7
 8008978:	47c0      	blx	r8
 800897a:	3001      	adds	r0, #1
 800897c:	d0e6      	beq.n	800894c <_printf_common+0xa4>
 800897e:	3601      	adds	r6, #1
 8008980:	e7d9      	b.n	8008936 <_printf_common+0x8e>
	...

08008984 <_printf_i>:
 8008984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008988:	7e0f      	ldrb	r7, [r1, #24]
 800898a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800898c:	2f78      	cmp	r7, #120	; 0x78
 800898e:	4691      	mov	r9, r2
 8008990:	4680      	mov	r8, r0
 8008992:	460c      	mov	r4, r1
 8008994:	469a      	mov	sl, r3
 8008996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800899a:	d807      	bhi.n	80089ac <_printf_i+0x28>
 800899c:	2f62      	cmp	r7, #98	; 0x62
 800899e:	d80a      	bhi.n	80089b6 <_printf_i+0x32>
 80089a0:	2f00      	cmp	r7, #0
 80089a2:	f000 80d4 	beq.w	8008b4e <_printf_i+0x1ca>
 80089a6:	2f58      	cmp	r7, #88	; 0x58
 80089a8:	f000 80c0 	beq.w	8008b2c <_printf_i+0x1a8>
 80089ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089b4:	e03a      	b.n	8008a2c <_printf_i+0xa8>
 80089b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089ba:	2b15      	cmp	r3, #21
 80089bc:	d8f6      	bhi.n	80089ac <_printf_i+0x28>
 80089be:	a101      	add	r1, pc, #4	; (adr r1, 80089c4 <_printf_i+0x40>)
 80089c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089c4:	08008a1d 	.word	0x08008a1d
 80089c8:	08008a31 	.word	0x08008a31
 80089cc:	080089ad 	.word	0x080089ad
 80089d0:	080089ad 	.word	0x080089ad
 80089d4:	080089ad 	.word	0x080089ad
 80089d8:	080089ad 	.word	0x080089ad
 80089dc:	08008a31 	.word	0x08008a31
 80089e0:	080089ad 	.word	0x080089ad
 80089e4:	080089ad 	.word	0x080089ad
 80089e8:	080089ad 	.word	0x080089ad
 80089ec:	080089ad 	.word	0x080089ad
 80089f0:	08008b35 	.word	0x08008b35
 80089f4:	08008a5d 	.word	0x08008a5d
 80089f8:	08008aef 	.word	0x08008aef
 80089fc:	080089ad 	.word	0x080089ad
 8008a00:	080089ad 	.word	0x080089ad
 8008a04:	08008b57 	.word	0x08008b57
 8008a08:	080089ad 	.word	0x080089ad
 8008a0c:	08008a5d 	.word	0x08008a5d
 8008a10:	080089ad 	.word	0x080089ad
 8008a14:	080089ad 	.word	0x080089ad
 8008a18:	08008af7 	.word	0x08008af7
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	1d1a      	adds	r2, r3, #4
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	602a      	str	r2, [r5, #0]
 8008a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e09f      	b.n	8008b70 <_printf_i+0x1ec>
 8008a30:	6820      	ldr	r0, [r4, #0]
 8008a32:	682b      	ldr	r3, [r5, #0]
 8008a34:	0607      	lsls	r7, r0, #24
 8008a36:	f103 0104 	add.w	r1, r3, #4
 8008a3a:	6029      	str	r1, [r5, #0]
 8008a3c:	d501      	bpl.n	8008a42 <_printf_i+0xbe>
 8008a3e:	681e      	ldr	r6, [r3, #0]
 8008a40:	e003      	b.n	8008a4a <_printf_i+0xc6>
 8008a42:	0646      	lsls	r6, r0, #25
 8008a44:	d5fb      	bpl.n	8008a3e <_printf_i+0xba>
 8008a46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008a4a:	2e00      	cmp	r6, #0
 8008a4c:	da03      	bge.n	8008a56 <_printf_i+0xd2>
 8008a4e:	232d      	movs	r3, #45	; 0x2d
 8008a50:	4276      	negs	r6, r6
 8008a52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a56:	485a      	ldr	r0, [pc, #360]	; (8008bc0 <_printf_i+0x23c>)
 8008a58:	230a      	movs	r3, #10
 8008a5a:	e012      	b.n	8008a82 <_printf_i+0xfe>
 8008a5c:	682b      	ldr	r3, [r5, #0]
 8008a5e:	6820      	ldr	r0, [r4, #0]
 8008a60:	1d19      	adds	r1, r3, #4
 8008a62:	6029      	str	r1, [r5, #0]
 8008a64:	0605      	lsls	r5, r0, #24
 8008a66:	d501      	bpl.n	8008a6c <_printf_i+0xe8>
 8008a68:	681e      	ldr	r6, [r3, #0]
 8008a6a:	e002      	b.n	8008a72 <_printf_i+0xee>
 8008a6c:	0641      	lsls	r1, r0, #25
 8008a6e:	d5fb      	bpl.n	8008a68 <_printf_i+0xe4>
 8008a70:	881e      	ldrh	r6, [r3, #0]
 8008a72:	4853      	ldr	r0, [pc, #332]	; (8008bc0 <_printf_i+0x23c>)
 8008a74:	2f6f      	cmp	r7, #111	; 0x6f
 8008a76:	bf0c      	ite	eq
 8008a78:	2308      	moveq	r3, #8
 8008a7a:	230a      	movne	r3, #10
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a82:	6865      	ldr	r5, [r4, #4]
 8008a84:	60a5      	str	r5, [r4, #8]
 8008a86:	2d00      	cmp	r5, #0
 8008a88:	bfa2      	ittt	ge
 8008a8a:	6821      	ldrge	r1, [r4, #0]
 8008a8c:	f021 0104 	bicge.w	r1, r1, #4
 8008a90:	6021      	strge	r1, [r4, #0]
 8008a92:	b90e      	cbnz	r6, 8008a98 <_printf_i+0x114>
 8008a94:	2d00      	cmp	r5, #0
 8008a96:	d04b      	beq.n	8008b30 <_printf_i+0x1ac>
 8008a98:	4615      	mov	r5, r2
 8008a9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a9e:	fb03 6711 	mls	r7, r3, r1, r6
 8008aa2:	5dc7      	ldrb	r7, [r0, r7]
 8008aa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008aa8:	4637      	mov	r7, r6
 8008aaa:	42bb      	cmp	r3, r7
 8008aac:	460e      	mov	r6, r1
 8008aae:	d9f4      	bls.n	8008a9a <_printf_i+0x116>
 8008ab0:	2b08      	cmp	r3, #8
 8008ab2:	d10b      	bne.n	8008acc <_printf_i+0x148>
 8008ab4:	6823      	ldr	r3, [r4, #0]
 8008ab6:	07de      	lsls	r6, r3, #31
 8008ab8:	d508      	bpl.n	8008acc <_printf_i+0x148>
 8008aba:	6923      	ldr	r3, [r4, #16]
 8008abc:	6861      	ldr	r1, [r4, #4]
 8008abe:	4299      	cmp	r1, r3
 8008ac0:	bfde      	ittt	le
 8008ac2:	2330      	movle	r3, #48	; 0x30
 8008ac4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ac8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008acc:	1b52      	subs	r2, r2, r5
 8008ace:	6122      	str	r2, [r4, #16]
 8008ad0:	f8cd a000 	str.w	sl, [sp]
 8008ad4:	464b      	mov	r3, r9
 8008ad6:	aa03      	add	r2, sp, #12
 8008ad8:	4621      	mov	r1, r4
 8008ada:	4640      	mov	r0, r8
 8008adc:	f7ff fee4 	bl	80088a8 <_printf_common>
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	d14a      	bne.n	8008b7a <_printf_i+0x1f6>
 8008ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae8:	b004      	add	sp, #16
 8008aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aee:	6823      	ldr	r3, [r4, #0]
 8008af0:	f043 0320 	orr.w	r3, r3, #32
 8008af4:	6023      	str	r3, [r4, #0]
 8008af6:	4833      	ldr	r0, [pc, #204]	; (8008bc4 <_printf_i+0x240>)
 8008af8:	2778      	movs	r7, #120	; 0x78
 8008afa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	6829      	ldr	r1, [r5, #0]
 8008b02:	061f      	lsls	r7, r3, #24
 8008b04:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b08:	d402      	bmi.n	8008b10 <_printf_i+0x18c>
 8008b0a:	065f      	lsls	r7, r3, #25
 8008b0c:	bf48      	it	mi
 8008b0e:	b2b6      	uxthmi	r6, r6
 8008b10:	07df      	lsls	r7, r3, #31
 8008b12:	bf48      	it	mi
 8008b14:	f043 0320 	orrmi.w	r3, r3, #32
 8008b18:	6029      	str	r1, [r5, #0]
 8008b1a:	bf48      	it	mi
 8008b1c:	6023      	strmi	r3, [r4, #0]
 8008b1e:	b91e      	cbnz	r6, 8008b28 <_printf_i+0x1a4>
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	f023 0320 	bic.w	r3, r3, #32
 8008b26:	6023      	str	r3, [r4, #0]
 8008b28:	2310      	movs	r3, #16
 8008b2a:	e7a7      	b.n	8008a7c <_printf_i+0xf8>
 8008b2c:	4824      	ldr	r0, [pc, #144]	; (8008bc0 <_printf_i+0x23c>)
 8008b2e:	e7e4      	b.n	8008afa <_printf_i+0x176>
 8008b30:	4615      	mov	r5, r2
 8008b32:	e7bd      	b.n	8008ab0 <_printf_i+0x12c>
 8008b34:	682b      	ldr	r3, [r5, #0]
 8008b36:	6826      	ldr	r6, [r4, #0]
 8008b38:	6961      	ldr	r1, [r4, #20]
 8008b3a:	1d18      	adds	r0, r3, #4
 8008b3c:	6028      	str	r0, [r5, #0]
 8008b3e:	0635      	lsls	r5, r6, #24
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	d501      	bpl.n	8008b48 <_printf_i+0x1c4>
 8008b44:	6019      	str	r1, [r3, #0]
 8008b46:	e002      	b.n	8008b4e <_printf_i+0x1ca>
 8008b48:	0670      	lsls	r0, r6, #25
 8008b4a:	d5fb      	bpl.n	8008b44 <_printf_i+0x1c0>
 8008b4c:	8019      	strh	r1, [r3, #0]
 8008b4e:	2300      	movs	r3, #0
 8008b50:	6123      	str	r3, [r4, #16]
 8008b52:	4615      	mov	r5, r2
 8008b54:	e7bc      	b.n	8008ad0 <_printf_i+0x14c>
 8008b56:	682b      	ldr	r3, [r5, #0]
 8008b58:	1d1a      	adds	r2, r3, #4
 8008b5a:	602a      	str	r2, [r5, #0]
 8008b5c:	681d      	ldr	r5, [r3, #0]
 8008b5e:	6862      	ldr	r2, [r4, #4]
 8008b60:	2100      	movs	r1, #0
 8008b62:	4628      	mov	r0, r5
 8008b64:	f7f7 fb54 	bl	8000210 <memchr>
 8008b68:	b108      	cbz	r0, 8008b6e <_printf_i+0x1ea>
 8008b6a:	1b40      	subs	r0, r0, r5
 8008b6c:	6060      	str	r0, [r4, #4]
 8008b6e:	6863      	ldr	r3, [r4, #4]
 8008b70:	6123      	str	r3, [r4, #16]
 8008b72:	2300      	movs	r3, #0
 8008b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b78:	e7aa      	b.n	8008ad0 <_printf_i+0x14c>
 8008b7a:	6923      	ldr	r3, [r4, #16]
 8008b7c:	462a      	mov	r2, r5
 8008b7e:	4649      	mov	r1, r9
 8008b80:	4640      	mov	r0, r8
 8008b82:	47d0      	blx	sl
 8008b84:	3001      	adds	r0, #1
 8008b86:	d0ad      	beq.n	8008ae4 <_printf_i+0x160>
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	079b      	lsls	r3, r3, #30
 8008b8c:	d413      	bmi.n	8008bb6 <_printf_i+0x232>
 8008b8e:	68e0      	ldr	r0, [r4, #12]
 8008b90:	9b03      	ldr	r3, [sp, #12]
 8008b92:	4298      	cmp	r0, r3
 8008b94:	bfb8      	it	lt
 8008b96:	4618      	movlt	r0, r3
 8008b98:	e7a6      	b.n	8008ae8 <_printf_i+0x164>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	4632      	mov	r2, r6
 8008b9e:	4649      	mov	r1, r9
 8008ba0:	4640      	mov	r0, r8
 8008ba2:	47d0      	blx	sl
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	d09d      	beq.n	8008ae4 <_printf_i+0x160>
 8008ba8:	3501      	adds	r5, #1
 8008baa:	68e3      	ldr	r3, [r4, #12]
 8008bac:	9903      	ldr	r1, [sp, #12]
 8008bae:	1a5b      	subs	r3, r3, r1
 8008bb0:	42ab      	cmp	r3, r5
 8008bb2:	dcf2      	bgt.n	8008b9a <_printf_i+0x216>
 8008bb4:	e7eb      	b.n	8008b8e <_printf_i+0x20a>
 8008bb6:	2500      	movs	r5, #0
 8008bb8:	f104 0619 	add.w	r6, r4, #25
 8008bbc:	e7f5      	b.n	8008baa <_printf_i+0x226>
 8008bbe:	bf00      	nop
 8008bc0:	080091dc 	.word	0x080091dc
 8008bc4:	080091ed 	.word	0x080091ed

08008bc8 <__swbuf_r>:
 8008bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bca:	460e      	mov	r6, r1
 8008bcc:	4614      	mov	r4, r2
 8008bce:	4605      	mov	r5, r0
 8008bd0:	b118      	cbz	r0, 8008bda <__swbuf_r+0x12>
 8008bd2:	6a03      	ldr	r3, [r0, #32]
 8008bd4:	b90b      	cbnz	r3, 8008bda <__swbuf_r+0x12>
 8008bd6:	f7ff faa7 	bl	8008128 <__sinit>
 8008bda:	69a3      	ldr	r3, [r4, #24]
 8008bdc:	60a3      	str	r3, [r4, #8]
 8008bde:	89a3      	ldrh	r3, [r4, #12]
 8008be0:	071a      	lsls	r2, r3, #28
 8008be2:	d525      	bpl.n	8008c30 <__swbuf_r+0x68>
 8008be4:	6923      	ldr	r3, [r4, #16]
 8008be6:	b31b      	cbz	r3, 8008c30 <__swbuf_r+0x68>
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	6922      	ldr	r2, [r4, #16]
 8008bec:	1a98      	subs	r0, r3, r2
 8008bee:	6963      	ldr	r3, [r4, #20]
 8008bf0:	b2f6      	uxtb	r6, r6
 8008bf2:	4283      	cmp	r3, r0
 8008bf4:	4637      	mov	r7, r6
 8008bf6:	dc04      	bgt.n	8008c02 <__swbuf_r+0x3a>
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	f7ff f9cc 	bl	8007f98 <_fflush_r>
 8008c00:	b9e0      	cbnz	r0, 8008c3c <__swbuf_r+0x74>
 8008c02:	68a3      	ldr	r3, [r4, #8]
 8008c04:	3b01      	subs	r3, #1
 8008c06:	60a3      	str	r3, [r4, #8]
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	1c5a      	adds	r2, r3, #1
 8008c0c:	6022      	str	r2, [r4, #0]
 8008c0e:	701e      	strb	r6, [r3, #0]
 8008c10:	6962      	ldr	r2, [r4, #20]
 8008c12:	1c43      	adds	r3, r0, #1
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d004      	beq.n	8008c22 <__swbuf_r+0x5a>
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	07db      	lsls	r3, r3, #31
 8008c1c:	d506      	bpl.n	8008c2c <__swbuf_r+0x64>
 8008c1e:	2e0a      	cmp	r6, #10
 8008c20:	d104      	bne.n	8008c2c <__swbuf_r+0x64>
 8008c22:	4621      	mov	r1, r4
 8008c24:	4628      	mov	r0, r5
 8008c26:	f7ff f9b7 	bl	8007f98 <_fflush_r>
 8008c2a:	b938      	cbnz	r0, 8008c3c <__swbuf_r+0x74>
 8008c2c:	4638      	mov	r0, r7
 8008c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c30:	4621      	mov	r1, r4
 8008c32:	4628      	mov	r0, r5
 8008c34:	f000 f806 	bl	8008c44 <__swsetup_r>
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	d0d5      	beq.n	8008be8 <__swbuf_r+0x20>
 8008c3c:	f04f 37ff 	mov.w	r7, #4294967295
 8008c40:	e7f4      	b.n	8008c2c <__swbuf_r+0x64>
	...

08008c44 <__swsetup_r>:
 8008c44:	b538      	push	{r3, r4, r5, lr}
 8008c46:	4b2a      	ldr	r3, [pc, #168]	; (8008cf0 <__swsetup_r+0xac>)
 8008c48:	4605      	mov	r5, r0
 8008c4a:	6818      	ldr	r0, [r3, #0]
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	b118      	cbz	r0, 8008c58 <__swsetup_r+0x14>
 8008c50:	6a03      	ldr	r3, [r0, #32]
 8008c52:	b90b      	cbnz	r3, 8008c58 <__swsetup_r+0x14>
 8008c54:	f7ff fa68 	bl	8008128 <__sinit>
 8008c58:	89a3      	ldrh	r3, [r4, #12]
 8008c5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c5e:	0718      	lsls	r0, r3, #28
 8008c60:	d422      	bmi.n	8008ca8 <__swsetup_r+0x64>
 8008c62:	06d9      	lsls	r1, r3, #27
 8008c64:	d407      	bmi.n	8008c76 <__swsetup_r+0x32>
 8008c66:	2309      	movs	r3, #9
 8008c68:	602b      	str	r3, [r5, #0]
 8008c6a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c6e:	81a3      	strh	r3, [r4, #12]
 8008c70:	f04f 30ff 	mov.w	r0, #4294967295
 8008c74:	e034      	b.n	8008ce0 <__swsetup_r+0x9c>
 8008c76:	0758      	lsls	r0, r3, #29
 8008c78:	d512      	bpl.n	8008ca0 <__swsetup_r+0x5c>
 8008c7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c7c:	b141      	cbz	r1, 8008c90 <__swsetup_r+0x4c>
 8008c7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c82:	4299      	cmp	r1, r3
 8008c84:	d002      	beq.n	8008c8c <__swsetup_r+0x48>
 8008c86:	4628      	mov	r0, r5
 8008c88:	f7ff fbd2 	bl	8008430 <_free_r>
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	6363      	str	r3, [r4, #52]	; 0x34
 8008c90:	89a3      	ldrh	r3, [r4, #12]
 8008c92:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c96:	81a3      	strh	r3, [r4, #12]
 8008c98:	2300      	movs	r3, #0
 8008c9a:	6063      	str	r3, [r4, #4]
 8008c9c:	6923      	ldr	r3, [r4, #16]
 8008c9e:	6023      	str	r3, [r4, #0]
 8008ca0:	89a3      	ldrh	r3, [r4, #12]
 8008ca2:	f043 0308 	orr.w	r3, r3, #8
 8008ca6:	81a3      	strh	r3, [r4, #12]
 8008ca8:	6923      	ldr	r3, [r4, #16]
 8008caa:	b94b      	cbnz	r3, 8008cc0 <__swsetup_r+0x7c>
 8008cac:	89a3      	ldrh	r3, [r4, #12]
 8008cae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cb6:	d003      	beq.n	8008cc0 <__swsetup_r+0x7c>
 8008cb8:	4621      	mov	r1, r4
 8008cba:	4628      	mov	r0, r5
 8008cbc:	f000 f894 	bl	8008de8 <__smakebuf_r>
 8008cc0:	89a0      	ldrh	r0, [r4, #12]
 8008cc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cc6:	f010 0301 	ands.w	r3, r0, #1
 8008cca:	d00a      	beq.n	8008ce2 <__swsetup_r+0x9e>
 8008ccc:	2300      	movs	r3, #0
 8008cce:	60a3      	str	r3, [r4, #8]
 8008cd0:	6963      	ldr	r3, [r4, #20]
 8008cd2:	425b      	negs	r3, r3
 8008cd4:	61a3      	str	r3, [r4, #24]
 8008cd6:	6923      	ldr	r3, [r4, #16]
 8008cd8:	b943      	cbnz	r3, 8008cec <__swsetup_r+0xa8>
 8008cda:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008cde:	d1c4      	bne.n	8008c6a <__swsetup_r+0x26>
 8008ce0:	bd38      	pop	{r3, r4, r5, pc}
 8008ce2:	0781      	lsls	r1, r0, #30
 8008ce4:	bf58      	it	pl
 8008ce6:	6963      	ldrpl	r3, [r4, #20]
 8008ce8:	60a3      	str	r3, [r4, #8]
 8008cea:	e7f4      	b.n	8008cd6 <__swsetup_r+0x92>
 8008cec:	2000      	movs	r0, #0
 8008cee:	e7f7      	b.n	8008ce0 <__swsetup_r+0x9c>
 8008cf0:	200000cc 	.word	0x200000cc

08008cf4 <_raise_r>:
 8008cf4:	291f      	cmp	r1, #31
 8008cf6:	b538      	push	{r3, r4, r5, lr}
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	460d      	mov	r5, r1
 8008cfc:	d904      	bls.n	8008d08 <_raise_r+0x14>
 8008cfe:	2316      	movs	r3, #22
 8008d00:	6003      	str	r3, [r0, #0]
 8008d02:	f04f 30ff 	mov.w	r0, #4294967295
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008d0a:	b112      	cbz	r2, 8008d12 <_raise_r+0x1e>
 8008d0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d10:	b94b      	cbnz	r3, 8008d26 <_raise_r+0x32>
 8008d12:	4620      	mov	r0, r4
 8008d14:	f000 f830 	bl	8008d78 <_getpid_r>
 8008d18:	462a      	mov	r2, r5
 8008d1a:	4601      	mov	r1, r0
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d22:	f000 b817 	b.w	8008d54 <_kill_r>
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d00a      	beq.n	8008d40 <_raise_r+0x4c>
 8008d2a:	1c59      	adds	r1, r3, #1
 8008d2c:	d103      	bne.n	8008d36 <_raise_r+0x42>
 8008d2e:	2316      	movs	r3, #22
 8008d30:	6003      	str	r3, [r0, #0]
 8008d32:	2001      	movs	r0, #1
 8008d34:	e7e7      	b.n	8008d06 <_raise_r+0x12>
 8008d36:	2400      	movs	r4, #0
 8008d38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	4798      	blx	r3
 8008d40:	2000      	movs	r0, #0
 8008d42:	e7e0      	b.n	8008d06 <_raise_r+0x12>

08008d44 <raise>:
 8008d44:	4b02      	ldr	r3, [pc, #8]	; (8008d50 <raise+0xc>)
 8008d46:	4601      	mov	r1, r0
 8008d48:	6818      	ldr	r0, [r3, #0]
 8008d4a:	f7ff bfd3 	b.w	8008cf4 <_raise_r>
 8008d4e:	bf00      	nop
 8008d50:	200000cc 	.word	0x200000cc

08008d54 <_kill_r>:
 8008d54:	b538      	push	{r3, r4, r5, lr}
 8008d56:	4d07      	ldr	r5, [pc, #28]	; (8008d74 <_kill_r+0x20>)
 8008d58:	2300      	movs	r3, #0
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	4608      	mov	r0, r1
 8008d5e:	4611      	mov	r1, r2
 8008d60:	602b      	str	r3, [r5, #0]
 8008d62:	f7f8 f841 	bl	8000de8 <_kill>
 8008d66:	1c43      	adds	r3, r0, #1
 8008d68:	d102      	bne.n	8008d70 <_kill_r+0x1c>
 8008d6a:	682b      	ldr	r3, [r5, #0]
 8008d6c:	b103      	cbz	r3, 8008d70 <_kill_r+0x1c>
 8008d6e:	6023      	str	r3, [r4, #0]
 8008d70:	bd38      	pop	{r3, r4, r5, pc}
 8008d72:	bf00      	nop
 8008d74:	20004e0c 	.word	0x20004e0c

08008d78 <_getpid_r>:
 8008d78:	f7f8 b82e 	b.w	8000dd8 <_getpid>

08008d7c <_sbrk_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4d06      	ldr	r5, [pc, #24]	; (8008d98 <_sbrk_r+0x1c>)
 8008d80:	2300      	movs	r3, #0
 8008d82:	4604      	mov	r4, r0
 8008d84:	4608      	mov	r0, r1
 8008d86:	602b      	str	r3, [r5, #0]
 8008d88:	f7f8 f8b6 	bl	8000ef8 <_sbrk>
 8008d8c:	1c43      	adds	r3, r0, #1
 8008d8e:	d102      	bne.n	8008d96 <_sbrk_r+0x1a>
 8008d90:	682b      	ldr	r3, [r5, #0]
 8008d92:	b103      	cbz	r3, 8008d96 <_sbrk_r+0x1a>
 8008d94:	6023      	str	r3, [r4, #0]
 8008d96:	bd38      	pop	{r3, r4, r5, pc}
 8008d98:	20004e0c 	.word	0x20004e0c

08008d9c <__swhatbuf_r>:
 8008d9c:	b570      	push	{r4, r5, r6, lr}
 8008d9e:	460c      	mov	r4, r1
 8008da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008da4:	2900      	cmp	r1, #0
 8008da6:	b096      	sub	sp, #88	; 0x58
 8008da8:	4615      	mov	r5, r2
 8008daa:	461e      	mov	r6, r3
 8008dac:	da0d      	bge.n	8008dca <__swhatbuf_r+0x2e>
 8008dae:	89a3      	ldrh	r3, [r4, #12]
 8008db0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008db4:	f04f 0100 	mov.w	r1, #0
 8008db8:	bf0c      	ite	eq
 8008dba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008dbe:	2340      	movne	r3, #64	; 0x40
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	6031      	str	r1, [r6, #0]
 8008dc4:	602b      	str	r3, [r5, #0]
 8008dc6:	b016      	add	sp, #88	; 0x58
 8008dc8:	bd70      	pop	{r4, r5, r6, pc}
 8008dca:	466a      	mov	r2, sp
 8008dcc:	f000 f848 	bl	8008e60 <_fstat_r>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	dbec      	blt.n	8008dae <__swhatbuf_r+0x12>
 8008dd4:	9901      	ldr	r1, [sp, #4]
 8008dd6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008dda:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008dde:	4259      	negs	r1, r3
 8008de0:	4159      	adcs	r1, r3
 8008de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008de6:	e7eb      	b.n	8008dc0 <__swhatbuf_r+0x24>

08008de8 <__smakebuf_r>:
 8008de8:	898b      	ldrh	r3, [r1, #12]
 8008dea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008dec:	079d      	lsls	r5, r3, #30
 8008dee:	4606      	mov	r6, r0
 8008df0:	460c      	mov	r4, r1
 8008df2:	d507      	bpl.n	8008e04 <__smakebuf_r+0x1c>
 8008df4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008df8:	6023      	str	r3, [r4, #0]
 8008dfa:	6123      	str	r3, [r4, #16]
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	6163      	str	r3, [r4, #20]
 8008e00:	b002      	add	sp, #8
 8008e02:	bd70      	pop	{r4, r5, r6, pc}
 8008e04:	ab01      	add	r3, sp, #4
 8008e06:	466a      	mov	r2, sp
 8008e08:	f7ff ffc8 	bl	8008d9c <__swhatbuf_r>
 8008e0c:	9900      	ldr	r1, [sp, #0]
 8008e0e:	4605      	mov	r5, r0
 8008e10:	4630      	mov	r0, r6
 8008e12:	f7ff fb79 	bl	8008508 <_malloc_r>
 8008e16:	b948      	cbnz	r0, 8008e2c <__smakebuf_r+0x44>
 8008e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e1c:	059a      	lsls	r2, r3, #22
 8008e1e:	d4ef      	bmi.n	8008e00 <__smakebuf_r+0x18>
 8008e20:	f023 0303 	bic.w	r3, r3, #3
 8008e24:	f043 0302 	orr.w	r3, r3, #2
 8008e28:	81a3      	strh	r3, [r4, #12]
 8008e2a:	e7e3      	b.n	8008df4 <__smakebuf_r+0xc>
 8008e2c:	89a3      	ldrh	r3, [r4, #12]
 8008e2e:	6020      	str	r0, [r4, #0]
 8008e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e34:	81a3      	strh	r3, [r4, #12]
 8008e36:	9b00      	ldr	r3, [sp, #0]
 8008e38:	6163      	str	r3, [r4, #20]
 8008e3a:	9b01      	ldr	r3, [sp, #4]
 8008e3c:	6120      	str	r0, [r4, #16]
 8008e3e:	b15b      	cbz	r3, 8008e58 <__smakebuf_r+0x70>
 8008e40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e44:	4630      	mov	r0, r6
 8008e46:	f000 f81d 	bl	8008e84 <_isatty_r>
 8008e4a:	b128      	cbz	r0, 8008e58 <__smakebuf_r+0x70>
 8008e4c:	89a3      	ldrh	r3, [r4, #12]
 8008e4e:	f023 0303 	bic.w	r3, r3, #3
 8008e52:	f043 0301 	orr.w	r3, r3, #1
 8008e56:	81a3      	strh	r3, [r4, #12]
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	431d      	orrs	r5, r3
 8008e5c:	81a5      	strh	r5, [r4, #12]
 8008e5e:	e7cf      	b.n	8008e00 <__smakebuf_r+0x18>

08008e60 <_fstat_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	4d07      	ldr	r5, [pc, #28]	; (8008e80 <_fstat_r+0x20>)
 8008e64:	2300      	movs	r3, #0
 8008e66:	4604      	mov	r4, r0
 8008e68:	4608      	mov	r0, r1
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	602b      	str	r3, [r5, #0]
 8008e6e:	f7f8 f81a 	bl	8000ea6 <_fstat>
 8008e72:	1c43      	adds	r3, r0, #1
 8008e74:	d102      	bne.n	8008e7c <_fstat_r+0x1c>
 8008e76:	682b      	ldr	r3, [r5, #0]
 8008e78:	b103      	cbz	r3, 8008e7c <_fstat_r+0x1c>
 8008e7a:	6023      	str	r3, [r4, #0]
 8008e7c:	bd38      	pop	{r3, r4, r5, pc}
 8008e7e:	bf00      	nop
 8008e80:	20004e0c 	.word	0x20004e0c

08008e84 <_isatty_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	4d06      	ldr	r5, [pc, #24]	; (8008ea0 <_isatty_r+0x1c>)
 8008e88:	2300      	movs	r3, #0
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	4608      	mov	r0, r1
 8008e8e:	602b      	str	r3, [r5, #0]
 8008e90:	f7f8 f819 	bl	8000ec6 <_isatty>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	d102      	bne.n	8008e9e <_isatty_r+0x1a>
 8008e98:	682b      	ldr	r3, [r5, #0]
 8008e9a:	b103      	cbz	r3, 8008e9e <_isatty_r+0x1a>
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ea0:	20004e0c 	.word	0x20004e0c

08008ea4 <_init>:
 8008ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea6:	bf00      	nop
 8008ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eaa:	bc08      	pop	{r3}
 8008eac:	469e      	mov	lr, r3
 8008eae:	4770      	bx	lr

08008eb0 <_fini>:
 8008eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb2:	bf00      	nop
 8008eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eb6:	bc08      	pop	{r3}
 8008eb8:	469e      	mov	lr, r3
 8008eba:	4770      	bx	lr
